# This file was generated based on ".graphqlconfig". Do not edit manually.

schema {
    query: Query
}

"This directive allows results to be deferred during execution"
directive @defer on FIELD

"Base GraphQL type for a field containing analytics metadata"
interface AnalyticsField {
    "Default aggregation of the field, i.e. 'Sum', 'Average'. See https://onlinehelp.tableau.com/current/pro/desktop/en-us/calculations_aggregation.html#AggFuncs"
    aggregation: String
    "For the percentile aggregation, the percentile number"
    aggregationParam: String
    "Data source that contains this field"
    datasource: Datasource
    "Default format for number or date"
    defaultFormat: String
    "List of lens fields which are derived from this field"
    derivedLensFields(
        "Filter by GraphQL field and given value"
        filter: LensField_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: LensFieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [LensField]
    "List of lens fields which are derived from this field"
    derivedLensFieldsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: LensField_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: LensFieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): LensFieldsConnection
    "Sheets that reference this field"
    directSheets(
        "Filter by GraphQL field and given value"
        filter: Sheet_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: SheetSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Sheet]
    "Sheets that reference this field"
    directSheetsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Sheet_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: SheetSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): SheetsConnection
    "The bin field that references this field"
    referencedByBins(
        "Filter by GraphQL field and given value"
        filter: BinField_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: BinFieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [BinField]
    "The bin field that references this field"
    referencedByBinsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: BinField_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: BinFieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): BinFieldsConnection
    "The calculated field that references this field"
    referencedByCalculations(
        "Filter by GraphQL field and given value"
        filter: CalculatedField_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: CalculatedFieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [CalculatedField]
    "The calculated field that references this field"
    referencedByCalculationsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: CalculatedField_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: CalculatedFieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): CalculatedFieldsConnection
    "The combined field that references this field"
    referencedByCombinedFields(
        "Filter by GraphQL field and given value"
        filter: CombinedField_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: CombinedFieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [CombinedField]
    "The combined field that references this field"
    referencedByCombinedFieldsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: CombinedField_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: CombinedFieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): CombinedFieldsConnection
    "Thie combined set field that references this field"
    referencedByCombinedSets(
        "Filter by GraphQL field and given value"
        filter: CombinedSetField_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: CombinedSetFieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [CombinedSetField]
    "Thie combined set field that references this field"
    referencedByCombinedSetsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: CombinedSetField_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: CombinedSetFieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): CombinedSetFieldsConnection
    "The field that references this field"
    referencedByFields(
        "Filter by GraphQL field and given value"
        filter: FieldReferencingField_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: FieldReferencingFieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [FieldReferencingField]
    "The field that references this field"
    referencedByFieldsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: FieldReferencingField_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: FieldReferencingFieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): FieldReferencingFieldsConnection
    "The data source filters that include this field"
    referencedByFilters(
        "Filter by GraphQL field and given value"
        filter: DatasourceFilter_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DatasourceFilterSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [DatasourceFilter]
    "The data source filters that include this field"
    referencedByFiltersConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: DatasourceFilter_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DatasourceFilterSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): DatasourceFiltersConnection
    "A flow input field that wraps this field"
    referencedByFlowFieldInputField(
        "Filter by GraphQL field and given value"
        filter: FlowFieldInputField_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: FlowFieldInputFieldSortOrder
    ): [FlowFieldInputField]
    "A flow input field that wraps this field"
    referencedByFlowFieldInputFieldConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: FlowFieldInputField_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: FlowFieldInputFieldSortOrder
    ): FlowFieldInputFieldsConnection
    "A flow output field that wraps this field"
    referencedByFlowFieldOutputField(
        "Filter by GraphQL field and given value"
        filter: FlowFieldOutputField_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: FlowFieldOutputFieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [FlowFieldOutputField]
    "A flow output field that wraps this field"
    referencedByFlowFieldOutputFieldConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: FlowFieldOutputField_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: FlowFieldOutputFieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): FlowFieldOutputFieldsConnection
    "The group field that references this field"
    referencedByGroups(
        "Filter by GraphQL field and given value"
        filter: GroupField_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: GroupFieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [GroupField]
    "The group field that references this field"
    referencedByGroupsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: GroupField_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: GroupFieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): GroupFieldsConnection
    "The hierarchy field that references this field"
    referencedByHierarchies(
        "Filter by GraphQL field and given value"
        filter: HierarchyField_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: HierarchyFieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [HierarchyField]
    "The hierarchy field that references this field"
    referencedByHierarchiesConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: HierarchyField_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: HierarchyFieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): HierarchyFieldsConnection
    "The field that references this remote field"
    referencedByRemoteFields(
        "Filter by GraphQL field and given value"
        filter: DatasourceField_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DatasourceFieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [DatasourceField]
    "The field that references this remote field"
    referencedByRemoteFieldsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: DatasourceField_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DatasourceFieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): DatasourceFieldsConnection
    "The set field that this field references"
    referencedBySets(
        "Filter by GraphQL field and given value"
        filter: SetField_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: SetFieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [SetField]
    "The set field that this field references"
    referencedBySetsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: SetField_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: SetFieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): SetFieldsConnection
    "For geographic data, the geographic role of the field. See https://onlinehelp.tableau.com/current/pro/desktop/en-us/maps_geographicroles.html"
    semanticRole: String
    "Sheets that reference this data source field"
    sheets(
        "Filter by GraphQL field and given value"
        filter: Sheet_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: SheetSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Sheet]
    "Sheets that reference this data source field"
    sheetsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Sheet_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: SheetSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): SheetsConnection
}

" content item that has been certified"
interface Certifiable {
    "The data quality certifications on a content item"
    dataQualityCertifications(
        "Filter by GraphQL field and given value"
        filter: DataQualityCertification_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DataQualityCertificationSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [DataQualityCertification!]!
    "The data quality certifications on a content item"
    dataQualityCertificationsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: DataQualityCertification_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DataQualityCertificationSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): DataQualityCertificationsConnection
    "Unique identifier used by the metadata API. Not the same as the numeric ID used on server"
    id: ID!
    "True if this content item contains an active data quality certification"
    isCertified: Boolean!
    "Locally unique identifier used for the REST API on the Tableau Server"
    luid: String!
    "The name of the asset"
    name: String
}

"Base GraphQL type for a field containing data. Most types of Fields will implement this interface with exceptions like HierarchyField."
interface DataField {
    "Data category of the field"
    dataCategory: FieldRoleCategory
    "Type of the data in the field. See https://onlinehelp.tableau.com/current/pro/desktop/en-us/datafields_typesandroles_datatypes.html"
    dataType: FieldDataType
    "Data source that contains this field"
    datasource: Datasource
    "List of lens fields which are derived from this field"
    derivedLensFields(
        "Filter by GraphQL field and given value"
        filter: LensField_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: LensFieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [LensField]
    "List of lens fields which are derived from this field"
    derivedLensFieldsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: LensField_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: LensFieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): LensFieldsConnection
    "Sheets that reference this field"
    directSheets(
        "Filter by GraphQL field and given value"
        filter: Sheet_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: SheetSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Sheet]
    "Sheets that reference this field"
    directSheetsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Sheet_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: SheetSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): SheetsConnection
    "The bin field that references this field"
    referencedByBins(
        "Filter by GraphQL field and given value"
        filter: BinField_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: BinFieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [BinField]
    "The bin field that references this field"
    referencedByBinsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: BinField_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: BinFieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): BinFieldsConnection
    "The calculated field that references this field"
    referencedByCalculations(
        "Filter by GraphQL field and given value"
        filter: CalculatedField_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: CalculatedFieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [CalculatedField]
    "The calculated field that references this field"
    referencedByCalculationsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: CalculatedField_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: CalculatedFieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): CalculatedFieldsConnection
    "The combined field that references this field"
    referencedByCombinedFields(
        "Filter by GraphQL field and given value"
        filter: CombinedField_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: CombinedFieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [CombinedField]
    "The combined field that references this field"
    referencedByCombinedFieldsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: CombinedField_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: CombinedFieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): CombinedFieldsConnection
    "Thie combined set field that references this field"
    referencedByCombinedSets(
        "Filter by GraphQL field and given value"
        filter: CombinedSetField_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: CombinedSetFieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [CombinedSetField]
    "Thie combined set field that references this field"
    referencedByCombinedSetsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: CombinedSetField_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: CombinedSetFieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): CombinedSetFieldsConnection
    "The field that references this field"
    referencedByFields(
        "Filter by GraphQL field and given value"
        filter: FieldReferencingField_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: FieldReferencingFieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [FieldReferencingField]
    "The field that references this field"
    referencedByFieldsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: FieldReferencingField_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: FieldReferencingFieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): FieldReferencingFieldsConnection
    "The data source filters that include this field"
    referencedByFilters(
        "Filter by GraphQL field and given value"
        filter: DatasourceFilter_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DatasourceFilterSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [DatasourceFilter]
    "The data source filters that include this field"
    referencedByFiltersConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: DatasourceFilter_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DatasourceFilterSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): DatasourceFiltersConnection
    "A flow input field that wraps this field"
    referencedByFlowFieldInputField(
        "Filter by GraphQL field and given value"
        filter: FlowFieldInputField_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: FlowFieldInputFieldSortOrder
    ): [FlowFieldInputField]
    "A flow input field that wraps this field"
    referencedByFlowFieldInputFieldConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: FlowFieldInputField_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: FlowFieldInputFieldSortOrder
    ): FlowFieldInputFieldsConnection
    "A flow output field that wraps this field"
    referencedByFlowFieldOutputField(
        "Filter by GraphQL field and given value"
        filter: FlowFieldOutputField_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: FlowFieldOutputFieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [FlowFieldOutputField]
    "A flow output field that wraps this field"
    referencedByFlowFieldOutputFieldConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: FlowFieldOutputField_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: FlowFieldOutputFieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): FlowFieldOutputFieldsConnection
    "The group field that references this field"
    referencedByGroups(
        "Filter by GraphQL field and given value"
        filter: GroupField_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: GroupFieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [GroupField]
    "The group field that references this field"
    referencedByGroupsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: GroupField_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: GroupFieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): GroupFieldsConnection
    "The hierarchy field that references this field"
    referencedByHierarchies(
        "Filter by GraphQL field and given value"
        filter: HierarchyField_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: HierarchyFieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [HierarchyField]
    "The hierarchy field that references this field"
    referencedByHierarchiesConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: HierarchyField_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: HierarchyFieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): HierarchyFieldsConnection
    "The field that references this remote field"
    referencedByRemoteFields(
        "Filter by GraphQL field and given value"
        filter: DatasourceField_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DatasourceFieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [DatasourceField]
    "The field that references this remote field"
    referencedByRemoteFieldsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: DatasourceField_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DatasourceFieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): DatasourceFieldsConnection
    "The set field that this field references"
    referencedBySets(
        "Filter by GraphQL field and given value"
        filter: SetField_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: SetFieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [SetField]
    "The set field that this field references"
    referencedBySetsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: SetField_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: SetFieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): SetFieldsConnection
    "Role of the field: 'dimension', 'measure' or 'unknown'"
    role: FieldRole
    "Sheets that reference this data source field"
    sheets(
        "Filter by GraphQL field and given value"
        filter: Sheet_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: SheetSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Sheet]
    "Sheets that reference this data source field"
    sheetsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Sheet_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: SheetSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): SheetsConnection
}

" database containing tables"
interface Database {
    "Notes related to this database being marked as certified"
    certificationNote: String @deprecated(reason: "No longer supported. Use 'dataQualityCertifications'")
    "User who marked this database as certified"
    certifier: TableauUser @deprecated(reason: "No longer supported. Use 'dataQualityCertifications'")
    "Connection type shortname"
    connectionType: String
    "Contact for this database"
    contact: TableauUser
    "The data quality certifications on a database"
    dataQualityCertifications(
        "Filter by GraphQL field and given value"
        filter: DataQualityCertification_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DataQualityCertificationSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [DataQualityCertification!]!
    "The data quality certifications on a database"
    dataQualityCertificationsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: DataQualityCertification_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DataQualityCertificationSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): DataQualityCertificationsConnection
    "The optional data quality warning on a database"
    dataQualityWarning: DataQualityWarning @deprecated(reason: "Use 'dataQualityWarnings'")
    "The data quality warnings on a database"
    dataQualityWarnings(
        "Filter by GraphQL field and given value"
        filter: DataQualityWarning_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DataQualityWarningSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [DataQualityWarning!]!
    "The data quality warnings on a database"
    dataQualityWarningsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: DataQualityWarning_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DataQualityWarningSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): DataQualityWarningsConnection
    "User modifiable description of this database"
    description: String
    "Dashboards connected to the database"
    downstreamDashboards(
        "Filter by GraphQL field and given value"
        filter: Dashboard_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DashboardSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Dashboard!]!
    "Dashboards connected to the database"
    downstreamDashboardsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Dashboard_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DashboardSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): DashboardsConnection
    "Databases downstream of this database"
    downstreamDatabases(
        "Filter by GraphQL field and given value"
        filter: Database_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DatabaseSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Database!]!
    "Databases downstream of this database"
    downstreamDatabasesConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Database_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DatabaseSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): DatabasesConnection
    "Published datasources connected to the database"
    downstreamDatasources(
        "Filter by GraphQL field and given value"
        filter: PublishedDatasource_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: PublishedDatasourceSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [PublishedDatasource!]!
    "Published datasources connected to the database"
    downstreamDatasourcesConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: PublishedDatasource_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: PublishedDatasourceSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): PublishedDatasourcesConnection
    "Flows downstream of this database"
    downstreamFlows(
        "Filter by GraphQL field and given value"
        filter: Flow_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: FlowSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Flow!]!
    "Flows downstream of this database"
    downstreamFlowsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Flow_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: FlowSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): FlowsConnection
    "Lenses connected to the database"
    downstreamLenses(
        "Filter by GraphQL field and given value"
        filter: Lens_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: LensSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Lens!]!
    "Lenses connected to the database"
    downstreamLensesConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Lens_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: LensSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): LensesConnection
    "Metrics connected to the database"
    downstreamMetrics(
        "Filter by GraphQL field and given value"
        filter: Metric_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: MetricSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Metric!]!
    "Metrics connected to the database"
    downstreamMetricsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Metric_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: MetricSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): MetricsConnection
    "Owners connected to the database"
    downstreamOwners(
        "Filter by GraphQL field and given value"
        filter: TableauUser_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: TableauUserSortOrder
    ): [TableauUser!]!
    "Owners connected to the database"
    downstreamOwnersConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: TableauUser_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: TableauUserSortOrder
    ): TableauUsersConnection
    "Sheets connected to the database"
    downstreamSheets(
        "Filter by GraphQL field and given value"
        filter: Sheet_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: SheetSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Sheet!]!
    "Sheets connected to the database"
    downstreamSheetsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Sheet_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: SheetSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): SheetsConnection
    "Tables downstream of this database"
    downstreamTables(
        "Filter by GraphQL field and given value"
        filter: DatabaseTable_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DatabaseTableSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [DatabaseTable!]!
    "Tables downstream of this database"
    downstreamTablesConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: DatabaseTable_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DatabaseTableSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): DatabaseTablesConnection
    "Virtual connection tables downstream of this database"
    downstreamVirtualConnectionTables(
        "Filter by GraphQL field and given value"
        filter: VirtualConnectionTable_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: VirtualConnectionTableSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [VirtualConnectionTable!]!
    "Virtual connection tables downstream of this database"
    downstreamVirtualConnectionTablesConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: VirtualConnectionTable_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: VirtualConnectionTableSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): VirtualConnectionTablesConnection
    "Virtual connection tables downstream of this database"
    downstreamVirtualConnections(
        "Filter by GraphQL field and given value"
        filter: VirtualConnection_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: VirtualConnectionSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [VirtualConnection!]!
    "Virtual connection tables downstream of this database"
    downstreamVirtualConnectionsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: VirtualConnection_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: VirtualConnectionSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): VirtualConnectionsConnection
    "Workbooks connected to the database"
    downstreamWorkbooks(
        "Filter by GraphQL field and given value"
        filter: Workbook_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: WorkbookSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Workbook!]!
    "Workbooks connected to the database"
    downstreamWorkbooksConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Workbook_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: WorkbookSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): WorkbooksConnection
    "True if the database has an active data quality warning"
    hasActiveWarning: Boolean!
    "Unique identifier used by the metadata API.  Not the same as the numeric ID used on server"
    id: ID!
    "True if this database contains an active data quality certification"
    isCertified: Boolean!
    "True if this database has its permission locked"
    isControlledPermissionsEnabled: Boolean
    "True if this database is embedded in Tableau content, e.g., a packaged workbook"
    isEmbedded: Boolean
    "True if this database has been grouped with other databases"
    isGrouped: Boolean
    "Locally unique identifier used for the REST API on the Tableau Server"
    luid: String!
    "Name shown in server and desktop clients"
    name: String
    "The name of the project in which the table is visible. Will be empty if the table is not in a project."
    projectName: String
    "The ID of the project in which the table is visible. Will be empty if the table is not in a project."
    projectVizportalUrlId: String
    "The custom SQL queries that reference this database"
    referencedByQueries(
        "Filter by GraphQL field and given value"
        filter: CustomSQLTable_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: CustomSQLTableSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [CustomSQLTable]
    "The custom SQL queries that reference this database"
    referencedByQueriesConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: CustomSQLTable_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: CustomSQLTableSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): CustomSQLTablesConnection
    "Tables belonging to this database"
    tables(
        "Filter by GraphQL field and given value"
        filter: DatabaseTable_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DatabaseTableSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [DatabaseTable]
    "Tables belonging to this database"
    tablesConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: DatabaseTable_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DatabaseTableSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): DatabaseTablesConnection
    "Tags associated with the database"
    tags(
        "Filter by GraphQL field and given value"
        filter: Tag_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: TagSortOrder
    ): [Tag!]!
    "Tags associated with the database"
    tagsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Tag_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: TagSortOrder
    ): TagsConnection
    "Data quality warnings upstream from this database"
    upstreamDataQualityWarnings(
        "Filter by GraphQL field and given value"
        filter: DataQualityWarning_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DataQualityWarningSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [DataQualityWarning!]!
    "Data quality warnings upstream from this database"
    upstreamDataQualityWarningsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: DataQualityWarning_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DataQualityWarningSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): DataQualityWarningsConnection
    "Databases upstream of this database"
    upstreamDatabases(
        "Filter by GraphQL field and given value"
        filter: Database_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DatabaseSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Database!]!
    "Databases upstream of this database"
    upstreamDatabasesConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Database_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DatabaseSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): DatabasesConnection
    "Datasources upstream of this database"
    upstreamDatasources(
        "Filter by GraphQL field and given value"
        filter: PublishedDatasource_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: PublishedDatasourceSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [PublishedDatasource!]!
    "Datasources upstream of this database"
    upstreamDatasourcesConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: PublishedDatasource_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: PublishedDatasourceSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): PublishedDatasourcesConnection
    "Flows upstream of this database"
    upstreamFlows(
        "Filter by GraphQL field and given value"
        filter: Flow_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: FlowSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Flow!]!
    "Flows upstream of this database"
    upstreamFlowsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Flow_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: FlowSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): FlowsConnection
    "Tables upstream of this database"
    upstreamTables(
        "Filter by GraphQL field and given value"
        filter: DatabaseTable_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DatabaseTableSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [DatabaseTable!]!
    "Tables upstream of this database"
    upstreamTablesConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: DatabaseTable_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DatabaseTableSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): DatabaseTablesConnection
    "Virtual connection tables upstream of this database"
    upstreamVirtualConnectionTables(
        "Filter by GraphQL field and given value"
        filter: VirtualConnectionTable_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: VirtualConnectionTableSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [VirtualConnectionTable!]!
    "Virtual connection tables upstream of this database"
    upstreamVirtualConnectionTablesConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: VirtualConnectionTable_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: VirtualConnectionTableSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): VirtualConnectionTablesConnection
    "Virtual connection tables upstream of this database"
    upstreamVirtualConnections(
        "Filter by GraphQL field and given value"
        filter: VirtualConnection_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: VirtualConnectionSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [VirtualConnection!]!
    "Virtual connection tables upstream of this database"
    upstreamVirtualConnectionsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: VirtualConnection_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: VirtualConnectionSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): VirtualConnectionsConnection
    "Vizportal ID of this database, for use in client-to-server communications"
    vizportalId: String!
}

"""

Root GraphQL type for embedded and published data sources

Data sources are a way to represent how Tableau Desktop and Tableau Server model and connect to data. Data sources can be published separately, as a published data source, or may be contained in a workbook as an embedded data source.

See https://onlinehelp.tableau.com/current/server/en-us/datasource.htm
"""
interface Datasource {
    "True if the datasource contains unsupported custom SQL, in which case lineage may be incomplete"
    containsUnsupportedCustomSql: Boolean
    "Time the datasource was created. Available in Tableau Cloud June 2022 / Server 2022.3 and later."
    createdAt: DateTime
    "Data source filters contained in this data source"
    datasourceFilters(
        "Filter by GraphQL field and given value"
        filter: DatasourceFilter_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DatasourceFilterSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [DatasourceFilter!]!
    "Data source filters contained in this data source"
    datasourceFiltersConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: DatasourceFilter_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DatasourceFilterSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): DatasourceFiltersConnection
    "Dashboards downstream from this data source"
    downstreamDashboards(
        "Filter by GraphQL field and given value"
        filter: Dashboard_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DashboardSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Dashboard!]!
    "Dashboards downstream from this data source"
    downstreamDashboardsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Dashboard_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DashboardSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): DashboardsConnection
    "Workbook owners downstream from this data source"
    downstreamOwners(
        "Filter by GraphQL field and given value"
        filter: TableauUser_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: TableauUserSortOrder
    ): [TableauUser!]!
    "Workbook owners downstream from this data source"
    downstreamOwnersConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: TableauUser_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: TableauUserSortOrder
    ): TableauUsersConnection
    "Sheets downstream from this data source"
    downstreamSheets(
        "Filter by GraphQL field and given value"
        filter: Sheet_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: SheetSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Sheet!]!
    "Sheets downstream from this data source"
    downstreamSheetsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Sheet_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: SheetSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): SheetsConnection
    "Workbooks downstream from this data source"
    downstreamWorkbooks(
        "Filter by GraphQL field and given value"
        filter: Workbook_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: WorkbookSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Workbook!]!
    "Workbooks downstream from this data source"
    downstreamWorkbooksConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Workbook_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: WorkbookSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): WorkbooksConnection
    "Time an extract was last incrementally updated"
    extractLastIncrementalUpdateTime: DateTime
    "Time an extract was last fully refreshed"
    extractLastRefreshTime: DateTime
    "Time an extract was last updated by either a full refresh, incremental update, or creation"
    extractLastUpdateTime: DateTime
    "Fields usable in workbooks connected to this data source"
    fields(
        "Filter by GraphQL field and given value"
        filter: Field_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: FieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Field!]!
    "Fields usable in workbooks connected to this data source"
    fieldsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Field_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: FieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): FieldsConnection
    "True if datasource contains extracted data"
    hasExtracts: Boolean
    "True if data source contains a formula that involves a user function (for example, USERNAME or ISMEMBEROF)"
    hasUserReference: Boolean
    "Unique identifier used by the metadata API. Not the same as the numeric ID used on server"
    id: ID!
    "The lenses derived from this datasource"
    lenses(
        "Filter by GraphQL field and given value"
        filter: Lens_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: LensSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Lens]
    "The lenses derived from this datasource"
    lensesConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Lens_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: LensSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): LensesConnection
    "Name shown in server and desktop clients"
    name: String
    "Time the datasource was last updated. Available in Tableau Cloud June 2022 / Server 2022.3 and later."
    updatedAt: DateTime
    "Databases upstream from this data source"
    upstreamDatabases(
        "Filter by GraphQL field and given value"
        filter: Database_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DatabaseSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Database!]!
    "Databases upstream from this data source"
    upstreamDatabasesConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Database_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DatabaseSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): DatabasesConnection
    "Tables upstream from this data source"
    upstreamTables(
        "Filter by GraphQL field and given value"
        filter: DatabaseTable_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DatabaseTableSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [DatabaseTable!]!
    "Tables upstream from this data source"
    upstreamTablesConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: DatabaseTable_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DatabaseTableSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): DatabaseTablesConnection
}

"Base GraphQL type for a field"
interface Field {
    "Data source that contains this field"
    datasource: Datasource
    "List of lens fields which are derived from this field"
    derivedLensFields(
        "Filter by GraphQL field and given value"
        filter: LensField_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: LensFieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [LensField]
    "List of lens fields which are derived from this field"
    derivedLensFieldsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: LensField_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: LensFieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): LensFieldsConnection
    "Description of field shown in server and desktop clients"
    description: String
    "description that is shown in the Tableau UI"
    descriptionInherited(
        "Method for selecting inherited value"
        inheritanceType: InheritanceType,
        "Option to select how to apply permissions. By default it is OBFUSCATE_RESULTS"
        permissionMode: PermissionMode
    ): [InheritedStringResult]
    "Sheets that reference this field"
    directSheets(
        "Filter by GraphQL field and given value"
        filter: Sheet_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: SheetSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Sheet]
    "Sheets that reference this field"
    directSheetsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Sheet_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: SheetSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): SheetsConnection
    "Columns downstream of this field"
    downstreamColumns(
        "Filter by GraphQL field and given value"
        filter: Column_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: ColumnSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Column!]!
    "Columns downstream of this field"
    downstreamColumnsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Column_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: ColumnSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): ColumnsConnection
    "Dashboards connected downstream from the field"
    downstreamDashboards(
        "Filter by GraphQL field and given value"
        filter: Dashboard_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DashboardSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Dashboard!]!
    "Dashboards connected downstream from the field"
    downstreamDashboardsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Dashboard_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DashboardSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): DashboardsConnection
    "Databases downstream of this field"
    downstreamDatabases(
        "Filter by GraphQL field and given value"
        filter: Database_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DatabaseSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Database!]!
    "Databases downstream of this field"
    downstreamDatabasesConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Database_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DatabaseSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): DatabasesConnection
    "Datasources connected downstream from this field"
    downstreamDatasources(
        "Filter by GraphQL field and given value"
        filter: PublishedDatasource_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: PublishedDatasourceSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [PublishedDatasource!]
    "Datasources connected downstream from this field"
    downstreamDatasourcesConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: PublishedDatasource_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: PublishedDatasourceSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): PublishedDatasourcesConnection
    "Downstream fields that reference this field"
    downstreamFields(
        "Filter by GraphQL field and given value"
        filter: Field_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: FieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Field!]!
    "Downstream fields that reference this field"
    downstreamFieldsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Field_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: FieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): FieldsConnection
    "Flows downstream of this field"
    downstreamFlows(
        "Filter by GraphQL field and given value"
        filter: Flow_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: FlowSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Flow!]!
    "Flows downstream of this field"
    downstreamFlowsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Flow_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: FlowSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): FlowsConnection
    "Lenses connected downstream from this field"
    downstreamLenses(
        "Filter by GraphQL field and given value"
        filter: Lens_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: LensSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Lens!]
    "Lenses connected downstream from this field"
    downstreamLensesConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Lens_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: LensSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): LensesConnection
    "Metrics connected downstream from the field"
    downstreamMetrics(
        "Filter by GraphQL field and given value"
        filter: Metric_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: MetricSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Metric!]
    "Metrics connected downstream from the field"
    downstreamMetricsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Metric_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: MetricSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): MetricsConnection
    "Workbook owners (authors) connected downstream from the field"
    downstreamOwners(
        "Filter by GraphQL field and given value"
        filter: TableauUser_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: TableauUserSortOrder
    ): [TableauUser!]
    "Workbook owners (authors) connected downstream from the field"
    downstreamOwnersConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: TableauUser_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: TableauUserSortOrder
    ): TableauUsersConnection
    "Sheets connected downstream from the field"
    downstreamSheets(
        "Filter by GraphQL field and given value"
        filter: Sheet_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: SheetSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Sheet!]!
    "Sheets connected downstream from the field"
    downstreamSheetsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Sheet_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: SheetSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): SheetsConnection
    "Tables downstream of this field"
    downstreamTables(
        "Filter by GraphQL field and given value"
        filter: DatabaseTable_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DatabaseTableSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [DatabaseTable!]!
    "Tables downstream of this field"
    downstreamTablesConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: DatabaseTable_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DatabaseTableSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): DatabaseTablesConnection
    "Virtual connection tables downstream of this field"
    downstreamVirtualConnectionTables(
        "Filter by GraphQL field and given value"
        filter: VirtualConnectionTable_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: VirtualConnectionTableSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [VirtualConnectionTable!]!
    "Virtual connection tables downstream of this field"
    downstreamVirtualConnectionTablesConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: VirtualConnectionTable_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: VirtualConnectionTableSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): VirtualConnectionTablesConnection
    "Virtual connections downstream of this field"
    downstreamVirtualConnections(
        "Filter by GraphQL field and given value"
        filter: VirtualConnection_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: VirtualConnectionSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [VirtualConnection!]!
    "Virtual connections downstream of this field"
    downstreamVirtualConnectionsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: VirtualConnection_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: VirtualConnectionSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): VirtualConnectionsConnection
    "Workbooks connected downstream from the field"
    downstreamWorkbooks(
        "Filter by GraphQL field and given value"
        filter: Workbook_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: WorkbookSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Workbook!]
    "Workbooks connected downstream from the field"
    downstreamWorkbooksConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Workbook_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: WorkbookSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): WorkbooksConnection
    "Name of folder if the field is in a folder. See https://onlinehelp.tableau.com/current/pro/desktop/en-us/datafields_dwfeatures.html#Organize"
    folderName: String
    "Name internally used to uniquely identify fields"
    fullyQualifiedName: String
    "Unique identifier used by the metadata API.  Not the same as the numeric ID used on server"
    id: ID!
    "True if the field is hidden"
    isHidden: Boolean
    "Name shown in server"
    name: String
    "The bin field that references this field"
    referencedByBins(
        "Filter by GraphQL field and given value"
        filter: BinField_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: BinFieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [BinField]
    "The bin field that references this field"
    referencedByBinsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: BinField_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: BinFieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): BinFieldsConnection
    "The calculated field that references this field"
    referencedByCalculations(
        "Filter by GraphQL field and given value"
        filter: CalculatedField_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: CalculatedFieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [CalculatedField]
    "The calculated field that references this field"
    referencedByCalculationsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: CalculatedField_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: CalculatedFieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): CalculatedFieldsConnection
    "The combined field that references this field"
    referencedByCombinedFields(
        "Filter by GraphQL field and given value"
        filter: CombinedField_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: CombinedFieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [CombinedField]
    "The combined field that references this field"
    referencedByCombinedFieldsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: CombinedField_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: CombinedFieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): CombinedFieldsConnection
    "Thie combined set field that references this field"
    referencedByCombinedSets(
        "Filter by GraphQL field and given value"
        filter: CombinedSetField_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: CombinedSetFieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [CombinedSetField]
    "Thie combined set field that references this field"
    referencedByCombinedSetsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: CombinedSetField_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: CombinedSetFieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): CombinedSetFieldsConnection
    "The field that references this field"
    referencedByFields(
        "Filter by GraphQL field and given value"
        filter: FieldReferencingField_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: FieldReferencingFieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [FieldReferencingField]
    "The field that references this field"
    referencedByFieldsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: FieldReferencingField_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: FieldReferencingFieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): FieldReferencingFieldsConnection
    "The data source filters that include this field"
    referencedByFilters(
        "Filter by GraphQL field and given value"
        filter: DatasourceFilter_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DatasourceFilterSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [DatasourceFilter]
    "The data source filters that include this field"
    referencedByFiltersConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: DatasourceFilter_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DatasourceFilterSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): DatasourceFiltersConnection
    "A flow input field that wraps this field"
    referencedByFlowFieldInputField(
        "Filter by GraphQL field and given value"
        filter: FlowFieldInputField_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: FlowFieldInputFieldSortOrder
    ): [FlowFieldInputField]
    "A flow input field that wraps this field"
    referencedByFlowFieldInputFieldConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: FlowFieldInputField_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: FlowFieldInputFieldSortOrder
    ): FlowFieldInputFieldsConnection
    "A flow output field that wraps this field"
    referencedByFlowFieldOutputField(
        "Filter by GraphQL field and given value"
        filter: FlowFieldOutputField_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: FlowFieldOutputFieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [FlowFieldOutputField]
    "A flow output field that wraps this field"
    referencedByFlowFieldOutputFieldConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: FlowFieldOutputField_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: FlowFieldOutputFieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): FlowFieldOutputFieldsConnection
    "The group field that references this field"
    referencedByGroups(
        "Filter by GraphQL field and given value"
        filter: GroupField_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: GroupFieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [GroupField]
    "The group field that references this field"
    referencedByGroupsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: GroupField_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: GroupFieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): GroupFieldsConnection
    "The hierarchy field that references this field"
    referencedByHierarchies(
        "Filter by GraphQL field and given value"
        filter: HierarchyField_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: HierarchyFieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [HierarchyField]
    "The hierarchy field that references this field"
    referencedByHierarchiesConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: HierarchyField_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: HierarchyFieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): HierarchyFieldsConnection
    "The field that references this remote field"
    referencedByRemoteFields(
        "Filter by GraphQL field and given value"
        filter: DatasourceField_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DatasourceFieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [DatasourceField]
    "The field that references this remote field"
    referencedByRemoteFieldsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: DatasourceField_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DatasourceFieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): DatasourceFieldsConnection
    "The set field that this field references"
    referencedBySets(
        "Filter by GraphQL field and given value"
        filter: SetField_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: SetFieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [SetField]
    "The set field that this field references"
    referencedBySetsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: SetField_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: SetFieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): SetFieldsConnection
    "Sheets that reference this data source field"
    sheets(
        "Filter by GraphQL field and given value"
        filter: Sheet_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: SheetSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Sheet]
    "Sheets that reference this data source field"
    sheetsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Sheet_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: SheetSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): SheetsConnection
    "All upstream columns this field references"
    upstreamColumns(
        "Filter by GraphQL field and given value"
        filter: Column_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: ColumnSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Column]!
    "All upstream columns this field references"
    upstreamColumnsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Column_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: ColumnSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): ColumnsConnection
    "Databases connected upstream from the field"
    upstreamDatabases(
        "Filter by GraphQL field and given value"
        filter: Database_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DatabaseSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Database!]!
    "Databases connected upstream from the field"
    upstreamDatabasesConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Database_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DatabaseSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): DatabasesConnection
    "Datasources upstream of this field"
    upstreamDatasources(
        "Filter by GraphQL field and given value"
        filter: PublishedDatasource_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: PublishedDatasourceSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [PublishedDatasource!]!
    "Datasources upstream of this field"
    upstreamDatasourcesConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: PublishedDatasource_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: PublishedDatasourceSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): PublishedDatasourcesConnection
    "fields that are upstream of this field"
    upstreamFields(
        "Filter by GraphQL field and given value"
        filter: Field_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: FieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Field]!
    "fields that are upstream of this field"
    upstreamFieldsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Field_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: FieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): FieldsConnection
    "Flows connected upstream from the field"
    upstreamFlows(
        "Filter by GraphQL field and given value"
        filter: Flow_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: FlowSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Flow!]!
    "Flows connected upstream from the field"
    upstreamFlowsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Flow_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: FlowSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): FlowsConnection
    "Tables connected upstream from the field"
    upstreamTables(
        "Filter by GraphQL field and given value"
        filter: DatabaseTable_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DatabaseTableSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [DatabaseTable!]!
    "Tables connected upstream from the field"
    upstreamTablesConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: DatabaseTable_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DatabaseTableSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): DatabaseTablesConnection
    "Virtual connection tables upstream of this field"
    upstreamVirtualConnectionTables(
        "Filter by GraphQL field and given value"
        filter: VirtualConnectionTable_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: VirtualConnectionTableSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [VirtualConnectionTable!]!
    "Virtual connection tables upstream of this field"
    upstreamVirtualConnectionTablesConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: VirtualConnectionTable_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: VirtualConnectionTableSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): VirtualConnectionTablesConnection
    "Virtual connections upstream of this field"
    upstreamVirtualConnections(
        "Filter by GraphQL field and given value"
        filter: VirtualConnection_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: VirtualConnectionSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [VirtualConnection!]!
    "Virtual connections upstream of this field"
    upstreamVirtualConnectionsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: VirtualConnection_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: VirtualConnectionSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): VirtualConnectionsConnection
}

"Base GraphQL type for a field that references another field. For example, a CalculatedField can reference a ColumnField in its formula."
interface FieldReferencingField {
    "Data source that contains this field"
    datasource: Datasource
    "List of lens fields which are derived from this field"
    derivedLensFields(
        "Filter by GraphQL field and given value"
        filter: LensField_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: LensFieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [LensField]
    "List of lens fields which are derived from this field"
    derivedLensFieldsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: LensField_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: LensFieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): LensFieldsConnection
    "Sheets that reference this field"
    directSheets(
        "Filter by GraphQL field and given value"
        filter: Sheet_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: SheetSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Sheet]
    "Sheets that reference this field"
    directSheetsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Sheet_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: SheetSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): SheetsConnection
    "Fields referenced by this field"
    fields(
        "Filter by GraphQL field and given value"
        filter: Field_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: FieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Field!]!
    "Fields referenced by this field"
    fieldsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Field_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: FieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): FieldsConnection
    "Name internally used to uniquely identify fields"
    fullyQualifiedName: String
    "Unique identifier used by the metadata API.  Not the same as the numeric ID used on server"
    id: ID!
    "The bin field that references this field"
    referencedByBins(
        "Filter by GraphQL field and given value"
        filter: BinField_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: BinFieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [BinField]
    "The bin field that references this field"
    referencedByBinsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: BinField_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: BinFieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): BinFieldsConnection
    "The calculated field that references this field"
    referencedByCalculations(
        "Filter by GraphQL field and given value"
        filter: CalculatedField_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: CalculatedFieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [CalculatedField]
    "The calculated field that references this field"
    referencedByCalculationsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: CalculatedField_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: CalculatedFieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): CalculatedFieldsConnection
    "The combined field that references this field"
    referencedByCombinedFields(
        "Filter by GraphQL field and given value"
        filter: CombinedField_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: CombinedFieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [CombinedField]
    "The combined field that references this field"
    referencedByCombinedFieldsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: CombinedField_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: CombinedFieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): CombinedFieldsConnection
    "Thie combined set field that references this field"
    referencedByCombinedSets(
        "Filter by GraphQL field and given value"
        filter: CombinedSetField_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: CombinedSetFieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [CombinedSetField]
    "Thie combined set field that references this field"
    referencedByCombinedSetsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: CombinedSetField_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: CombinedSetFieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): CombinedSetFieldsConnection
    "The field that references this field"
    referencedByFields(
        "Filter by GraphQL field and given value"
        filter: FieldReferencingField_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: FieldReferencingFieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [FieldReferencingField]
    "The field that references this field"
    referencedByFieldsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: FieldReferencingField_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: FieldReferencingFieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): FieldReferencingFieldsConnection
    "The data source filters that include this field"
    referencedByFilters(
        "Filter by GraphQL field and given value"
        filter: DatasourceFilter_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DatasourceFilterSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [DatasourceFilter]
    "The data source filters that include this field"
    referencedByFiltersConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: DatasourceFilter_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DatasourceFilterSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): DatasourceFiltersConnection
    "A flow input field that wraps this field"
    referencedByFlowFieldInputField(
        "Filter by GraphQL field and given value"
        filter: FlowFieldInputField_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: FlowFieldInputFieldSortOrder
    ): [FlowFieldInputField]
    "A flow input field that wraps this field"
    referencedByFlowFieldInputFieldConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: FlowFieldInputField_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: FlowFieldInputFieldSortOrder
    ): FlowFieldInputFieldsConnection
    "A flow output field that wraps this field"
    referencedByFlowFieldOutputField(
        "Filter by GraphQL field and given value"
        filter: FlowFieldOutputField_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: FlowFieldOutputFieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [FlowFieldOutputField]
    "A flow output field that wraps this field"
    referencedByFlowFieldOutputFieldConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: FlowFieldOutputField_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: FlowFieldOutputFieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): FlowFieldOutputFieldsConnection
    "The group field that references this field"
    referencedByGroups(
        "Filter by GraphQL field and given value"
        filter: GroupField_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: GroupFieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [GroupField]
    "The group field that references this field"
    referencedByGroupsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: GroupField_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: GroupFieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): GroupFieldsConnection
    "The hierarchy field that references this field"
    referencedByHierarchies(
        "Filter by GraphQL field and given value"
        filter: HierarchyField_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: HierarchyFieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [HierarchyField]
    "The hierarchy field that references this field"
    referencedByHierarchiesConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: HierarchyField_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: HierarchyFieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): HierarchyFieldsConnection
    "The field that references this remote field"
    referencedByRemoteFields(
        "Filter by GraphQL field and given value"
        filter: DatasourceField_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DatasourceFieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [DatasourceField]
    "The field that references this remote field"
    referencedByRemoteFieldsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: DatasourceField_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DatasourceFieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): DatasourceFieldsConnection
    "The set field that this field references"
    referencedBySets(
        "Filter by GraphQL field and given value"
        filter: SetField_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: SetFieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [SetField]
    "The set field that this field references"
    referencedBySetsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: SetField_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: SetFieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): SetFieldsConnection
    "Sheets that reference this data source field"
    sheets(
        "Filter by GraphQL field and given value"
        filter: Sheet_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: SheetSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Sheet]
    "Sheets that reference this data source field"
    sheetsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Sheet_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: SheetSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): SheetsConnection
    "Databases connected upstream from the field"
    upstreamDatabases(
        "Filter by GraphQL field and given value"
        filter: Database_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DatabaseSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Database!]!
    "Databases connected upstream from the field"
    upstreamDatabasesConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Database_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DatabaseSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): DatabasesConnection
    "Flows connected upstream from the field"
    upstreamFlows(
        "Filter by GraphQL field and given value"
        filter: Flow_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: FlowSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Flow!]!
    "Flows connected upstream from the field"
    upstreamFlowsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Flow_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: FlowSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): FlowsConnection
    "Tables connected upstream from the field"
    upstreamTables(
        "Filter by GraphQL field and given value"
        filter: DatabaseTable_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DatabaseTableSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [DatabaseTable!]!
    "Tables connected upstream from the field"
    upstreamTablesConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: DatabaseTable_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DatabaseTableSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): DatabaseTablesConnection
}

" wrapper for an input field contained in a published flow."
interface FlowInputField {
    "Fields that are children of this field"
    childFields(
        "Filter by GraphQL field and given value"
        filter: FlowOutputField_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: FlowOutputFieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [FlowOutputField!]!
    "Fields that are children of this field"
    childFieldsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: FlowOutputField_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: FlowOutputFieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): FlowOutputFieldsConnection
    "A flow to which these fields input"
    flow: Flow
    "Unique identifier used by the metadata API"
    id: ID!
    "Name shown in server and desktop clients"
    name: String
    "Databases that are upstream from this inputField."
    upstreamDatabases(
        "Filter by GraphQL field and given value"
        filter: Database_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DatabaseSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Database!]!
    "Databases that are upstream from this inputField."
    upstreamDatabasesConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Database_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DatabaseSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): DatabasesConnection
    "Flows that are upstream from this inputField."
    upstreamDatasources(
        "Filter by GraphQL field and given value"
        filter: PublishedDatasource_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: PublishedDatasourceSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [PublishedDatasource!]!
    "Flows that are upstream from this inputField."
    upstreamDatasourcesConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: PublishedDatasource_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: PublishedDatasourceSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): PublishedDatasourcesConnection
    "Flows that are upstream from this inputField."
    upstreamFlows(
        "Filter by GraphQL field and given value"
        filter: Flow_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: FlowSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Flow!]!
    "Flows that are upstream from this inputField."
    upstreamFlowsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Flow_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: FlowSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): FlowsConnection
    "Tables that are upstream of this field."
    upstreamTables(
        "Filter by GraphQL field and given value"
        filter: DatabaseTable_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DatabaseTableSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [DatabaseTable!]!
    "Tables that are upstream of this field."
    upstreamTablesConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: DatabaseTable_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DatabaseTableSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): DatabaseTablesConnection
}

" wrapper for an output field contained in a published flow."
interface FlowOutputField {
    "Dashboards that are downstream from this outputField"
    downstreamDashboards(
        "Filter by GraphQL field and given value"
        filter: Dashboard_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DashboardSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Dashboard!]!
    "Dashboards that are downstream from this outputField"
    downstreamDashboardsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Dashboard_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DashboardSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): DashboardsConnection
    "Databases that are downstream from this outputField"
    downstreamDatabases(
        "Filter by GraphQL field and given value"
        filter: Database_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DatabaseSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Database!]!
    "Databases that are downstream from this outputField"
    downstreamDatabasesConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Database_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DatabaseSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): DatabasesConnection
    "Datasources that are downstream from this outputField"
    downstreamDatasources(
        "Filter by GraphQL field and given value"
        filter: PublishedDatasource_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: PublishedDatasourceSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [PublishedDatasource!]!
    "Datasources that are downstream from this outputField"
    downstreamDatasourcesConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: PublishedDatasource_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: PublishedDatasourceSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): PublishedDatasourcesConnection
    "Flows that are downstream from this outputField"
    downstreamFlows(
        "Filter by GraphQL field and given value"
        filter: Flow_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: FlowSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Flow!]!
    "Flows that are downstream from this outputField"
    downstreamFlowsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Flow_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: FlowSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): FlowsConnection
    "Lenses that are downstream from this outputField"
    downstreamLenses(
        "Filter by GraphQL field and given value"
        filter: Lens_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: LensSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Lens!]!
    "Lenses that are downstream from this outputField"
    downstreamLensesConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Lens_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: LensSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): LensesConnection
    "Metrics that are downstream from this outputField"
    downstreamMetrics(
        "Filter by GraphQL field and given value"
        filter: Metric_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: MetricSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Metric!]!
    "Metrics that are downstream from this outputField"
    downstreamMetricsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Metric_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: MetricSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): MetricsConnection
    "Owners that are downstream from this outputField"
    downstreamOwners(
        "Filter by GraphQL field and given value"
        filter: TableauUser_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: TableauUserSortOrder
    ): [TableauUser!]!
    "Owners that are downstream from this outputField"
    downstreamOwnersConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: TableauUser_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: TableauUserSortOrder
    ): TableauUsersConnection
    "Sheets that are downstream from this outputField"
    downstreamSheets(
        "Filter by GraphQL field and given value"
        filter: Sheet_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: SheetSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Sheet!]!
    "Sheets that are downstream from this outputField"
    downstreamSheetsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Sheet_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: SheetSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): SheetsConnection
    "Tables that are downstream from this outputField"
    downstreamTables(
        "Filter by GraphQL field and given value"
        filter: DatabaseTable_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DatabaseTableSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [DatabaseTable!]!
    "Tables that are downstream from this outputField"
    downstreamTablesConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: DatabaseTable_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DatabaseTableSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): DatabaseTablesConnection
    "VirtualConnectionTables that are downstream of this outputField"
    downstreamVirtualConnectionTables(
        "Filter by GraphQL field and given value"
        filter: VirtualConnectionTable_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: VirtualConnectionTableSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [VirtualConnectionTable!]!
    "VirtualConnectionTables that are downstream of this outputField"
    downstreamVirtualConnectionTablesConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: VirtualConnectionTable_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: VirtualConnectionTableSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): VirtualConnectionTablesConnection
    "VirtualConnections that are downstream of this outputField"
    downstreamVirtualConnections(
        "Filter by GraphQL field and given value"
        filter: VirtualConnection_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: VirtualConnectionSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [VirtualConnection!]!
    "VirtualConnections that are downstream of this outputField"
    downstreamVirtualConnectionsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: VirtualConnection_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: VirtualConnectionSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): VirtualConnectionsConnection
    "Workbooks that are downstream from this outputField"
    downstreamWorkbooks(
        "Filter by GraphQL field and given value"
        filter: Workbook_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: WorkbookSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Workbook!]!
    "Workbooks that are downstream from this outputField"
    downstreamWorkbooksConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Workbook_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: WorkbookSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): WorkbooksConnection
    "The flow that outputs these fields"
    flow(
        "Filter by GraphQL field and given value"
        filter: Flow_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: FlowSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Flow]
    "The flow that outputs these fields"
    flowConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Flow_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: FlowSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): FlowsConnection
    "The flow output step that contains this field"
    flowOutputStep: FlowOutputStep
    "Unique identifier used by the metadata API"
    id: ID!
    "Name shown in server and desktop clients"
    name: String
    "Fields that are parents of this field"
    parentFields(
        "Filter by GraphQL field and given value"
        filter: FlowInputField_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: FlowInputFieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [FlowInputField!]!
    "Fields that are parents of this field"
    parentFieldsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: FlowInputField_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: FlowInputFieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): FlowInputFieldsConnection
    "Databases that are upstream from this outputField"
    upstreamDatabases(
        "Filter by GraphQL field and given value"
        filter: Database_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DatabaseSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Database!]!
    "Databases that are upstream from this outputField"
    upstreamDatabasesConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Database_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DatabaseSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): DatabasesConnection
    "Datasources that are upstream from this outputField"
    upstreamDatasources(
        "Filter by GraphQL field and given value"
        filter: PublishedDatasource_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: PublishedDatasourceSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [PublishedDatasource!]!
    "Datasources that are upstream from this outputField"
    upstreamDatasourcesConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: PublishedDatasource_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: PublishedDatasourceSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): PublishedDatasourcesConnection
    "Flows that are upstream from this outputField."
    upstreamFlows(
        "Filter by GraphQL field and given value"
        filter: Flow_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: FlowSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Flow!]!
    "Flows that are upstream from this outputField."
    upstreamFlowsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Flow_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: FlowSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): FlowsConnection
    "Tables that are upstream from this outputField"
    upstreamTables(
        "Filter by GraphQL field and given value"
        filter: DatabaseTable_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DatabaseTableSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [DatabaseTable!]!
    "Tables that are upstream from this outputField"
    upstreamTablesConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: DatabaseTable_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DatabaseTableSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): DatabaseTablesConnection
    "VirtualConnectionTables that are uptream of this outputField"
    upstreamVirtualConnectionTables(
        "Filter by GraphQL field and given value"
        filter: VirtualConnectionTable_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: VirtualConnectionTableSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [VirtualConnectionTable!]!
    "VirtualConnectionTables that are uptream of this outputField"
    upstreamVirtualConnectionTablesConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: VirtualConnectionTable_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: VirtualConnectionTableSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): VirtualConnectionTablesConnection
    "VirtualConnections that are upstream of this outputField"
    upstreamVirtualConnections(
        "Filter by GraphQL field and given value"
        filter: VirtualConnection_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: VirtualConnectionSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [VirtualConnection!]!
    "VirtualConnections that are upstream of this outputField"
    upstreamVirtualConnectionsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: VirtualConnection_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: VirtualConnectionSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): VirtualConnectionsConnection
}

"Inheritance target"
interface Node {
    "Unique identifier used by the metadata API. Not the same as the numeric ID used on server"
    id: ID!
}

" table containing columns"
interface Table {
    "Columns contained in this table"
    columns(
        "Filter by GraphQL field and given value"
        filter: Column_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: ColumnSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Column!]!
    "Columns contained in this table"
    columnsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Column_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: ColumnSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): ColumnsConnection
    "User modifiable description of this table"
    description: String
    "Dashboards connected to the table"
    downstreamDashboards(
        "Filter by GraphQL field and given value"
        filter: Dashboard_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DashboardSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Dashboard!]!
    "Dashboards connected to the table"
    downstreamDashboardsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Dashboard_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DashboardSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): DashboardsConnection
    "Databases downstream of this table"
    downstreamDatabases(
        "Filter by GraphQL field and given value"
        filter: Database_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DatabaseSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Database!]!
    "Databases downstream of this table"
    downstreamDatabasesConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Database_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DatabaseSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): DatabasesConnection
    "Published datasources connected to the table"
    downstreamDatasources(
        "Filter by GraphQL field and given value"
        filter: PublishedDatasource_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: PublishedDatasourceSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [PublishedDatasource!]!
    "Published datasources connected to the table"
    downstreamDatasourcesConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: PublishedDatasource_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: PublishedDatasourceSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): PublishedDatasourcesConnection
    "Flows downstream of this table"
    downstreamFlows(
        "Filter by GraphQL field and given value"
        filter: Flow_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: FlowSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Flow!]!
    "Flows downstream of this table"
    downstreamFlowsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Flow_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: FlowSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): FlowsConnection
    "Lenses connected downstream from the table"
    downstreamLenses(
        "Filter by GraphQL field and given value"
        filter: Lens_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: LensSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Lens!]!
    "Lenses connected downstream from the table"
    downstreamLensesConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Lens_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: LensSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): LensesConnection
    "Metrics connected to the table"
    downstreamMetrics(
        "Filter by GraphQL field and given value"
        filter: Metric_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: MetricSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Metric!]!
    "Metrics connected to the table"
    downstreamMetricsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Metric_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: MetricSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): MetricsConnection
    "Owners of workbooks and published datasources connected to the table"
    downstreamOwners(
        "Filter by GraphQL field and given value"
        filter: TableauUser_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: TableauUserSortOrder
    ): [TableauUser!]!
    "Owners of workbooks and published datasources connected to the table"
    downstreamOwnersConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: TableauUser_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: TableauUserSortOrder
    ): TableauUsersConnection
    "Sheets connected to the table"
    downstreamSheets(
        "Filter by GraphQL field and given value"
        filter: Sheet_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: SheetSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Sheet!]!
    "Sheets connected to the table"
    downstreamSheetsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Sheet_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: SheetSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): SheetsConnection
    "Tables downstream of this table"
    downstreamTables(
        "Filter by GraphQL field and given value"
        filter: DatabaseTable_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DatabaseTableSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [DatabaseTable!]!
    "Tables downstream of this table"
    downstreamTablesConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: DatabaseTable_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DatabaseTableSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): DatabaseTablesConnection
    "Virtual connection tables downstream of this table"
    downstreamVirtualConnectionTables(
        "Filter by GraphQL field and given value"
        filter: VirtualConnectionTable_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: VirtualConnectionTableSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [VirtualConnectionTable!]!
    "Virtual connection tables downstream of this table"
    downstreamVirtualConnectionTablesConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: VirtualConnectionTable_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: VirtualConnectionTableSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): VirtualConnectionTablesConnection
    "Virtual connection downstream of this table"
    downstreamVirtualConnections(
        "Filter by GraphQL field and given value"
        filter: VirtualConnection_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: VirtualConnectionSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [VirtualConnection!]!
    "Virtual connection downstream of this table"
    downstreamVirtualConnectionsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: VirtualConnection_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: VirtualConnectionSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): VirtualConnectionsConnection
    "Workbooks connected to the table"
    downstreamWorkbooks(
        "Filter by GraphQL field and given value"
        filter: Workbook_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: WorkbookSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Workbook!]!
    "Workbooks connected to the table"
    downstreamWorkbooksConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Workbook_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: WorkbookSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): WorkbooksConnection
    "Unique identifier used by the metadata API.  Not the same as the numeric ID used on server"
    id: ID!
    "True if this table is embedded in Tableau content, e.g., a packaged workbook"
    isEmbedded: Boolean
    "Name shown in server and desktop clients"
    name: String
    "Databases upstream of this table"
    upstreamDatabases(
        "Filter by GraphQL field and given value"
        filter: Database_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DatabaseSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Database!]!
    "Databases upstream of this table"
    upstreamDatabasesConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Database_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DatabaseSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): DatabasesConnection
    "Datasources upstream of this table"
    upstreamDatasources(
        "Filter by GraphQL field and given value"
        filter: PublishedDatasource_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: PublishedDatasourceSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [PublishedDatasource!]!
    "Datasources upstream of this table"
    upstreamDatasourcesConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: PublishedDatasource_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: PublishedDatasourceSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): PublishedDatasourcesConnection
    "Flows upstream of this table"
    upstreamFlows(
        "Filter by GraphQL field and given value"
        filter: Flow_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: FlowSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Flow!]!
    "Flows upstream of this table"
    upstreamFlowsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Flow_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: FlowSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): FlowsConnection
    "Tables upstream of this table"
    upstreamTables(
        "Filter by GraphQL field and given value"
        filter: DatabaseTable_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DatabaseTableSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [DatabaseTable!]!
    "Tables upstream of this table"
    upstreamTablesConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: DatabaseTable_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DatabaseTableSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): DatabaseTablesConnection
    "Virtual connection tables upstream of this table"
    upstreamVirtualConnectionTables(
        "Filter by GraphQL field and given value"
        filter: VirtualConnectionTable_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: VirtualConnectionTableSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [VirtualConnectionTable!]!
    "Virtual connection tables upstream of this table"
    upstreamVirtualConnectionTablesConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: VirtualConnectionTable_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: VirtualConnectionTableSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): VirtualConnectionTablesConnection
    "Virtual connections upstream of this table"
    upstreamVirtualConnections(
        "Filter by GraphQL field and given value"
        filter: VirtualConnection_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: VirtualConnectionSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [VirtualConnection!]!
    "Virtual connections upstream of this table"
    upstreamVirtualConnectionsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: VirtualConnection_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: VirtualConnectionSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): VirtualConnectionsConnection
}

" content item that has a list of tags"
interface Taggable {
    "Unique identifier used by the metadata API. Not the same as the numeric ID used on server"
    id: ID!
    "Locally unique identifier used for the REST API on the Tableau Server"
    luid: String!
    "The name of the asset"
    name: String
    "Tags associated with the content item"
    tags(
        "Filter by GraphQL field and given value"
        filter: Tag_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: TagSortOrder
    ): [Tag!]!
    "Tags associated with the content item"
    tagsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Tag_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: TagSortOrder
    ): TagsConnection
}

" view contained in a published workbook. Views can be sheets or dashboards."
interface View {
    "Time the view was created"
    createdAt: DateTime!
    "Unique ID for the view generated for and stored within the workbook, survives renames, and is used for internal processes"
    documentViewId: String
    "Unique identifier used by the metadata API.  Not the same as the numeric ID used on server"
    id: ID!
    "Index of view; the order it appears in the workbook"
    index: Int
    "Locally unique identifier used for the REST API on the Tableau Server (Blank if sheet is hidden in Workbook)"
    luid: String!
    "Name shown in server and desktop clients"
    name: String
    "Server path to view"
    path: String
    "The Metrics that reference this View"
    referencedByMetrics(
        "Filter by GraphQL field and given value"
        filter: Metric_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: MetricSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Metric]
    "The Metrics that reference this View"
    referencedByMetricsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Metric_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: MetricSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): MetricsConnection
    "Tags associated with the view"
    tags(
        "Filter by GraphQL field and given value"
        filter: Tag_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: TagSortOrder
    ): [Tag!]!
    "Tags associated with the view"
    tagsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Tag_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: TagSortOrder
    ): TagsConnection
    "Time the view was updated"
    updatedAt: DateTime!
    "Data quality warnings upstream from this view"
    upstreamDataQualityWarnings(
        "Filter by GraphQL field and given value"
        filter: DataQualityWarning_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DataQualityWarningSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [DataQualityWarning!]!
    "Data quality warnings upstream from this view"
    upstreamDataQualityWarningsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: DataQualityWarning_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DataQualityWarningSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): DataQualityWarningsConnection
    "The workbook that contains this view"
    workbook: Workbook
}

" content item that has an optional data quality warning"
interface Warnable {
    "The optional data quality warning on a content item"
    dataQualityWarning: DataQualityWarning @deprecated(reason: "Use 'dataQualityWarnings'")
    "The data quality warnings on a content item"
    dataQualityWarnings(
        "Filter by GraphQL field and given value"
        filter: DataQualityWarning_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DataQualityWarningSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [DataQualityWarning!]!
    "The data quality warnings on a content item"
    dataQualityWarningsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: DataQualityWarning_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DataQualityWarningSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): DataQualityWarningsConnection
    "True if the content has an active data quality warning"
    hasActiveWarning: Boolean!
    "Unique identifier used by the metadata API. Not the same as the numeric ID used on server"
    id: ID!
    "Locally unique identifier used for the REST API on the Tableau Server"
    luid: String!
    "The name of the asset"
    name: String
}

"Connection Type for AnalyticsField"
type AnalyticsFieldsConnection {
    "List of nodes"
    nodes: [AnalyticsField!]!
    "Information for pagination"
    pageInfo: PageInfo!
    "Total number of objects in connection"
    totalCount: Int!
}

"AskDataExtensions to base Tableau functionality."
type AskDataExtension {
    "The dashboard that contains this askData extension"
    dashboard: Dashboard
    "Unique identifier used by the metadata API"
    id: ID!
    "Lens configured for the askData extension"
    lens: Lens
}

"Connection Type for AskDataExtension"
type AskDataExtensionsConnection {
    "List of nodes"
    nodes: [AskDataExtension!]!
    "Information for pagination"
    pageInfo: PageInfo!
    "Total number of objects in connection"
    totalCount: Int!
}

"GraphQL type for a binned continuous measure field. See https://onlinehelp.tableau.com/current/pro/desktop/en-us/calculations_bins.html"
type BinField implements DataField & Field & FieldReferencingField & Node {
    "Size of the bin"
    binSize: String
    "Data category of the field"
    dataCategory: FieldRoleCategory
    "Type of the data in the field. See https://onlinehelp.tableau.com/current/pro/desktop/en-us/datafields_typesandroles_datatypes.html"
    dataType: FieldDataType
    "Data source that contains this field"
    datasource: Datasource
    "List of lens fields which are derived from this field"
    derivedLensFields(
        "Filter by GraphQL field and given value"
        filter: LensField_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: LensFieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [LensField]
    "List of lens fields which are derived from this field"
    derivedLensFieldsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: LensField_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: LensFieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): LensFieldsConnection
    "Description of field shown in server and desktop clients"
    description: String
    "description that is shown in the Tableau UI"
    descriptionInherited(
        "Method for selecting inherited value"
        inheritanceType: InheritanceType,
        "Option to select how to apply permissions. By default it is OBFUSCATE_RESULTS"
        permissionMode: PermissionMode
    ): [InheritedStringResult]
    "Sheets that reference this field"
    directSheets(
        "Filter by GraphQL field and given value"
        filter: Sheet_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: SheetSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Sheet]
    "Sheets that reference this field"
    directSheetsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Sheet_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: SheetSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): SheetsConnection
    "Columns downstream of this field"
    downstreamColumns(
        "Filter by GraphQL field and given value"
        filter: Column_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: ColumnSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Column!]!
    "Columns downstream of this field"
    downstreamColumnsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Column_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: ColumnSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): ColumnsConnection
    "Dashboards connected downstream from the field"
    downstreamDashboards(
        "Filter by GraphQL field and given value"
        filter: Dashboard_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DashboardSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Dashboard!]!
    "Dashboards connected downstream from the field"
    downstreamDashboardsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Dashboard_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DashboardSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): DashboardsConnection
    "Databases downstream of this field"
    downstreamDatabases(
        "Filter by GraphQL field and given value"
        filter: Database_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DatabaseSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Database!]!
    "Databases downstream of this field"
    downstreamDatabasesConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Database_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DatabaseSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): DatabasesConnection
    "Datasources connected downstream from this field"
    downstreamDatasources(
        "Filter by GraphQL field and given value"
        filter: PublishedDatasource_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: PublishedDatasourceSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [PublishedDatasource!]
    "Datasources connected downstream from this field"
    downstreamDatasourcesConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: PublishedDatasource_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: PublishedDatasourceSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): PublishedDatasourcesConnection
    "downstream fields that reference this field"
    downstreamFields(
        "Filter by GraphQL field and given value"
        filter: Field_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: FieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Field!]!
    "downstream fields that reference this field"
    downstreamFieldsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Field_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: FieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): FieldsConnection
    "Flows downstream of this field"
    downstreamFlows(
        "Filter by GraphQL field and given value"
        filter: Flow_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: FlowSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Flow!]!
    "Flows downstream of this field"
    downstreamFlowsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Flow_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: FlowSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): FlowsConnection
    "Lenses connected downstream from this field"
    downstreamLenses(
        "Filter by GraphQL field and given value"
        filter: Lens_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: LensSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Lens!]
    "Lenses connected downstream from this field"
    downstreamLensesConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Lens_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: LensSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): LensesConnection
    "Metrics connected downstream from the field"
    downstreamMetrics(
        "Filter by GraphQL field and given value"
        filter: Metric_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: MetricSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Metric!]
    "Metrics connected downstream from the field"
    downstreamMetricsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Metric_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: MetricSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): MetricsConnection
    "Workbook owners (authors) connected downstream from the field"
    downstreamOwners(
        "Filter by GraphQL field and given value"
        filter: TableauUser_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: TableauUserSortOrder
    ): [TableauUser!]
    "Workbook owners (authors) connected downstream from the field"
    downstreamOwnersConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: TableauUser_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: TableauUserSortOrder
    ): TableauUsersConnection
    "Sheets connected downstream from the field"
    downstreamSheets(
        "Filter by GraphQL field and given value"
        filter: Sheet_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: SheetSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Sheet!]!
    "Sheets connected downstream from the field"
    downstreamSheetsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Sheet_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: SheetSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): SheetsConnection
    "Tables downstream of this field"
    downstreamTables(
        "Filter by GraphQL field and given value"
        filter: DatabaseTable_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DatabaseTableSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [DatabaseTable!]!
    "Tables downstream of this field"
    downstreamTablesConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: DatabaseTable_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DatabaseTableSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): DatabaseTablesConnection
    "Virtual connection tables downstream of this field"
    downstreamVirtualConnectionTables(
        "Filter by GraphQL field and given value"
        filter: VirtualConnectionTable_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: VirtualConnectionTableSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [VirtualConnectionTable!]!
    "Virtual connection tables downstream of this field"
    downstreamVirtualConnectionTablesConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: VirtualConnectionTable_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: VirtualConnectionTableSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): VirtualConnectionTablesConnection
    "Virtual connections downstream of this field"
    downstreamVirtualConnections(
        "Filter by GraphQL field and given value"
        filter: VirtualConnection_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: VirtualConnectionSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [VirtualConnection!]!
    "Virtual connections downstream of this field"
    downstreamVirtualConnectionsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: VirtualConnection_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: VirtualConnectionSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): VirtualConnectionsConnection
    "Workbooks connected downstream from the field"
    downstreamWorkbooks(
        "Filter by GraphQL field and given value"
        filter: Workbook_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: WorkbookSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Workbook!]
    "Workbooks connected downstream from the field"
    downstreamWorkbooksConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Workbook_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: WorkbookSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): WorkbooksConnection
    "List of fields, if any, that this field references"
    fields(
        "Filter by GraphQL field and given value"
        filter: Field_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: FieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Field!]!
    "List of fields, if any, that this field references"
    fieldsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Field_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: FieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): FieldsConnection
    "Name of folder if the field is in a folder. See https://onlinehelp.tableau.com/current/pro/desktop/en-us/datafields_dwfeatures.html#Organize"
    folderName: String
    "Formula of the calculated field"
    formula: String
    "Name internally used to uniquely identify fields"
    fullyQualifiedName: String
    "Unique identifier used by the metadata API.  Not the same as the numeric ID used on server"
    id: ID!
    "True if the field is hidden"
    isHidden: Boolean
    "Name shown in server and desktop clients"
    name: String
    "List of parameters, if any, used in this field"
    parameters(
        "Filter by GraphQL field and given value"
        filter: Parameter_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: ParameterSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Parameter!]!
    "List of parameters, if any, used in this field"
    parametersConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Parameter_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: ParameterSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): ParametersConnection
    "The bin field that references this field"
    referencedByBins(
        "Filter by GraphQL field and given value"
        filter: BinField_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: BinFieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [BinField]
    "The bin field that references this field"
    referencedByBinsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: BinField_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: BinFieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): BinFieldsConnection
    "The calculated field that references this field"
    referencedByCalculations(
        "Filter by GraphQL field and given value"
        filter: CalculatedField_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: CalculatedFieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [CalculatedField]
    "The calculated field that references this field"
    referencedByCalculationsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: CalculatedField_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: CalculatedFieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): CalculatedFieldsConnection
    "The combined field that references this field"
    referencedByCombinedFields(
        "Filter by GraphQL field and given value"
        filter: CombinedField_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: CombinedFieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [CombinedField]
    "The combined field that references this field"
    referencedByCombinedFieldsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: CombinedField_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: CombinedFieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): CombinedFieldsConnection
    "Thie combined set field that references this field"
    referencedByCombinedSets(
        "Filter by GraphQL field and given value"
        filter: CombinedSetField_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: CombinedSetFieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [CombinedSetField]
    "Thie combined set field that references this field"
    referencedByCombinedSetsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: CombinedSetField_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: CombinedSetFieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): CombinedSetFieldsConnection
    "The field that references this field"
    referencedByFields(
        "Filter by GraphQL field and given value"
        filter: FieldReferencingField_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: FieldReferencingFieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [FieldReferencingField]
    "The field that references this field"
    referencedByFieldsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: FieldReferencingField_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: FieldReferencingFieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): FieldReferencingFieldsConnection
    "The data source filters that include this field"
    referencedByFilters(
        "Filter by GraphQL field and given value"
        filter: DatasourceFilter_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DatasourceFilterSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [DatasourceFilter]
    "The data source filters that include this field"
    referencedByFiltersConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: DatasourceFilter_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DatasourceFilterSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): DatasourceFiltersConnection
    "A flow input field that wraps this field"
    referencedByFlowFieldInputField(
        "Filter by GraphQL field and given value"
        filter: FlowFieldInputField_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: FlowFieldInputFieldSortOrder
    ): [FlowFieldInputField]
    "A flow input field that wraps this field"
    referencedByFlowFieldInputFieldConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: FlowFieldInputField_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: FlowFieldInputFieldSortOrder
    ): FlowFieldInputFieldsConnection
    "A flow output field that wraps this field"
    referencedByFlowFieldOutputField(
        "Filter by GraphQL field and given value"
        filter: FlowFieldOutputField_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: FlowFieldOutputFieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [FlowFieldOutputField]
    "A flow output field that wraps this field"
    referencedByFlowFieldOutputFieldConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: FlowFieldOutputField_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: FlowFieldOutputFieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): FlowFieldOutputFieldsConnection
    "The group field that references this field"
    referencedByGroups(
        "Filter by GraphQL field and given value"
        filter: GroupField_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: GroupFieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [GroupField]
    "The group field that references this field"
    referencedByGroupsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: GroupField_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: GroupFieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): GroupFieldsConnection
    "The hierarchy field that references this field"
    referencedByHierarchies(
        "Filter by GraphQL field and given value"
        filter: HierarchyField_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: HierarchyFieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [HierarchyField]
    "The hierarchy field that references this field"
    referencedByHierarchiesConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: HierarchyField_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: HierarchyFieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): HierarchyFieldsConnection
    "The field that references this remote field"
    referencedByRemoteFields(
        "Filter by GraphQL field and given value"
        filter: DatasourceField_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DatasourceFieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [DatasourceField]
    "The field that references this remote field"
    referencedByRemoteFieldsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: DatasourceField_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DatasourceFieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): DatasourceFieldsConnection
    "The set field that this field references"
    referencedBySets(
        "Filter by GraphQL field and given value"
        filter: SetField_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: SetFieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [SetField]
    "The set field that this field references"
    referencedBySetsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: SetField_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: SetFieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): SetFieldsConnection
    "Role of the field: 'dimension', 'measure' or 'unknown'"
    role: FieldRole
    "Sheets that reference this data source field"
    sheets(
        "Filter by GraphQL field and given value"
        filter: Sheet_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: SheetSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Sheet]
    "Sheets that reference this data source field"
    sheetsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Sheet_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: SheetSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): SheetsConnection
    "All upstream columns this field references"
    upstreamColumns(
        "Filter by GraphQL field and given value"
        filter: Column_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: ColumnSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Column]!
    "All upstream columns this field references"
    upstreamColumnsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Column_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: ColumnSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): ColumnsConnection
    "Databases connected upstream from the field"
    upstreamDatabases(
        "Filter by GraphQL field and given value"
        filter: Database_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DatabaseSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Database!]!
    "Databases connected upstream from the field"
    upstreamDatabasesConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Database_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DatabaseSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): DatabasesConnection
    "Datasources connected upstream from the field"
    upstreamDatasources(
        "Filter by GraphQL field and given value"
        filter: PublishedDatasource_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: PublishedDatasourceSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [PublishedDatasource!]!
    "Datasources connected upstream from the field"
    upstreamDatasourcesConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: PublishedDatasource_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: PublishedDatasourceSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): PublishedDatasourcesConnection
    "fields that are upstream of this field"
    upstreamFields(
        "Filter by GraphQL field and given value"
        filter: Field_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: FieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Field]!
    "fields that are upstream of this field"
    upstreamFieldsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Field_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: FieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): FieldsConnection
    "Flows connected upstream from the field"
    upstreamFlows(
        "Filter by GraphQL field and given value"
        filter: Flow_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: FlowSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Flow!]!
    "Flows connected upstream from the field"
    upstreamFlowsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Flow_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: FlowSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): FlowsConnection
    "Tables connected upstream from the field"
    upstreamTables(
        "Filter by GraphQL field and given value"
        filter: DatabaseTable_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DatabaseTableSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [DatabaseTable!]!
    "Tables connected upstream from the field"
    upstreamTablesConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: DatabaseTable_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DatabaseTableSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): DatabaseTablesConnection
    "Virtual connection tables upstream of this field"
    upstreamVirtualConnectionTables(
        "Filter by GraphQL field and given value"
        filter: VirtualConnectionTable_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: VirtualConnectionTableSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [VirtualConnectionTable!]!
    "Virtual connection tables upstream of this field"
    upstreamVirtualConnectionTablesConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: VirtualConnectionTable_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: VirtualConnectionTableSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): VirtualConnectionTablesConnection
    "Virtual connections upstream of this field"
    upstreamVirtualConnections(
        "Filter by GraphQL field and given value"
        filter: VirtualConnection_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: VirtualConnectionSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [VirtualConnection!]!
    "Virtual connections upstream of this field"
    upstreamVirtualConnectionsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: VirtualConnection_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: VirtualConnectionSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): VirtualConnectionsConnection
}

"Connection Type for BinField"
type BinFieldsConnection {
    "List of nodes"
    nodes: [BinField!]!
    "Information for pagination"
    pageInfo: PageInfo!
    "Total number of objects in connection"
    totalCount: Int!
}

"GraphQL type for a calculated field. See https://onlinehelp.tableau.com/current/pro/desktop/en-us/calculations_calculatedfields.html"
type CalculatedField implements AnalyticsField & DataField & Field & FieldReferencingField & Node {
    "Default aggregation of the field, i.e. 'Sum', 'Average'. See https://onlinehelp.tableau.com/current/pro/desktop/en-us/calculations_aggregation.html#AggFuncs"
    aggregation: String
    "For the percentile aggregation, the percentile number"
    aggregationParam: String
    "Data category of the field"
    dataCategory: FieldRoleCategory
    "Type of the data in the field. See https://onlinehelp.tableau.com/current/pro/desktop/en-us/datafields_typesandroles_datatypes.html"
    dataType: FieldDataType
    "Data source that contains this field"
    datasource: Datasource
    "Default format for number or date"
    defaultFormat: String
    "List of lens fields which are derived from this field"
    derivedLensFields(
        "Filter by GraphQL field and given value"
        filter: LensField_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: LensFieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [LensField]
    "List of lens fields which are derived from this field"
    derivedLensFieldsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: LensField_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: LensFieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): LensFieldsConnection
    "Description of field shown in server and desktop clients"
    description: String
    "description that is shown in the Tableau UI"
    descriptionInherited(
        "Method for selecting inherited value"
        inheritanceType: InheritanceType,
        "Option to select how to apply permissions. By default it is OBFUSCATE_RESULTS"
        permissionMode: PermissionMode
    ): [InheritedStringResult]
    "Sheets that reference this field"
    directSheets(
        "Filter by GraphQL field and given value"
        filter: Sheet_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: SheetSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Sheet]
    "Sheets that reference this field"
    directSheetsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Sheet_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: SheetSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): SheetsConnection
    "Columns downstream of this field"
    downstreamColumns(
        "Filter by GraphQL field and given value"
        filter: Column_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: ColumnSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Column!]!
    "Columns downstream of this field"
    downstreamColumnsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Column_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: ColumnSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): ColumnsConnection
    "Dashboards connected downstream from the field"
    downstreamDashboards(
        "Filter by GraphQL field and given value"
        filter: Dashboard_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DashboardSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Dashboard!]!
    "Dashboards connected downstream from the field"
    downstreamDashboardsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Dashboard_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DashboardSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): DashboardsConnection
    "Databases downstream of this field"
    downstreamDatabases(
        "Filter by GraphQL field and given value"
        filter: Database_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DatabaseSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Database!]!
    "Databases downstream of this field"
    downstreamDatabasesConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Database_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DatabaseSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): DatabasesConnection
    "Datasources connected downstream from this field"
    downstreamDatasources(
        "Filter by GraphQL field and given value"
        filter: PublishedDatasource_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: PublishedDatasourceSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [PublishedDatasource!]
    "Datasources connected downstream from this field"
    downstreamDatasourcesConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: PublishedDatasource_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: PublishedDatasourceSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): PublishedDatasourcesConnection
    "downstream fields that reference this field"
    downstreamFields(
        "Filter by GraphQL field and given value"
        filter: Field_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: FieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Field!]!
    "downstream fields that reference this field"
    downstreamFieldsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Field_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: FieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): FieldsConnection
    "Flows downstream of this field"
    downstreamFlows(
        "Filter by GraphQL field and given value"
        filter: Flow_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: FlowSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Flow!]!
    "Flows downstream of this field"
    downstreamFlowsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Flow_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: FlowSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): FlowsConnection
    "Lenses connected downstream from this field"
    downstreamLenses(
        "Filter by GraphQL field and given value"
        filter: Lens_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: LensSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Lens!]
    "Lenses connected downstream from this field"
    downstreamLensesConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Lens_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: LensSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): LensesConnection
    "Metrics connected downstream from the field"
    downstreamMetrics(
        "Filter by GraphQL field and given value"
        filter: Metric_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: MetricSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Metric!]
    "Metrics connected downstream from the field"
    downstreamMetricsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Metric_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: MetricSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): MetricsConnection
    "Workbook owners (authors) connected downstream from the field"
    downstreamOwners(
        "Filter by GraphQL field and given value"
        filter: TableauUser_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: TableauUserSortOrder
    ): [TableauUser!]
    "Workbook owners (authors) connected downstream from the field"
    downstreamOwnersConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: TableauUser_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: TableauUserSortOrder
    ): TableauUsersConnection
    "Sheets connected downstream from the field"
    downstreamSheets(
        "Filter by GraphQL field and given value"
        filter: Sheet_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: SheetSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Sheet!]!
    "Sheets connected downstream from the field"
    downstreamSheetsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Sheet_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: SheetSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): SheetsConnection
    "Tables downstream of this field"
    downstreamTables(
        "Filter by GraphQL field and given value"
        filter: DatabaseTable_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DatabaseTableSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [DatabaseTable!]!
    "Tables downstream of this field"
    downstreamTablesConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: DatabaseTable_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DatabaseTableSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): DatabaseTablesConnection
    "Virtual connection tables downstream of this field"
    downstreamVirtualConnectionTables(
        "Filter by GraphQL field and given value"
        filter: VirtualConnectionTable_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: VirtualConnectionTableSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [VirtualConnectionTable!]!
    "Virtual connection tables downstream of this field"
    downstreamVirtualConnectionTablesConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: VirtualConnectionTable_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: VirtualConnectionTableSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): VirtualConnectionTablesConnection
    "Virtual connections downstream of this field"
    downstreamVirtualConnections(
        "Filter by GraphQL field and given value"
        filter: VirtualConnection_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: VirtualConnectionSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [VirtualConnection!]!
    "Virtual connections downstream of this field"
    downstreamVirtualConnectionsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: VirtualConnection_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: VirtualConnectionSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): VirtualConnectionsConnection
    "Workbooks connected downstream from the field"
    downstreamWorkbooks(
        "Filter by GraphQL field and given value"
        filter: Workbook_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: WorkbookSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Workbook!]
    "Workbooks connected downstream from the field"
    downstreamWorkbooksConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Workbook_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: WorkbookSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): WorkbooksConnection
    "List of fields, if any, that this field references"
    fields(
        "Filter by GraphQL field and given value"
        filter: Field_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: FieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Field!]!
    "List of fields, if any, that this field references"
    fieldsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Field_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: FieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): FieldsConnection
    "Name of folder if the field is in a folder. See https://onlinehelp.tableau.com/current/pro/desktop/en-us/datafields_dwfeatures.html#Organize"
    folderName: String
    "Formula of the calculated field"
    formula: String
    "Name internally used to uniquely identify fields"
    fullyQualifiedName: String
    "True if field formula that involves a user function (for example, USERNAME or ISMEMBEROF)"
    hasUserReference: Boolean
    "Unique identifier used by the metadata API.  Not the same as the numeric ID used on server"
    id: ID!
    "True if Tableau automatically created this field. A list of autogenerated fields are here: https://onlinehelp.tableau.com/current/pro/desktop/en-us/datafields_understanddatawindow.html#AutoFields"
    isAutoGenerated: Boolean
    "True if the field is hidden"
    isHidden: Boolean
    "Name shown in server and desktop clients"
    name: String
    "List of parameters, if any, used in this field"
    parameters(
        "Filter by GraphQL field and given value"
        filter: Parameter_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: ParameterSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Parameter!]!
    "List of parameters, if any, used in this field"
    parametersConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Parameter_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: ParameterSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): ParametersConnection
    "The bin field that references this field"
    referencedByBins(
        "Filter by GraphQL field and given value"
        filter: BinField_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: BinFieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [BinField]
    "The bin field that references this field"
    referencedByBinsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: BinField_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: BinFieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): BinFieldsConnection
    "The calculated field that references this field"
    referencedByCalculations(
        "Filter by GraphQL field and given value"
        filter: CalculatedField_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: CalculatedFieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [CalculatedField]
    "The calculated field that references this field"
    referencedByCalculationsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: CalculatedField_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: CalculatedFieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): CalculatedFieldsConnection
    "The combined field that references this field"
    referencedByCombinedFields(
        "Filter by GraphQL field and given value"
        filter: CombinedField_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: CombinedFieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [CombinedField]
    "The combined field that references this field"
    referencedByCombinedFieldsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: CombinedField_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: CombinedFieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): CombinedFieldsConnection
    "Thie combined set field that references this field"
    referencedByCombinedSets(
        "Filter by GraphQL field and given value"
        filter: CombinedSetField_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: CombinedSetFieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [CombinedSetField]
    "Thie combined set field that references this field"
    referencedByCombinedSetsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: CombinedSetField_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: CombinedSetFieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): CombinedSetFieldsConnection
    "The field that references this field"
    referencedByFields(
        "Filter by GraphQL field and given value"
        filter: FieldReferencingField_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: FieldReferencingFieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [FieldReferencingField]
    "The field that references this field"
    referencedByFieldsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: FieldReferencingField_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: FieldReferencingFieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): FieldReferencingFieldsConnection
    "The data source filters that include this field"
    referencedByFilters(
        "Filter by GraphQL field and given value"
        filter: DatasourceFilter_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DatasourceFilterSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [DatasourceFilter]
    "The data source filters that include this field"
    referencedByFiltersConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: DatasourceFilter_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DatasourceFilterSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): DatasourceFiltersConnection
    "A flow input field that wraps this field"
    referencedByFlowFieldInputField(
        "Filter by GraphQL field and given value"
        filter: FlowFieldInputField_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: FlowFieldInputFieldSortOrder
    ): [FlowFieldInputField]
    "A flow input field that wraps this field"
    referencedByFlowFieldInputFieldConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: FlowFieldInputField_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: FlowFieldInputFieldSortOrder
    ): FlowFieldInputFieldsConnection
    "A flow output field that wraps this field"
    referencedByFlowFieldOutputField(
        "Filter by GraphQL field and given value"
        filter: FlowFieldOutputField_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: FlowFieldOutputFieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [FlowFieldOutputField]
    "A flow output field that wraps this field"
    referencedByFlowFieldOutputFieldConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: FlowFieldOutputField_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: FlowFieldOutputFieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): FlowFieldOutputFieldsConnection
    "The group field that references this field"
    referencedByGroups(
        "Filter by GraphQL field and given value"
        filter: GroupField_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: GroupFieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [GroupField]
    "The group field that references this field"
    referencedByGroupsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: GroupField_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: GroupFieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): GroupFieldsConnection
    "The hierarchy field that references this field"
    referencedByHierarchies(
        "Filter by GraphQL field and given value"
        filter: HierarchyField_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: HierarchyFieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [HierarchyField]
    "The hierarchy field that references this field"
    referencedByHierarchiesConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: HierarchyField_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: HierarchyFieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): HierarchyFieldsConnection
    "The field that references this remote field"
    referencedByRemoteFields(
        "Filter by GraphQL field and given value"
        filter: DatasourceField_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DatasourceFieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [DatasourceField]
    "The field that references this remote field"
    referencedByRemoteFieldsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: DatasourceField_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DatasourceFieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): DatasourceFieldsConnection
    "The set field that this field references"
    referencedBySets(
        "Filter by GraphQL field and given value"
        filter: SetField_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: SetFieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [SetField]
    "The set field that this field references"
    referencedBySetsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: SetField_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: SetFieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): SetFieldsConnection
    "Role of the field: 'dimension', 'measure' or 'unknown'"
    role: FieldRole
    "For geographic data, the geographic role of the field. See https://onlinehelp.tableau.com/current/pro/desktop/en-us/maps_geographicroles.html"
    semanticRole: String
    "Sheet that contains this calculated field"
    sheet: Sheet
    "Sheets that reference this data source field"
    sheets(
        "Filter by GraphQL field and given value"
        filter: Sheet_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: SheetSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Sheet]
    "Sheets that reference this data source field"
    sheetsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Sheet_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: SheetSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): SheetsConnection
    "All upstream columns this field references"
    upstreamColumns(
        "Filter by GraphQL field and given value"
        filter: Column_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: ColumnSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Column]!
    "All upstream columns this field references"
    upstreamColumnsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Column_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: ColumnSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): ColumnsConnection
    "Databases connected upstream from the field"
    upstreamDatabases(
        "Filter by GraphQL field and given value"
        filter: Database_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DatabaseSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Database!]!
    "Databases connected upstream from the field"
    upstreamDatabasesConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Database_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DatabaseSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): DatabasesConnection
    "Datasources connected upstream from the field"
    upstreamDatasources(
        "Filter by GraphQL field and given value"
        filter: PublishedDatasource_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: PublishedDatasourceSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [PublishedDatasource!]!
    "Datasources connected upstream from the field"
    upstreamDatasourcesConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: PublishedDatasource_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: PublishedDatasourceSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): PublishedDatasourcesConnection
    "fields that are upstream of this field"
    upstreamFields(
        "Filter by GraphQL field and given value"
        filter: Field_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: FieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Field]!
    "fields that are upstream of this field"
    upstreamFieldsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Field_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: FieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): FieldsConnection
    "Flows connected upstream from the field"
    upstreamFlows(
        "Filter by GraphQL field and given value"
        filter: Flow_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: FlowSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Flow!]!
    "Flows connected upstream from the field"
    upstreamFlowsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Flow_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: FlowSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): FlowsConnection
    "Tables connected upstream from the field"
    upstreamTables(
        "Filter by GraphQL field and given value"
        filter: DatabaseTable_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DatabaseTableSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [DatabaseTable!]!
    "Tables connected upstream from the field"
    upstreamTablesConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: DatabaseTable_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DatabaseTableSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): DatabaseTablesConnection
    "Virtual connection tables upstream of this field"
    upstreamVirtualConnectionTables(
        "Filter by GraphQL field and given value"
        filter: VirtualConnectionTable_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: VirtualConnectionTableSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [VirtualConnectionTable!]!
    "Virtual connection tables upstream of this field"
    upstreamVirtualConnectionTablesConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: VirtualConnectionTable_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: VirtualConnectionTableSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): VirtualConnectionTablesConnection
    "Virtual connections upstream of this field"
    upstreamVirtualConnections(
        "Filter by GraphQL field and given value"
        filter: VirtualConnection_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: VirtualConnectionSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [VirtualConnection!]!
    "Virtual connections upstream of this field"
    upstreamVirtualConnectionsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: VirtualConnection_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: VirtualConnectionSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): VirtualConnectionsConnection
}

"Connection Type for CalculatedField"
type CalculatedFieldsConnection {
    "List of nodes"
    nodes: [CalculatedField!]!
    "Information for pagination"
    pageInfo: PageInfo!
    "Total number of objects in connection"
    totalCount: Int!
}

"Connection Type for Certifiable"
type CertifiablesConnection {
    "List of nodes"
    nodes: [Certifiable!]!
    "Information for pagination"
    pageInfo: PageInfo!
    "Total number of objects in connection"
    totalCount: Int!
}

" cloud file connection"
type CloudFile implements Certifiable & Database & Taggable & Warnable {
    "Notes related to this database being marked as certified"
    certificationNote: String @deprecated(reason: "No longer supported. Use 'dataQualityCertifications'")
    "User who marked this database as certified"
    certifier: TableauUser @deprecated(reason: "No longer supported. Use 'dataQualityCertifications'")
    "Connection type shortname"
    connectionType: String
    "Contact for this database"
    contact: TableauUser
    "The data quality certifications on a database"
    dataQualityCertifications(
        "Filter by GraphQL field and given value"
        filter: DataQualityCertification_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DataQualityCertificationSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [DataQualityCertification!]!
    "The data quality certifications on a database"
    dataQualityCertificationsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: DataQualityCertification_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DataQualityCertificationSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): DataQualityCertificationsConnection
    "The optional data quality warning on a database"
    dataQualityWarning: DataQualityWarning @deprecated(reason: "Use 'dataQualityWarnings'")
    "The data quality warnings on a database"
    dataQualityWarnings(
        "Filter by GraphQL field and given value"
        filter: DataQualityWarning_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DataQualityWarningSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [DataQualityWarning!]!
    "The data quality warnings on a database"
    dataQualityWarningsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: DataQualityWarning_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DataQualityWarningSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): DataQualityWarningsConnection
    "User modifiable description of this database"
    description: String
    "Dashboards connected to the database"
    downstreamDashboards(
        "Filter by GraphQL field and given value"
        filter: Dashboard_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DashboardSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Dashboard!]!
    "Dashboards connected to the database"
    downstreamDashboardsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Dashboard_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DashboardSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): DashboardsConnection
    "Databases downstream of this database"
    downstreamDatabases(
        "Filter by GraphQL field and given value"
        filter: Database_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DatabaseSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Database!]!
    "Databases downstream of this database"
    downstreamDatabasesConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Database_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DatabaseSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): DatabasesConnection
    "Published datasources connected to the database"
    downstreamDatasources(
        "Filter by GraphQL field and given value"
        filter: PublishedDatasource_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: PublishedDatasourceSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [PublishedDatasource!]!
    "Published datasources connected to the database"
    downstreamDatasourcesConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: PublishedDatasource_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: PublishedDatasourceSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): PublishedDatasourcesConnection
    "Flows downstream of this database"
    downstreamFlows(
        "Filter by GraphQL field and given value"
        filter: Flow_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: FlowSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Flow!]!
    "Flows downstream of this database"
    downstreamFlowsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Flow_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: FlowSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): FlowsConnection
    "Lenses connected to the database"
    downstreamLenses(
        "Filter by GraphQL field and given value"
        filter: Lens_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: LensSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Lens!]!
    "Lenses connected to the database"
    downstreamLensesConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Lens_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: LensSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): LensesConnection
    "Metrics connected to the database"
    downstreamMetrics(
        "Filter by GraphQL field and given value"
        filter: Metric_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: MetricSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Metric!]!
    "Metrics connected to the database"
    downstreamMetricsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Metric_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: MetricSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): MetricsConnection
    "Owners connected to the database"
    downstreamOwners(
        "Filter by GraphQL field and given value"
        filter: TableauUser_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: TableauUserSortOrder
    ): [TableauUser!]!
    "Owners connected to the database"
    downstreamOwnersConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: TableauUser_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: TableauUserSortOrder
    ): TableauUsersConnection
    "Sheets connected to the database"
    downstreamSheets(
        "Filter by GraphQL field and given value"
        filter: Sheet_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: SheetSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Sheet!]!
    "Sheets connected to the database"
    downstreamSheetsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Sheet_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: SheetSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): SheetsConnection
    "Tables downstream of this database"
    downstreamTables(
        "Filter by GraphQL field and given value"
        filter: DatabaseTable_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DatabaseTableSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [DatabaseTable!]!
    "Tables downstream of this database"
    downstreamTablesConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: DatabaseTable_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DatabaseTableSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): DatabaseTablesConnection
    "Virtual connection tables downstream of this database"
    downstreamVirtualConnectionTables(
        "Filter by GraphQL field and given value"
        filter: VirtualConnectionTable_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: VirtualConnectionTableSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [VirtualConnectionTable!]!
    "Virtual connection tables downstream of this database"
    downstreamVirtualConnectionTablesConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: VirtualConnectionTable_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: VirtualConnectionTableSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): VirtualConnectionTablesConnection
    "Virtual connection tables downstream of this database"
    downstreamVirtualConnections(
        "Filter by GraphQL field and given value"
        filter: VirtualConnection_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: VirtualConnectionSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [VirtualConnection!]!
    "Virtual connection tables downstream of this database"
    downstreamVirtualConnectionsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: VirtualConnection_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: VirtualConnectionSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): VirtualConnectionsConnection
    "Workbooks connected to the database"
    downstreamWorkbooks(
        "Filter by GraphQL field and given value"
        filter: Workbook_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: WorkbookSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Workbook!]!
    "Workbooks connected to the database"
    downstreamWorkbooksConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Workbook_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: WorkbookSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): WorkbooksConnection
    "The file extension"
    fileExtension: String
    "The ID used by the provider for the cloud file. Each provider uses IDs in a different format."
    fileId: String
    "True if the database has an active data quality warning"
    hasActiveWarning: Boolean!
    "Unique identifier used by the metadata API.  Not the same as the numeric ID used on server"
    id: ID!
    "True if this database contains an active data quality certification"
    isCertified: Boolean!
    "True if this database has its permission locked"
    isControlledPermissionsEnabled: Boolean
    "True if this file is embedded in Tableau content, e.g., a packaged workbook"
    isEmbedded: Boolean
    "True if this database has been grouped with other databases"
    isGrouped: Boolean
    "Locally unique identifier used for the REST API on the Tableau Server"
    luid: String!
    "The MIME type"
    mimeType: String
    "Name shown in server and desktop clients"
    name: String
    "The name of the project in which the table is visible. Will be empty if the table is not in a project."
    projectName: String
    "The ID of the project in which the table is visible. Will be empty if the table is not in a project."
    projectVizportalUrlId: String
    "The provider of the cloud file, e.g., onedrive, google-sheets, dropbox, and box"
    provider: String
    "The custom SQL queries that reference this database"
    referencedByQueries(
        "Filter by GraphQL field and given value"
        filter: CustomSQLTable_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: CustomSQLTableSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [CustomSQLTable]
    "The custom SQL queries that reference this database"
    referencedByQueriesConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: CustomSQLTable_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: CustomSQLTableSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): CustomSQLTablesConnection
    "URL for requesting the cloud file"
    requestUrl: String
    "Tables belonging to this database"
    tables(
        "Filter by GraphQL field and given value"
        filter: DatabaseTable_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DatabaseTableSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [DatabaseTable]
    "Tables belonging to this database"
    tablesConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: DatabaseTable_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DatabaseTableSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): DatabaseTablesConnection
    "Tags associated with the database"
    tags(
        "Filter by GraphQL field and given value"
        filter: Tag_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: TagSortOrder
    ): [Tag!]!
    "Tags associated with the database"
    tagsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Tag_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: TagSortOrder
    ): TagsConnection
    "Data quality warnings upstream from this database"
    upstreamDataQualityWarnings(
        "Filter by GraphQL field and given value"
        filter: DataQualityWarning_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DataQualityWarningSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [DataQualityWarning!]!
    "Data quality warnings upstream from this database"
    upstreamDataQualityWarningsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: DataQualityWarning_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DataQualityWarningSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): DataQualityWarningsConnection
    "Databases upstream of this database"
    upstreamDatabases(
        "Filter by GraphQL field and given value"
        filter: Database_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DatabaseSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Database!]!
    "Databases upstream of this database"
    upstreamDatabasesConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Database_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DatabaseSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): DatabasesConnection
    "Datasources upstream of this database"
    upstreamDatasources(
        "Filter by GraphQL field and given value"
        filter: PublishedDatasource_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: PublishedDatasourceSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [PublishedDatasource!]!
    "Datasources upstream of this database"
    upstreamDatasourcesConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: PublishedDatasource_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: PublishedDatasourceSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): PublishedDatasourcesConnection
    "Flows upstream of this database"
    upstreamFlows(
        "Filter by GraphQL field and given value"
        filter: Flow_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: FlowSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Flow!]!
    "Flows upstream of this database"
    upstreamFlowsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Flow_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: FlowSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): FlowsConnection
    "Tables upstream of this database"
    upstreamTables(
        "Filter by GraphQL field and given value"
        filter: DatabaseTable_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DatabaseTableSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [DatabaseTable!]!
    "Tables upstream of this database"
    upstreamTablesConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: DatabaseTable_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DatabaseTableSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): DatabaseTablesConnection
    "Virtual connection tables upstream of this database"
    upstreamVirtualConnectionTables(
        "Filter by GraphQL field and given value"
        filter: VirtualConnectionTable_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: VirtualConnectionTableSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [VirtualConnectionTable!]!
    "Virtual connection tables upstream of this database"
    upstreamVirtualConnectionTablesConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: VirtualConnectionTable_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: VirtualConnectionTableSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): VirtualConnectionTablesConnection
    "Virtual connection tables upstream of this database"
    upstreamVirtualConnections(
        "Filter by GraphQL field and given value"
        filter: VirtualConnection_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: VirtualConnectionSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [VirtualConnection!]!
    "Virtual connection tables upstream of this database"
    upstreamVirtualConnectionsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: VirtualConnection_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: VirtualConnectionSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): VirtualConnectionsConnection
    "Vizportal ID of this database, for use in client-to-server communications"
    vizportalId: String!
}

"Connection Type for CloudFile"
type CloudFilesConnection {
    "List of nodes"
    nodes: [CloudFile!]!
    "Information for pagination"
    pageInfo: PageInfo!
    "Total number of objects in connection"
    totalCount: Int!
}

"GraphQL type for a table column"
type Column implements Node & Taggable & Warnable {
    "The optional data quality warning on this column."
    dataQualityWarning: DataQualityWarning @deprecated(reason: "Use 'dataQualityWarnings'")
    "The data quality warnings on this column. Available in Tableau Cloud October 2022 / Server 2022.3 and later."
    dataQualityWarnings(
        "Filter by GraphQL field and given value"
        filter: DataQualityWarning_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DataQualityWarningSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [DataQualityWarning!]!
    "The data quality warnings on this column. Available in Tableau Cloud October 2022 / Server 2022.3 and later."
    dataQualityWarningsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: DataQualityWarning_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DataQualityWarningSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): DataQualityWarningsConnection
    "User modifiable description of this column"
    description: String
    "description that is shown in the Tableau UI"
    descriptionInherited(
        "Method for selecting inherited value"
        inheritanceType: InheritanceType,
        "Option to select how to apply permissions. By default it is OBFUSCATE_RESULTS"
        permissionMode: PermissionMode
    ): [InheritedStringResult]
    "Columns downstream from the column"
    downstreamColumns(
        "Filter by GraphQL field and given value"
        filter: Column_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: ColumnSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Column!]!
    "Columns downstream from the column"
    downstreamColumnsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Column_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: ColumnSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): ColumnsConnection
    "Dashboards downstream from the column"
    downstreamDashboards(
        "Filter by GraphQL field and given value"
        filter: Dashboard_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DashboardSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Dashboard!]!
    "Dashboards downstream from the column"
    downstreamDashboardsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Dashboard_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DashboardSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): DashboardsConnection
    "Databases downstream from the column"
    downstreamDatabases(
        "Filter by GraphQL field and given value"
        filter: Database_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DatabaseSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Database!]!
    "Databases downstream from the column"
    downstreamDatabasesConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Database_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DatabaseSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): DatabasesConnection
    "Published datasources downstream from the column"
    downstreamDatasources(
        "Filter by GraphQL field and given value"
        filter: PublishedDatasource_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: PublishedDatasourceSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [PublishedDatasource!]!
    "Published datasources downstream from the column"
    downstreamDatasourcesConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: PublishedDatasource_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: PublishedDatasourceSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): PublishedDatasourcesConnection
    "Fields downstream from the column"
    downstreamFields(
        "Filter by GraphQL field and given value"
        filter: Field_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: FieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Field!]!
    "Fields downstream from the column"
    downstreamFieldsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Field_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: FieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): FieldsConnection
    "Flows downstream from the column"
    downstreamFlows(
        "Filter by GraphQL field and given value"
        filter: Flow_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: FlowSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Flow!]!
    "Flows downstream from the column"
    downstreamFlowsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Flow_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: FlowSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): FlowsConnection
    "Lenses downstream from the column"
    downstreamLenses(
        "Filter by GraphQL field and given value"
        filter: Lens_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: LensSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Lens!]!
    "Lenses downstream from the column"
    downstreamLensesConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Lens_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: LensSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): LensesConnection
    "Metrics downstream from the column"
    downstreamMetrics(
        "Filter by GraphQL field and given value"
        filter: Metric_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: MetricSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Metric!]!
    "Metrics downstream from the column"
    downstreamMetricsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Metric_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: MetricSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): MetricsConnection
    "Owners of workbooks and published datasources downstream from the column"
    downstreamOwners(
        "Filter by GraphQL field and given value"
        filter: TableauUser_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: TableauUserSortOrder
    ): [TableauUser!]!
    "Owners of workbooks and published datasources downstream from the column"
    downstreamOwnersConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: TableauUser_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: TableauUserSortOrder
    ): TableauUsersConnection
    "Sheets downstream from the column"
    downstreamSheets(
        "Filter by GraphQL field and given value"
        filter: Sheet_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: SheetSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Sheet!]!
    "Sheets downstream from the column"
    downstreamSheetsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Sheet_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: SheetSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): SheetsConnection
    "Tables downstream from the column"
    downstreamTables(
        "Filter by GraphQL field and given value"
        filter: DatabaseTable_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DatabaseTableSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [DatabaseTable!]!
    "Tables downstream from the column"
    downstreamTablesConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: DatabaseTable_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DatabaseTableSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): DatabaseTablesConnection
    "Virtual connection tables downstream from the column"
    downstreamVirtualConnectionTables(
        "Filter by GraphQL field and given value"
        filter: VirtualConnectionTable_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: VirtualConnectionTableSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [VirtualConnectionTable!]!
    "Virtual connection tables downstream from the column"
    downstreamVirtualConnectionTablesConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: VirtualConnectionTable_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: VirtualConnectionTableSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): VirtualConnectionTablesConnection
    "Virtual connections downstream from the column"
    downstreamVirtualConnections(
        "Filter by GraphQL field and given value"
        filter: VirtualConnection_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: VirtualConnectionSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [VirtualConnection!]!
    "Virtual connections downstream from the column"
    downstreamVirtualConnectionsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: VirtualConnection_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: VirtualConnectionSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): VirtualConnectionsConnection
    "Workbooks downstream from the column"
    downstreamWorkbooks(
        "Filter by GraphQL field and given value"
        filter: Workbook_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: WorkbookSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Workbook!]!
    "Workbooks downstream from the column"
    downstreamWorkbooksConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Workbook_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: WorkbookSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): WorkbooksConnection
    "True if this column has an active data quality warning. Available in Tableau Cloud October 2022 / Server 2022.3 and later."
    hasActiveWarning: Boolean!
    "Unique identifier used by the metadata API.  Not the same as the numeric ID used on server"
    id: ID!
    "True if this column may contain null values"
    isNullable: Boolean
    "Locally unique identifier used for the REST API on the Tableau Server"
    luid: String!
    "Name of column"
    name: String
    "The column field that references this column"
    referencedByFields(
        "Filter by GraphQL field and given value"
        filter: ColumnField_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: ColumnFieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [ColumnField]
    "The column field that references this column"
    referencedByFieldsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: ColumnField_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: ColumnFieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): ColumnFieldsConnection
    "A flow input field that wraps this column"
    referencedByFlowColumnInputField(
        "Filter by GraphQL field and given value"
        filter: FlowColumnInputField_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: FlowColumnInputFieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [FlowColumnInputField]
    "A flow input field that wraps this column"
    referencedByFlowColumnInputFieldConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: FlowColumnInputField_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: FlowColumnInputFieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): FlowColumnInputFieldsConnection
    "A flow output field that wraps this column"
    referencedByFlowColumnOutputField(
        "Filter by GraphQL field and given value"
        filter: FlowColumnOutputField_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: FlowColumnOutputFieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [FlowColumnOutputField]
    "A flow output field that wraps this column"
    referencedByFlowColumnOutputFieldConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: FlowColumnOutputField_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: FlowColumnOutputFieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): FlowColumnOutputFieldsConnection
    "A column that logically represents this column."
    referencedByRemoteColumn(
        "Filter by GraphQL field and given value"
        filter: Column_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: ColumnSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Column]
    "A column that logically represents this column."
    referencedByRemoteColumnConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Column_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: ColumnSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): ColumnsConnection
    "A column that this column logically represents."
    remoteColumn: Column
    "Remote type on the database. Types correspond to OLEDB types here: https://referencesource.microsoft.com/#system.data/System/Data/OleDb/OLEDB_Enum.cs,364"
    remoteType: RemoteType!
    "The table that this column belongs to"
    table: Table
    "Tags associated with the column"
    tags(
        "Filter by GraphQL field and given value"
        filter: Tag_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: TagSortOrder
    ): [Tag!]!
    "Tags associated with the column"
    tagsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Tag_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: TagSortOrder
    ): TagsConnection
    "All upstream columns this column references"
    upstreamColumns(
        "Filter by GraphQL field and given value"
        filter: Column_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: ColumnSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Column]!
    "All upstream columns this column references"
    upstreamColumnsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Column_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: ColumnSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): ColumnsConnection
    "Databases upstream from the Table"
    upstreamDatabases(
        "Filter by GraphQL field and given value"
        filter: Database_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DatabaseSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Database!]!
    "Databases upstream from the Table"
    upstreamDatabasesConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Database_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DatabaseSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): DatabasesConnection
    "Datasources upstream from this column"
    upstreamDatasources(
        "Filter by GraphQL field and given value"
        filter: PublishedDatasource_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: PublishedDatasourceSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [PublishedDatasource!]!
    "Datasources upstream from this column"
    upstreamDatasourcesConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: PublishedDatasource_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: PublishedDatasourceSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): PublishedDatasourcesConnection
    "fields that are upstream of this column"
    upstreamFields(
        "Filter by GraphQL field and given value"
        filter: Field_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: FieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Field]!
    "fields that are upstream of this column"
    upstreamFieldsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Field_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: FieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): FieldsConnection
    "Flows connected upstream from the column"
    upstreamFlows(
        "Filter by GraphQL field and given value"
        filter: Flow_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: FlowSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Flow!]!
    "Flows connected upstream from the column"
    upstreamFlowsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Flow_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: FlowSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): FlowsConnection
    "Tables upstream from the column"
    upstreamTables(
        "Filter by GraphQL field and given value"
        filter: DatabaseTable_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DatabaseTableSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [DatabaseTable!]!
    "Tables upstream from the column"
    upstreamTablesConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: DatabaseTable_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DatabaseTableSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): DatabaseTablesConnection
    "Virtual connection tables upstream from the column"
    upstreamVirtualConnectionTables(
        "Filter by GraphQL field and given value"
        filter: VirtualConnectionTable_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: VirtualConnectionTableSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [VirtualConnectionTable!]!
    "Virtual connection tables upstream from the column"
    upstreamVirtualConnectionTablesConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: VirtualConnectionTable_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: VirtualConnectionTableSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): VirtualConnectionTablesConnection
    "Virtual connections upstream from the column"
    upstreamVirtualConnections(
        "Filter by GraphQL field and given value"
        filter: VirtualConnection_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: VirtualConnectionSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [VirtualConnection!]!
    "Virtual connections upstream from the column"
    upstreamVirtualConnectionsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: VirtualConnection_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: VirtualConnectionSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): VirtualConnectionsConnection
    "Vizportal ID of this column, for use in client-to-server communications"
    vizportalId: String
}

"ColumnFields are a type of field which directly connects to a column in some type of table."
type ColumnField implements AnalyticsField & DataField & Field & Node {
    "Default aggregation of the field, i.e. 'Sum', 'Average'. See https://onlinehelp.tableau.com/current/pro/desktop/en-us/calculations_aggregation.html#AggFuncs"
    aggregation: String
    "For the percentile aggregation, the percentile number"
    aggregationParam: String
    "List of columns, if any, that this field references"
    columns(
        "Filter by GraphQL field and given value"
        filter: Column_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: ColumnSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Column!]!
    "List of columns, if any, that this field references"
    columnsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Column_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: ColumnSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): ColumnsConnection
    "Data category of the field"
    dataCategory: FieldRoleCategory
    "Type of the data in the field. See https://onlinehelp.tableau.com/current/pro/desktop/en-us/datafields_typesandroles_datatypes.html"
    dataType: FieldDataType
    "Data source that contains this field"
    datasource: Datasource
    "Default format for number or date"
    defaultFormat: String
    "List of lens fields which are derived from this field"
    derivedLensFields(
        "Filter by GraphQL field and given value"
        filter: LensField_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: LensFieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [LensField]
    "List of lens fields which are derived from this field"
    derivedLensFieldsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: LensField_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: LensFieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): LensFieldsConnection
    "Description of field shown in server and desktop clients"
    description: String
    "description that is shown in the Tableau UI"
    descriptionInherited(
        "Method for selecting inherited value"
        inheritanceType: InheritanceType,
        "Option to select how to apply permissions. By default it is OBFUSCATE_RESULTS"
        permissionMode: PermissionMode
    ): [InheritedStringResult]
    "Sheets that reference this field"
    directSheets(
        "Filter by GraphQL field and given value"
        filter: Sheet_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: SheetSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Sheet]
    "Sheets that reference this field"
    directSheetsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Sheet_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: SheetSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): SheetsConnection
    "Columns downstream of this field"
    downstreamColumns(
        "Filter by GraphQL field and given value"
        filter: Column_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: ColumnSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Column!]!
    "Columns downstream of this field"
    downstreamColumnsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Column_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: ColumnSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): ColumnsConnection
    "Dashboards connected downstream from the field"
    downstreamDashboards(
        "Filter by GraphQL field and given value"
        filter: Dashboard_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DashboardSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Dashboard!]!
    "Dashboards connected downstream from the field"
    downstreamDashboardsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Dashboard_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DashboardSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): DashboardsConnection
    "Databases downstream of this field"
    downstreamDatabases(
        "Filter by GraphQL field and given value"
        filter: Database_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DatabaseSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Database!]!
    "Databases downstream of this field"
    downstreamDatabasesConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Database_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DatabaseSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): DatabasesConnection
    "Datasources connected downstream from this field"
    downstreamDatasources(
        "Filter by GraphQL field and given value"
        filter: PublishedDatasource_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: PublishedDatasourceSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [PublishedDatasource!]
    "Datasources connected downstream from this field"
    downstreamDatasourcesConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: PublishedDatasource_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: PublishedDatasourceSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): PublishedDatasourcesConnection
    "downstream fields that reference this field"
    downstreamFields(
        "Filter by GraphQL field and given value"
        filter: Field_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: FieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Field!]!
    "downstream fields that reference this field"
    downstreamFieldsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Field_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: FieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): FieldsConnection
    "Flows downstream of this field"
    downstreamFlows(
        "Filter by GraphQL field and given value"
        filter: Flow_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: FlowSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Flow!]!
    "Flows downstream of this field"
    downstreamFlowsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Flow_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: FlowSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): FlowsConnection
    "Lenses connected downstream from this field"
    downstreamLenses(
        "Filter by GraphQL field and given value"
        filter: Lens_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: LensSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Lens!]
    "Lenses connected downstream from this field"
    downstreamLensesConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Lens_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: LensSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): LensesConnection
    "Metrics connected downstream from the field"
    downstreamMetrics(
        "Filter by GraphQL field and given value"
        filter: Metric_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: MetricSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Metric!]
    "Metrics connected downstream from the field"
    downstreamMetricsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Metric_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: MetricSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): MetricsConnection
    "Workbook owners (authors) connected downstream from the field"
    downstreamOwners(
        "Filter by GraphQL field and given value"
        filter: TableauUser_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: TableauUserSortOrder
    ): [TableauUser!]
    "Workbook owners (authors) connected downstream from the field"
    downstreamOwnersConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: TableauUser_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: TableauUserSortOrder
    ): TableauUsersConnection
    "Sheets connected downstream from the field"
    downstreamSheets(
        "Filter by GraphQL field and given value"
        filter: Sheet_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: SheetSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Sheet!]!
    "Sheets connected downstream from the field"
    downstreamSheetsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Sheet_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: SheetSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): SheetsConnection
    "Tables downstream of this field"
    downstreamTables(
        "Filter by GraphQL field and given value"
        filter: DatabaseTable_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DatabaseTableSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [DatabaseTable!]!
    "Tables downstream of this field"
    downstreamTablesConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: DatabaseTable_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DatabaseTableSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): DatabaseTablesConnection
    "Virtual connection tables downstream of this field"
    downstreamVirtualConnectionTables(
        "Filter by GraphQL field and given value"
        filter: VirtualConnectionTable_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: VirtualConnectionTableSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [VirtualConnectionTable!]!
    "Virtual connection tables downstream of this field"
    downstreamVirtualConnectionTablesConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: VirtualConnectionTable_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: VirtualConnectionTableSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): VirtualConnectionTablesConnection
    "Virtual connections downstream of this field"
    downstreamVirtualConnections(
        "Filter by GraphQL field and given value"
        filter: VirtualConnection_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: VirtualConnectionSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [VirtualConnection!]!
    "Virtual connections downstream of this field"
    downstreamVirtualConnectionsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: VirtualConnection_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: VirtualConnectionSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): VirtualConnectionsConnection
    "Workbooks connected downstream from the field"
    downstreamWorkbooks(
        "Filter by GraphQL field and given value"
        filter: Workbook_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: WorkbookSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Workbook!]
    "Workbooks connected downstream from the field"
    downstreamWorkbooksConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Workbook_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: WorkbookSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): WorkbooksConnection
    "Name of folder if the field is in a folder. See https://onlinehelp.tableau.com/current/pro/desktop/en-us/datafields_dwfeatures.html#Organize"
    folderName: String
    "Name internally used to uniquely identify fields"
    fullyQualifiedName: String
    "Unique identifier used by the metadata API.  Not the same as the numeric ID used on server"
    id: ID!
    "True if the field is hidden"
    isHidden: Boolean
    "Name shown in server and desktop clients"
    name: String
    "The bin field that references this field"
    referencedByBins(
        "Filter by GraphQL field and given value"
        filter: BinField_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: BinFieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [BinField]
    "The bin field that references this field"
    referencedByBinsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: BinField_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: BinFieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): BinFieldsConnection
    "The calculated field that references this field"
    referencedByCalculations(
        "Filter by GraphQL field and given value"
        filter: CalculatedField_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: CalculatedFieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [CalculatedField]
    "The calculated field that references this field"
    referencedByCalculationsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: CalculatedField_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: CalculatedFieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): CalculatedFieldsConnection
    "The combined field that references this field"
    referencedByCombinedFields(
        "Filter by GraphQL field and given value"
        filter: CombinedField_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: CombinedFieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [CombinedField]
    "The combined field that references this field"
    referencedByCombinedFieldsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: CombinedField_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: CombinedFieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): CombinedFieldsConnection
    "Thie combined set field that references this field"
    referencedByCombinedSets(
        "Filter by GraphQL field and given value"
        filter: CombinedSetField_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: CombinedSetFieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [CombinedSetField]
    "Thie combined set field that references this field"
    referencedByCombinedSetsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: CombinedSetField_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: CombinedSetFieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): CombinedSetFieldsConnection
    "The field that references this field"
    referencedByFields(
        "Filter by GraphQL field and given value"
        filter: FieldReferencingField_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: FieldReferencingFieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [FieldReferencingField]
    "The field that references this field"
    referencedByFieldsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: FieldReferencingField_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: FieldReferencingFieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): FieldReferencingFieldsConnection
    "The data source filters that include this field"
    referencedByFilters(
        "Filter by GraphQL field and given value"
        filter: DatasourceFilter_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DatasourceFilterSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [DatasourceFilter]
    "The data source filters that include this field"
    referencedByFiltersConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: DatasourceFilter_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DatasourceFilterSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): DatasourceFiltersConnection
    "A flow input field that wraps this field"
    referencedByFlowFieldInputField(
        "Filter by GraphQL field and given value"
        filter: FlowFieldInputField_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: FlowFieldInputFieldSortOrder
    ): [FlowFieldInputField]
    "A flow input field that wraps this field"
    referencedByFlowFieldInputFieldConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: FlowFieldInputField_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: FlowFieldInputFieldSortOrder
    ): FlowFieldInputFieldsConnection
    "A flow output field that wraps this field"
    referencedByFlowFieldOutputField(
        "Filter by GraphQL field and given value"
        filter: FlowFieldOutputField_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: FlowFieldOutputFieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [FlowFieldOutputField]
    "A flow output field that wraps this field"
    referencedByFlowFieldOutputFieldConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: FlowFieldOutputField_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: FlowFieldOutputFieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): FlowFieldOutputFieldsConnection
    "The group field that references this field"
    referencedByGroups(
        "Filter by GraphQL field and given value"
        filter: GroupField_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: GroupFieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [GroupField]
    "The group field that references this field"
    referencedByGroupsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: GroupField_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: GroupFieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): GroupFieldsConnection
    "The hierarchy field that references this field"
    referencedByHierarchies(
        "Filter by GraphQL field and given value"
        filter: HierarchyField_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: HierarchyFieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [HierarchyField]
    "The hierarchy field that references this field"
    referencedByHierarchiesConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: HierarchyField_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: HierarchyFieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): HierarchyFieldsConnection
    "The field that references this remote field"
    referencedByRemoteFields(
        "Filter by GraphQL field and given value"
        filter: DatasourceField_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DatasourceFieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [DatasourceField]
    "The field that references this remote field"
    referencedByRemoteFieldsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: DatasourceField_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DatasourceFieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): DatasourceFieldsConnection
    "The set field that this field references"
    referencedBySets(
        "Filter by GraphQL field and given value"
        filter: SetField_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: SetFieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [SetField]
    "The set field that this field references"
    referencedBySetsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: SetField_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: SetFieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): SetFieldsConnection
    "Role of the field: 'dimension', 'measure' or 'unknown'"
    role: FieldRole
    "For geographic data, the geographic role of the field. See https://onlinehelp.tableau.com/current/pro/desktop/en-us/maps_geographicroles.html"
    semanticRole: String
    "Sheets that reference this data source field"
    sheets(
        "Filter by GraphQL field and given value"
        filter: Sheet_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: SheetSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Sheet]
    "Sheets that reference this data source field"
    sheetsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Sheet_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: SheetSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): SheetsConnection
    "All upstream columns this field references"
    upstreamColumns(
        "Filter by GraphQL field and given value"
        filter: Column_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: ColumnSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Column]!
    "All upstream columns this field references"
    upstreamColumnsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Column_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: ColumnSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): ColumnsConnection
    "Databases connected upstream from the field"
    upstreamDatabases(
        "Filter by GraphQL field and given value"
        filter: Database_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DatabaseSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Database!]!
    "Databases connected upstream from the field"
    upstreamDatabasesConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Database_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DatabaseSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): DatabasesConnection
    "Datasources connected upstream from the field"
    upstreamDatasources(
        "Filter by GraphQL field and given value"
        filter: PublishedDatasource_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: PublishedDatasourceSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [PublishedDatasource!]!
    "Datasources connected upstream from the field"
    upstreamDatasourcesConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: PublishedDatasource_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: PublishedDatasourceSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): PublishedDatasourcesConnection
    "fields that are upstream of this field"
    upstreamFields(
        "Filter by GraphQL field and given value"
        filter: Field_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: FieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Field]!
    "fields that are upstream of this field"
    upstreamFieldsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Field_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: FieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): FieldsConnection
    "Flows connected upstream from the field"
    upstreamFlows(
        "Filter by GraphQL field and given value"
        filter: Flow_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: FlowSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Flow!]!
    "Flows connected upstream from the field"
    upstreamFlowsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Flow_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: FlowSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): FlowsConnection
    "Tables connected upstream from the field"
    upstreamTables(
        "Filter by GraphQL field and given value"
        filter: DatabaseTable_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DatabaseTableSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [DatabaseTable!]!
    "Tables connected upstream from the field"
    upstreamTablesConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: DatabaseTable_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DatabaseTableSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): DatabaseTablesConnection
    "Virtual connection tables upstream of this field"
    upstreamVirtualConnectionTables(
        "Filter by GraphQL field and given value"
        filter: VirtualConnectionTable_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: VirtualConnectionTableSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [VirtualConnectionTable!]!
    "Virtual connection tables upstream of this field"
    upstreamVirtualConnectionTablesConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: VirtualConnectionTable_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: VirtualConnectionTableSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): VirtualConnectionTablesConnection
    "Virtual connections upstream of this field"
    upstreamVirtualConnections(
        "Filter by GraphQL field and given value"
        filter: VirtualConnection_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: VirtualConnectionSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [VirtualConnection!]!
    "Virtual connections upstream of this field"
    upstreamVirtualConnectionsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: VirtualConnection_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: VirtualConnectionSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): VirtualConnectionsConnection
}

"Connection Type for ColumnField"
type ColumnFieldsConnection {
    "List of nodes"
    nodes: [ColumnField!]!
    "Information for pagination"
    pageInfo: PageInfo!
    "Total number of objects in connection"
    totalCount: Int!
}

"Connection Type for Column"
type ColumnsConnection {
    "List of nodes"
    nodes: [Column!]!
    "Information for pagination"
    pageInfo: PageInfo!
    "Total number of objects in connection"
    totalCount: Int!
}

"GraphQL type for a combined field. Combined fields concatanate fields together into one string."
type CombinedField implements Field & FieldReferencingField & Node {
    "Data source that contains this field"
    datasource: Datasource
    "List of lens fields which are derived from this field"
    derivedLensFields(
        "Filter by GraphQL field and given value"
        filter: LensField_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: LensFieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [LensField]
    "List of lens fields which are derived from this field"
    derivedLensFieldsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: LensField_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: LensFieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): LensFieldsConnection
    "Description of field shown in server and desktop clients"
    description: String
    "description that is shown in the Tableau UI"
    descriptionInherited(
        "Method for selecting inherited value"
        inheritanceType: InheritanceType,
        "Option to select how to apply permissions. By default it is OBFUSCATE_RESULTS"
        permissionMode: PermissionMode
    ): [InheritedStringResult]
    "Sheets that reference this field"
    directSheets(
        "Filter by GraphQL field and given value"
        filter: Sheet_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: SheetSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Sheet]
    "Sheets that reference this field"
    directSheetsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Sheet_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: SheetSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): SheetsConnection
    "Columns downstream of this field"
    downstreamColumns(
        "Filter by GraphQL field and given value"
        filter: Column_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: ColumnSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Column!]!
    "Columns downstream of this field"
    downstreamColumnsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Column_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: ColumnSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): ColumnsConnection
    "Dashboards connected downstream from the field"
    downstreamDashboards(
        "Filter by GraphQL field and given value"
        filter: Dashboard_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DashboardSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Dashboard!]!
    "Dashboards connected downstream from the field"
    downstreamDashboardsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Dashboard_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DashboardSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): DashboardsConnection
    "Databases downstream of this field"
    downstreamDatabases(
        "Filter by GraphQL field and given value"
        filter: Database_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DatabaseSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Database!]!
    "Databases downstream of this field"
    downstreamDatabasesConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Database_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DatabaseSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): DatabasesConnection
    "Datasources connected downstream from this field"
    downstreamDatasources(
        "Filter by GraphQL field and given value"
        filter: PublishedDatasource_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: PublishedDatasourceSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [PublishedDatasource!]
    "Datasources connected downstream from this field"
    downstreamDatasourcesConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: PublishedDatasource_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: PublishedDatasourceSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): PublishedDatasourcesConnection
    "downstream fields that reference this field"
    downstreamFields(
        "Filter by GraphQL field and given value"
        filter: Field_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: FieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Field!]!
    "downstream fields that reference this field"
    downstreamFieldsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Field_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: FieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): FieldsConnection
    "Flows downstream of this field"
    downstreamFlows(
        "Filter by GraphQL field and given value"
        filter: Flow_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: FlowSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Flow!]!
    "Flows downstream of this field"
    downstreamFlowsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Flow_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: FlowSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): FlowsConnection
    "Lenses connected downstream from this field"
    downstreamLenses(
        "Filter by GraphQL field and given value"
        filter: Lens_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: LensSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Lens!]
    "Lenses connected downstream from this field"
    downstreamLensesConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Lens_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: LensSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): LensesConnection
    "Metrics connected downstream from the field"
    downstreamMetrics(
        "Filter by GraphQL field and given value"
        filter: Metric_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: MetricSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Metric!]
    "Metrics connected downstream from the field"
    downstreamMetricsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Metric_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: MetricSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): MetricsConnection
    "Workbook owners (authors) connected downstream from the field"
    downstreamOwners(
        "Filter by GraphQL field and given value"
        filter: TableauUser_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: TableauUserSortOrder
    ): [TableauUser!]
    "Workbook owners (authors) connected downstream from the field"
    downstreamOwnersConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: TableauUser_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: TableauUserSortOrder
    ): TableauUsersConnection
    "Sheets connected downstream from the field"
    downstreamSheets(
        "Filter by GraphQL field and given value"
        filter: Sheet_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: SheetSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Sheet!]!
    "Sheets connected downstream from the field"
    downstreamSheetsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Sheet_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: SheetSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): SheetsConnection
    "Tables downstream of this field"
    downstreamTables(
        "Filter by GraphQL field and given value"
        filter: DatabaseTable_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DatabaseTableSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [DatabaseTable!]!
    "Tables downstream of this field"
    downstreamTablesConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: DatabaseTable_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DatabaseTableSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): DatabaseTablesConnection
    "Virtual connection tables downstream of this field"
    downstreamVirtualConnectionTables(
        "Filter by GraphQL field and given value"
        filter: VirtualConnectionTable_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: VirtualConnectionTableSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [VirtualConnectionTable!]!
    "Virtual connection tables downstream of this field"
    downstreamVirtualConnectionTablesConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: VirtualConnectionTable_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: VirtualConnectionTableSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): VirtualConnectionTablesConnection
    "Virtual connections downstream of this field"
    downstreamVirtualConnections(
        "Filter by GraphQL field and given value"
        filter: VirtualConnection_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: VirtualConnectionSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [VirtualConnection!]!
    "Virtual connections downstream of this field"
    downstreamVirtualConnectionsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: VirtualConnection_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: VirtualConnectionSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): VirtualConnectionsConnection
    "Workbooks connected downstream from the field"
    downstreamWorkbooks(
        "Filter by GraphQL field and given value"
        filter: Workbook_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: WorkbookSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Workbook!]
    "Workbooks connected downstream from the field"
    downstreamWorkbooksConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Workbook_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: WorkbookSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): WorkbooksConnection
    "List of fields, if any, that this field references"
    fields(
        "Filter by GraphQL field and given value"
        filter: Field_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: FieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Field!]!
    "List of fields, if any, that this field references"
    fieldsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Field_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: FieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): FieldsConnection
    "Name of folder if the field is in a folder. See https://onlinehelp.tableau.com/current/pro/desktop/en-us/datafields_dwfeatures.html#Organize"
    folderName: String
    "Name internally used to uniquely identify fields"
    fullyQualifiedName: String
    "Unique identifier used by the metadata API.  Not the same as the numeric ID used on server"
    id: ID!
    "True if the field is hidden"
    isHidden: Boolean
    "Name shown in server and desktop clients"
    name: String
    "The bin field that references this field"
    referencedByBins(
        "Filter by GraphQL field and given value"
        filter: BinField_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: BinFieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [BinField]
    "The bin field that references this field"
    referencedByBinsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: BinField_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: BinFieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): BinFieldsConnection
    "The calculated field that references this field"
    referencedByCalculations(
        "Filter by GraphQL field and given value"
        filter: CalculatedField_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: CalculatedFieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [CalculatedField]
    "The calculated field that references this field"
    referencedByCalculationsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: CalculatedField_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: CalculatedFieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): CalculatedFieldsConnection
    "The combined field that references this field"
    referencedByCombinedFields(
        "Filter by GraphQL field and given value"
        filter: CombinedField_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: CombinedFieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [CombinedField]
    "The combined field that references this field"
    referencedByCombinedFieldsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: CombinedField_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: CombinedFieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): CombinedFieldsConnection
    "Thie combined set field that references this field"
    referencedByCombinedSets(
        "Filter by GraphQL field and given value"
        filter: CombinedSetField_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: CombinedSetFieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [CombinedSetField]
    "Thie combined set field that references this field"
    referencedByCombinedSetsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: CombinedSetField_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: CombinedSetFieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): CombinedSetFieldsConnection
    "The field that references this field"
    referencedByFields(
        "Filter by GraphQL field and given value"
        filter: FieldReferencingField_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: FieldReferencingFieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [FieldReferencingField]
    "The field that references this field"
    referencedByFieldsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: FieldReferencingField_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: FieldReferencingFieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): FieldReferencingFieldsConnection
    "The data source filters that include this field"
    referencedByFilters(
        "Filter by GraphQL field and given value"
        filter: DatasourceFilter_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DatasourceFilterSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [DatasourceFilter]
    "The data source filters that include this field"
    referencedByFiltersConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: DatasourceFilter_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DatasourceFilterSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): DatasourceFiltersConnection
    "A flow input field that wraps this field"
    referencedByFlowFieldInputField(
        "Filter by GraphQL field and given value"
        filter: FlowFieldInputField_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: FlowFieldInputFieldSortOrder
    ): [FlowFieldInputField]
    "A flow input field that wraps this field"
    referencedByFlowFieldInputFieldConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: FlowFieldInputField_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: FlowFieldInputFieldSortOrder
    ): FlowFieldInputFieldsConnection
    "A flow output field that wraps this field"
    referencedByFlowFieldOutputField(
        "Filter by GraphQL field and given value"
        filter: FlowFieldOutputField_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: FlowFieldOutputFieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [FlowFieldOutputField]
    "A flow output field that wraps this field"
    referencedByFlowFieldOutputFieldConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: FlowFieldOutputField_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: FlowFieldOutputFieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): FlowFieldOutputFieldsConnection
    "The group field that references this field"
    referencedByGroups(
        "Filter by GraphQL field and given value"
        filter: GroupField_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: GroupFieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [GroupField]
    "The group field that references this field"
    referencedByGroupsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: GroupField_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: GroupFieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): GroupFieldsConnection
    "The hierarchy field that references this field"
    referencedByHierarchies(
        "Filter by GraphQL field and given value"
        filter: HierarchyField_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: HierarchyFieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [HierarchyField]
    "The hierarchy field that references this field"
    referencedByHierarchiesConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: HierarchyField_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: HierarchyFieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): HierarchyFieldsConnection
    "The field that references this remote field"
    referencedByRemoteFields(
        "Filter by GraphQL field and given value"
        filter: DatasourceField_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DatasourceFieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [DatasourceField]
    "The field that references this remote field"
    referencedByRemoteFieldsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: DatasourceField_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DatasourceFieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): DatasourceFieldsConnection
    "The set field that this field references"
    referencedBySets(
        "Filter by GraphQL field and given value"
        filter: SetField_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: SetFieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [SetField]
    "The set field that this field references"
    referencedBySetsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: SetField_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: SetFieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): SetFieldsConnection
    "Sheets that reference this data source field"
    sheets(
        "Filter by GraphQL field and given value"
        filter: Sheet_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: SheetSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Sheet]
    "Sheets that reference this data source field"
    sheetsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Sheet_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: SheetSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): SheetsConnection
    "All upstream columns this field references"
    upstreamColumns(
        "Filter by GraphQL field and given value"
        filter: Column_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: ColumnSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Column]!
    "All upstream columns this field references"
    upstreamColumnsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Column_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: ColumnSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): ColumnsConnection
    "Databases connected upstream from the field"
    upstreamDatabases(
        "Filter by GraphQL field and given value"
        filter: Database_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DatabaseSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Database!]!
    "Databases connected upstream from the field"
    upstreamDatabasesConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Database_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DatabaseSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): DatabasesConnection
    "Datasources connected upstream from the field"
    upstreamDatasources(
        "Filter by GraphQL field and given value"
        filter: PublishedDatasource_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: PublishedDatasourceSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [PublishedDatasource!]!
    "Datasources connected upstream from the field"
    upstreamDatasourcesConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: PublishedDatasource_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: PublishedDatasourceSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): PublishedDatasourcesConnection
    "fields that are upstream of this field"
    upstreamFields(
        "Filter by GraphQL field and given value"
        filter: Field_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: FieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Field]!
    "fields that are upstream of this field"
    upstreamFieldsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Field_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: FieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): FieldsConnection
    "Flows connected upstream from the field"
    upstreamFlows(
        "Filter by GraphQL field and given value"
        filter: Flow_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: FlowSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Flow!]!
    "Flows connected upstream from the field"
    upstreamFlowsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Flow_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: FlowSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): FlowsConnection
    "Tables connected upstream from the field"
    upstreamTables(
        "Filter by GraphQL field and given value"
        filter: DatabaseTable_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DatabaseTableSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [DatabaseTable!]!
    "Tables connected upstream from the field"
    upstreamTablesConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: DatabaseTable_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DatabaseTableSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): DatabaseTablesConnection
    "Virtual connection tables upstream of this field"
    upstreamVirtualConnectionTables(
        "Filter by GraphQL field and given value"
        filter: VirtualConnectionTable_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: VirtualConnectionTableSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [VirtualConnectionTable!]!
    "Virtual connection tables upstream of this field"
    upstreamVirtualConnectionTablesConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: VirtualConnectionTable_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: VirtualConnectionTableSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): VirtualConnectionTablesConnection
    "Virtual connections upstream of this field"
    upstreamVirtualConnections(
        "Filter by GraphQL field and given value"
        filter: VirtualConnection_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: VirtualConnectionSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [VirtualConnection!]!
    "Virtual connections upstream of this field"
    upstreamVirtualConnectionsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: VirtualConnection_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: VirtualConnectionSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): VirtualConnectionsConnection
}

"Connection Type for CombinedField"
type CombinedFieldsConnection {
    "List of nodes"
    nodes: [CombinedField!]!
    "Information for pagination"
    pageInfo: PageInfo!
    "Total number of objects in connection"
    totalCount: Int!
}

"GraphQL type for a combined set field. See https://onlinehelp.tableau.com/current/pro/desktop/en-us/sortgroup_sets_create.html#Combine"
type CombinedSetField implements Field & FieldReferencingField & Node {
    "How the sets are combined. 'All Members in Both Sets', 'Shared Members in Both Sets', or 'Except Shared Members'"
    combinationType: String
    "Data source that contains this field"
    datasource: Datasource
    "Delimiter used to separate members of the two sets. Usually ',' or ';'"
    delimiter: String
    "List of lens fields which are derived from this field"
    derivedLensFields(
        "Filter by GraphQL field and given value"
        filter: LensField_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: LensFieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [LensField]
    "List of lens fields which are derived from this field"
    derivedLensFieldsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: LensField_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: LensFieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): LensFieldsConnection
    "Description of field shown in server and desktop clients"
    description: String
    "description that is shown in the Tableau UI"
    descriptionInherited(
        "Method for selecting inherited value"
        inheritanceType: InheritanceType,
        "Option to select how to apply permissions. By default it is OBFUSCATE_RESULTS"
        permissionMode: PermissionMode
    ): [InheritedStringResult]
    "Sheets that reference this field"
    directSheets(
        "Filter by GraphQL field and given value"
        filter: Sheet_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: SheetSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Sheet]
    "Sheets that reference this field"
    directSheetsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Sheet_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: SheetSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): SheetsConnection
    "Columns downstream of this field"
    downstreamColumns(
        "Filter by GraphQL field and given value"
        filter: Column_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: ColumnSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Column!]!
    "Columns downstream of this field"
    downstreamColumnsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Column_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: ColumnSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): ColumnsConnection
    "Dashboards connected downstream from the field"
    downstreamDashboards(
        "Filter by GraphQL field and given value"
        filter: Dashboard_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DashboardSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Dashboard!]!
    "Dashboards connected downstream from the field"
    downstreamDashboardsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Dashboard_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DashboardSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): DashboardsConnection
    "Databases downstream of this field"
    downstreamDatabases(
        "Filter by GraphQL field and given value"
        filter: Database_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DatabaseSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Database!]!
    "Databases downstream of this field"
    downstreamDatabasesConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Database_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DatabaseSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): DatabasesConnection
    "Datasources connected downstream from this field"
    downstreamDatasources(
        "Filter by GraphQL field and given value"
        filter: PublishedDatasource_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: PublishedDatasourceSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [PublishedDatasource!]
    "Datasources connected downstream from this field"
    downstreamDatasourcesConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: PublishedDatasource_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: PublishedDatasourceSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): PublishedDatasourcesConnection
    "downstream fields that reference this field"
    downstreamFields(
        "Filter by GraphQL field and given value"
        filter: Field_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: FieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Field!]!
    "downstream fields that reference this field"
    downstreamFieldsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Field_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: FieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): FieldsConnection
    "Flows downstream of this field"
    downstreamFlows(
        "Filter by GraphQL field and given value"
        filter: Flow_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: FlowSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Flow!]!
    "Flows downstream of this field"
    downstreamFlowsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Flow_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: FlowSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): FlowsConnection
    "Lenses connected downstream from this field"
    downstreamLenses(
        "Filter by GraphQL field and given value"
        filter: Lens_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: LensSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Lens!]
    "Lenses connected downstream from this field"
    downstreamLensesConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Lens_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: LensSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): LensesConnection
    "Metrics connected downstream from the field"
    downstreamMetrics(
        "Filter by GraphQL field and given value"
        filter: Metric_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: MetricSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Metric!]
    "Metrics connected downstream from the field"
    downstreamMetricsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Metric_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: MetricSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): MetricsConnection
    "Workbook owners (authors) connected downstream from the field"
    downstreamOwners(
        "Filter by GraphQL field and given value"
        filter: TableauUser_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: TableauUserSortOrder
    ): [TableauUser!]
    "Workbook owners (authors) connected downstream from the field"
    downstreamOwnersConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: TableauUser_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: TableauUserSortOrder
    ): TableauUsersConnection
    "Sheets connected downstream from the field"
    downstreamSheets(
        "Filter by GraphQL field and given value"
        filter: Sheet_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: SheetSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Sheet!]!
    "Sheets connected downstream from the field"
    downstreamSheetsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Sheet_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: SheetSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): SheetsConnection
    "Tables downstream of this field"
    downstreamTables(
        "Filter by GraphQL field and given value"
        filter: DatabaseTable_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DatabaseTableSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [DatabaseTable!]!
    "Tables downstream of this field"
    downstreamTablesConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: DatabaseTable_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DatabaseTableSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): DatabaseTablesConnection
    "Virtual connection tables downstream of this field"
    downstreamVirtualConnectionTables(
        "Filter by GraphQL field and given value"
        filter: VirtualConnectionTable_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: VirtualConnectionTableSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [VirtualConnectionTable!]!
    "Virtual connection tables downstream of this field"
    downstreamVirtualConnectionTablesConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: VirtualConnectionTable_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: VirtualConnectionTableSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): VirtualConnectionTablesConnection
    "Virtual connections downstream of this field"
    downstreamVirtualConnections(
        "Filter by GraphQL field and given value"
        filter: VirtualConnection_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: VirtualConnectionSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [VirtualConnection!]!
    "Virtual connections downstream of this field"
    downstreamVirtualConnectionsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: VirtualConnection_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: VirtualConnectionSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): VirtualConnectionsConnection
    "Workbooks connected downstream from the field"
    downstreamWorkbooks(
        "Filter by GraphQL field and given value"
        filter: Workbook_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: WorkbookSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Workbook!]
    "Workbooks connected downstream from the field"
    downstreamWorkbooksConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Workbook_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: WorkbookSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): WorkbooksConnection
    "List of fields, if any, that this field references"
    fields(
        "Filter by GraphQL field and given value"
        filter: Field_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: FieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Field!]!
    "List of fields, if any, that this field references"
    fieldsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Field_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: FieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): FieldsConnection
    "Name of folder if the field is in a folder. See https://onlinehelp.tableau.com/current/pro/desktop/en-us/datafields_dwfeatures.html#Organize"
    folderName: String
    "Name internally used to uniquely identify fields"
    fullyQualifiedName: String
    "Unique identifier used by the metadata API.  Not the same as the numeric ID used on server"
    id: ID!
    "True if the field is hidden"
    isHidden: Boolean
    "Name shown in server and desktop clients"
    name: String
    "The bin field that references this field"
    referencedByBins(
        "Filter by GraphQL field and given value"
        filter: BinField_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: BinFieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [BinField]
    "The bin field that references this field"
    referencedByBinsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: BinField_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: BinFieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): BinFieldsConnection
    "The calculated field that references this field"
    referencedByCalculations(
        "Filter by GraphQL field and given value"
        filter: CalculatedField_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: CalculatedFieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [CalculatedField]
    "The calculated field that references this field"
    referencedByCalculationsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: CalculatedField_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: CalculatedFieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): CalculatedFieldsConnection
    "The combined field that references this field"
    referencedByCombinedFields(
        "Filter by GraphQL field and given value"
        filter: CombinedField_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: CombinedFieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [CombinedField]
    "The combined field that references this field"
    referencedByCombinedFieldsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: CombinedField_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: CombinedFieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): CombinedFieldsConnection
    "Thie combined set field that references this field"
    referencedByCombinedSets(
        "Filter by GraphQL field and given value"
        filter: CombinedSetField_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: CombinedSetFieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [CombinedSetField]
    "Thie combined set field that references this field"
    referencedByCombinedSetsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: CombinedSetField_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: CombinedSetFieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): CombinedSetFieldsConnection
    "The field that references this field"
    referencedByFields(
        "Filter by GraphQL field and given value"
        filter: FieldReferencingField_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: FieldReferencingFieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [FieldReferencingField]
    "The field that references this field"
    referencedByFieldsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: FieldReferencingField_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: FieldReferencingFieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): FieldReferencingFieldsConnection
    "The data source filters that include this field"
    referencedByFilters(
        "Filter by GraphQL field and given value"
        filter: DatasourceFilter_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DatasourceFilterSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [DatasourceFilter]
    "The data source filters that include this field"
    referencedByFiltersConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: DatasourceFilter_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DatasourceFilterSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): DatasourceFiltersConnection
    "A flow input field that wraps this field"
    referencedByFlowFieldInputField(
        "Filter by GraphQL field and given value"
        filter: FlowFieldInputField_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: FlowFieldInputFieldSortOrder
    ): [FlowFieldInputField]
    "A flow input field that wraps this field"
    referencedByFlowFieldInputFieldConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: FlowFieldInputField_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: FlowFieldInputFieldSortOrder
    ): FlowFieldInputFieldsConnection
    "A flow output field that wraps this field"
    referencedByFlowFieldOutputField(
        "Filter by GraphQL field and given value"
        filter: FlowFieldOutputField_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: FlowFieldOutputFieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [FlowFieldOutputField]
    "A flow output field that wraps this field"
    referencedByFlowFieldOutputFieldConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: FlowFieldOutputField_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: FlowFieldOutputFieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): FlowFieldOutputFieldsConnection
    "The group field that references this field"
    referencedByGroups(
        "Filter by GraphQL field and given value"
        filter: GroupField_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: GroupFieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [GroupField]
    "The group field that references this field"
    referencedByGroupsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: GroupField_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: GroupFieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): GroupFieldsConnection
    "The hierarchy field that references this field"
    referencedByHierarchies(
        "Filter by GraphQL field and given value"
        filter: HierarchyField_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: HierarchyFieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [HierarchyField]
    "The hierarchy field that references this field"
    referencedByHierarchiesConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: HierarchyField_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: HierarchyFieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): HierarchyFieldsConnection
    "The field that references this remote field"
    referencedByRemoteFields(
        "Filter by GraphQL field and given value"
        filter: DatasourceField_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DatasourceFieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [DatasourceField]
    "The field that references this remote field"
    referencedByRemoteFieldsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: DatasourceField_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DatasourceFieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): DatasourceFieldsConnection
    "The set field that this field references"
    referencedBySets(
        "Filter by GraphQL field and given value"
        filter: SetField_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: SetFieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [SetField]
    "The set field that this field references"
    referencedBySetsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: SetField_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: SetFieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): SetFieldsConnection
    "Sheets that reference this data source field"
    sheets(
        "Filter by GraphQL field and given value"
        filter: Sheet_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: SheetSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Sheet]
    "Sheets that reference this data source field"
    sheetsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Sheet_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: SheetSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): SheetsConnection
    "All upstream columns this field references"
    upstreamColumns(
        "Filter by GraphQL field and given value"
        filter: Column_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: ColumnSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Column]!
    "All upstream columns this field references"
    upstreamColumnsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Column_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: ColumnSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): ColumnsConnection
    "Databases connected upstream from the field"
    upstreamDatabases(
        "Filter by GraphQL field and given value"
        filter: Database_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DatabaseSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Database!]!
    "Databases connected upstream from the field"
    upstreamDatabasesConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Database_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DatabaseSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): DatabasesConnection
    "Datasources connected upstream from the field"
    upstreamDatasources(
        "Filter by GraphQL field and given value"
        filter: PublishedDatasource_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: PublishedDatasourceSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [PublishedDatasource!]!
    "Datasources connected upstream from the field"
    upstreamDatasourcesConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: PublishedDatasource_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: PublishedDatasourceSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): PublishedDatasourcesConnection
    "fields that are upstream of this field"
    upstreamFields(
        "Filter by GraphQL field and given value"
        filter: Field_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: FieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Field]!
    "fields that are upstream of this field"
    upstreamFieldsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Field_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: FieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): FieldsConnection
    "Flows connected upstream from the field"
    upstreamFlows(
        "Filter by GraphQL field and given value"
        filter: Flow_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: FlowSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Flow!]!
    "Flows connected upstream from the field"
    upstreamFlowsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Flow_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: FlowSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): FlowsConnection
    "Tables connected upstream from the field"
    upstreamTables(
        "Filter by GraphQL field and given value"
        filter: DatabaseTable_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DatabaseTableSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [DatabaseTable!]!
    "Tables connected upstream from the field"
    upstreamTablesConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: DatabaseTable_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DatabaseTableSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): DatabaseTablesConnection
    "Virtual connection tables upstream of this field"
    upstreamVirtualConnectionTables(
        "Filter by GraphQL field and given value"
        filter: VirtualConnectionTable_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: VirtualConnectionTableSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [VirtualConnectionTable!]!
    "Virtual connection tables upstream of this field"
    upstreamVirtualConnectionTablesConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: VirtualConnectionTable_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: VirtualConnectionTableSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): VirtualConnectionTablesConnection
    "Virtual connections upstream of this field"
    upstreamVirtualConnections(
        "Filter by GraphQL field and given value"
        filter: VirtualConnection_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: VirtualConnectionSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [VirtualConnection!]!
    "Virtual connections upstream of this field"
    upstreamVirtualConnectionsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: VirtualConnection_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: VirtualConnectionSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): VirtualConnectionsConnection
}

"Connection Type for CombinedSetField"
type CombinedSetFieldsConnection {
    "List of nodes"
    nodes: [CombinedSetField!]!
    "Information for pagination"
    pageInfo: PageInfo!
    "Total number of objects in connection"
    totalCount: Int!
}

" table that represents the result of evaluating a custom SQL query. These \"tables\" are owned by the Tableau data source (embedded or published) which contains the SQL query, so they only exist within that data source."
type CustomSQLTable implements Table {
    "Columns contained in this table"
    columns(
        "Filter by GraphQL field and given value"
        filter: Column_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: ColumnSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Column!]!
    "Columns contained in this table"
    columnsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Column_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: ColumnSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): ColumnsConnection
    "Connection type shortname"
    connectionType: String
    "Database this query is executed on"
    database: Database
    "User modifiable description of this table"
    description: String
    "Dashboards connected to the table"
    downstreamDashboards(
        "Filter by GraphQL field and given value"
        filter: Dashboard_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DashboardSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Dashboard!]!
    "Dashboards connected to the table"
    downstreamDashboardsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Dashboard_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DashboardSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): DashboardsConnection
    "Databases downstream of this table"
    downstreamDatabases(
        "Filter by GraphQL field and given value"
        filter: Database_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DatabaseSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Database!]!
    "Databases downstream of this table"
    downstreamDatabasesConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Database_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DatabaseSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): DatabasesConnection
    "Published datasources connected to the table"
    downstreamDatasources(
        "Filter by GraphQL field and given value"
        filter: PublishedDatasource_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: PublishedDatasourceSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [PublishedDatasource!]!
    "Published datasources connected to the table"
    downstreamDatasourcesConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: PublishedDatasource_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: PublishedDatasourceSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): PublishedDatasourcesConnection
    "Flows downstream of this table"
    downstreamFlows(
        "Filter by GraphQL field and given value"
        filter: Flow_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: FlowSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Flow!]!
    "Flows downstream of this table"
    downstreamFlowsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Flow_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: FlowSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): FlowsConnection
    "Lenses connected downstream from the table"
    downstreamLenses(
        "Filter by GraphQL field and given value"
        filter: Lens_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: LensSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Lens!]!
    "Lenses connected downstream from the table"
    downstreamLensesConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Lens_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: LensSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): LensesConnection
    "Metrics connected downstream from the table"
    downstreamMetrics(
        "Filter by GraphQL field and given value"
        filter: Metric_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: MetricSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Metric!]!
    "Metrics connected downstream from the table"
    downstreamMetricsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Metric_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: MetricSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): MetricsConnection
    "Owners of workbooks and published datasources connected to the table"
    downstreamOwners(
        "Filter by GraphQL field and given value"
        filter: TableauUser_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: TableauUserSortOrder
    ): [TableauUser!]!
    "Owners of workbooks and published datasources connected to the table"
    downstreamOwnersConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: TableauUser_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: TableauUserSortOrder
    ): TableauUsersConnection
    "Sheets connected to the table"
    downstreamSheets(
        "Filter by GraphQL field and given value"
        filter: Sheet_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: SheetSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Sheet!]!
    "Sheets connected to the table"
    downstreamSheetsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Sheet_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: SheetSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): SheetsConnection
    "Tables downstream of this table"
    downstreamTables(
        "Filter by GraphQL field and given value"
        filter: DatabaseTable_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DatabaseTableSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [DatabaseTable!]!
    "Tables downstream of this table"
    downstreamTablesConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: DatabaseTable_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DatabaseTableSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): DatabaseTablesConnection
    "Virtual connection tables downstream of this table"
    downstreamVirtualConnectionTables(
        "Filter by GraphQL field and given value"
        filter: VirtualConnectionTable_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: VirtualConnectionTableSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [VirtualConnectionTable!]!
    "Virtual connection tables downstream of this table"
    downstreamVirtualConnectionTablesConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: VirtualConnectionTable_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: VirtualConnectionTableSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): VirtualConnectionTablesConnection
    "Virtual connection downstream of this table"
    downstreamVirtualConnections(
        "Filter by GraphQL field and given value"
        filter: VirtualConnection_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: VirtualConnectionSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [VirtualConnection!]!
    "Virtual connection downstream of this table"
    downstreamVirtualConnectionsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: VirtualConnection_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: VirtualConnectionSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): VirtualConnectionsConnection
    "Workbooks connected to the table"
    downstreamWorkbooks(
        "Filter by GraphQL field and given value"
        filter: Workbook_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: WorkbookSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Workbook!]!
    "Workbooks connected to the table"
    downstreamWorkbooksConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Workbook_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: WorkbookSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): WorkbooksConnection
    "Unique identifier used by the metadata API.  Not the same as the numeric ID used on server"
    id: ID!
    "A custom SQL tables is always embedded in Tableau content"
    isEmbedded: Boolean
    "True if the query is unsupported by Tableau Catalog, in which case lineage may be incomplete"
    isUnsupportedCustomSql: Boolean
    "Name shown in server and desktop clients"
    name: String
    "Text of the query"
    query: String
    "Actual tables that this query references."
    tables(
        "Filter by GraphQL field and given value"
        filter: DatabaseTable_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DatabaseTableSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [DatabaseTable!]!
    "Actual tables that this query references."
    tablesConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: DatabaseTable_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DatabaseTableSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): DatabaseTablesConnection
    "Databases upstream of this table"
    upstreamDatabases(
        "Filter by GraphQL field and given value"
        filter: Database_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DatabaseSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Database!]!
    "Databases upstream of this table"
    upstreamDatabasesConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Database_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DatabaseSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): DatabasesConnection
    "Datasources upstream of this table"
    upstreamDatasources(
        "Filter by GraphQL field and given value"
        filter: PublishedDatasource_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: PublishedDatasourceSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [PublishedDatasource!]!
    "Datasources upstream of this table"
    upstreamDatasourcesConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: PublishedDatasource_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: PublishedDatasourceSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): PublishedDatasourcesConnection
    "Flows upstream of this table"
    upstreamFlows(
        "Filter by GraphQL field and given value"
        filter: Flow_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: FlowSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Flow!]!
    "Flows upstream of this table"
    upstreamFlowsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Flow_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: FlowSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): FlowsConnection
    "Tables upstream of this table"
    upstreamTables(
        "Filter by GraphQL field and given value"
        filter: DatabaseTable_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DatabaseTableSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [DatabaseTable!]!
    "Tables upstream of this table"
    upstreamTablesConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: DatabaseTable_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DatabaseTableSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): DatabaseTablesConnection
    "Virtual connection tables upstream of this table"
    upstreamVirtualConnectionTables(
        "Filter by GraphQL field and given value"
        filter: VirtualConnectionTable_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: VirtualConnectionTableSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [VirtualConnectionTable!]!
    "Virtual connection tables upstream of this table"
    upstreamVirtualConnectionTablesConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: VirtualConnectionTable_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: VirtualConnectionTableSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): VirtualConnectionTablesConnection
    "Virtual connection tables upstream of this table"
    upstreamVirtualConnections(
        "Filter by GraphQL field and given value"
        filter: VirtualConnection_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: VirtualConnectionSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [VirtualConnection!]!
    "Virtual connection tables upstream of this table"
    upstreamVirtualConnectionsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: VirtualConnection_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: VirtualConnectionSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): VirtualConnectionsConnection
}

"Connection Type for CustomSQLTable"
type CustomSQLTablesConnection {
    "List of nodes"
    nodes: [CustomSQLTable!]!
    "Information for pagination"
    pageInfo: PageInfo!
    "Total number of objects in connection"
    totalCount: Int!
}

" dashboard contained in a published workbook."
type Dashboard implements Taggable & View {
    "AskDataExtensions that are added into this dashboard"
    askDataExtensions(
        "Filter by GraphQL field and given value"
        filter: AskDataExtension_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: AskDataExtensionSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [AskDataExtension!]!
    "AskDataExtensions that are added into this dashboard"
    askDataExtensionsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: AskDataExtension_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: AskDataExtensionSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): AskDataExtensionsConnection
    "Time the dashboard was created"
    createdAt: DateTime!
    "Unique ID for the dashboard generated for and stored within the workbook, survives renames, and is used for internal processes"
    documentViewId: String
    "Unique identifier used by the metadata API.  Not the same as the numeric ID used on server"
    id: ID!
    "Index of view; the order it appears in the workbook"
    index: Int
    "Locally unique identifier used for the REST API on the Tableau Server (Blank if worksheet is hidden in Workbook)"
    luid: String!
    "Name shown in server and desktop clients"
    name: String
    "Server path to dashboard"
    path: String
    "The Metrics that reference this View"
    referencedByMetrics(
        "Filter by GraphQL field and given value"
        filter: Metric_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: MetricSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Metric]
    "The Metrics that reference this View"
    referencedByMetricsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Metric_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: MetricSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): MetricsConnection
    "Sheets referenced by this dashboard"
    sheets(
        "Filter by GraphQL field and given value"
        filter: Sheet_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: SheetSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Sheet!]!
    "Sheets referenced by this dashboard"
    sheetsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Sheet_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: SheetSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): SheetsConnection
    "Tags associated with the view"
    tags(
        "Filter by GraphQL field and given value"
        filter: Tag_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: TagSortOrder
    ): [Tag!]!
    "Tags associated with the view"
    tagsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Tag_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: TagSortOrder
    ): TagsConnection
    "Time the dashboard was updated"
    updatedAt: DateTime!
    "The columns that are upstream of this dashboard"
    upstreamColumns(
        "Filter by GraphQL field and given value"
        filter: Column_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: ColumnSortOrder
    ): [Column]
    "The columns that are upstream of this dashboard"
    upstreamColumnsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Column_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: ColumnSortOrder
    ): ColumnsConnection
    "Data quality warnings upstream from this dashboard"
    upstreamDataQualityWarnings(
        "Filter by GraphQL field and given value"
        filter: DataQualityWarning_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DataQualityWarningSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [DataQualityWarning!]!
    "Data quality warnings upstream from this dashboard"
    upstreamDataQualityWarningsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: DataQualityWarning_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DataQualityWarningSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): DataQualityWarningsConnection
    "The databases that are upstream of this dashboard"
    upstreamDatabases(
        "Filter by GraphQL field and given value"
        filter: Database_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DatabaseSortOrder
    ): [Database]
    "The databases that are upstream of this dashboard"
    upstreamDatabasesConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Database_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DatabaseSortOrder
    ): DatabasesConnection
    "The data sources that are upstream of this dashboard"
    upstreamDatasources(
        "Filter by GraphQL field and given value"
        filter: Datasource_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DatasourceSortOrder
    ): [Datasource]
    "The data sources that are upstream of this dashboard"
    upstreamDatasourcesConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Datasource_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DatasourceSortOrder
    ): DatasourcesConnection
    "The fields that are upstream of this dashboard"
    upstreamFields(
        "Filter by GraphQL field and given value"
        filter: Field_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: FieldSortOrder
    ): [Field]
    "The fields that are upstream of this dashboard"
    upstreamFieldsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Field_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: FieldSortOrder
    ): FieldsConnection
    "The flows that are upstream of this dashboard"
    upstreamFlows(
        "Filter by GraphQL field and given value"
        filter: Flow_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: FlowSortOrder
    ): [Flow]
    "The flows that are upstream of this dashboard"
    upstreamFlowsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Flow_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: FlowSortOrder
    ): FlowsConnection
    "The Lenses that are upstream of this dashboard"
    upstreamLenses(
        "Filter by GraphQL field and given value"
        filter: Lens_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: LensSortOrder
    ): [Lens]
    "The Lenses that are upstream of this dashboard"
    upstreamLensesConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Lens_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: LensSortOrder
    ): LensesConnection
    "Sheet field instances used by the sheets referenced by this dashboard"
    upstreamSheetFieldInstances(
        "Filter by GraphQL field and given value"
        filter: Field_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: FieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Field]
    "Sheet field instances used by the sheets referenced by this dashboard"
    upstreamSheetFieldInstancesConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Field_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: FieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): FieldsConnection
    "The tables that are upstream of this dashboard"
    upstreamTables(
        "Filter by GraphQL field and given value"
        filter: Table_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: TableSortOrder
    ): [Table]
    "The tables that are upstream of this dashboard"
    upstreamTablesConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Table_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: TableSortOrder
    ): TablesConnection
    "The workbook that contains this view"
    workbook: Workbook
}

"Connection Type for Dashboard"
type DashboardsConnection {
    "List of nodes"
    nodes: [Dashboard!]!
    "Information for pagination"
    pageInfo: PageInfo!
    "Total number of objects in connection"
    totalCount: Int!
}

"Connection Type for DataField"
type DataFieldsConnection {
    "List of nodes"
    nodes: [DataField!]!
    "Information for pagination"
    pageInfo: PageInfo!
    "Total number of objects in connection"
    totalCount: Int!
}

" data quality certification associated with a content item"
type DataQualityCertification {
    "The database that contains the data quality certification"
    asset: Certifiable
    "User who last updated this data quality certification"
    author: TableauUser
    "Name of the user who last updated this data quality certification"
    authorDisplayName: String
    "Time the data quality certification was created"
    createdAt: DateTime!
    "Unique identifier used by the metadata API. Not the same as the numeric ID used on server"
    id: ID!
    "True if the data quality certification is active"
    isActive: Boolean!
    "Locally unique identifier used for the REST API on the Tableau Server"
    luid: String!
    "Message of the data quality certification"
    message: String
    "Time the data quality certification was last updated"
    updatedAt: DateTime!
    "Vizportal ID of this data quality certifcation, for use in client-to-server communications"
    vizportalId: String!
}

"Connection Type for DataQualityCertification"
type DataQualityCertificationsConnection {
    "List of nodes"
    nodes: [DataQualityCertification!]!
    "Information for pagination"
    pageInfo: PageInfo!
    "Total number of objects in connection"
    totalCount: Int!
}

" data quality warning associated with a content item"
type DataQualityWarning {
    "The database that contains the data quality warning"
    asset: Warnable
    "User who last updated this data quality warning"
    author: TableauUser
    "Name of the user who last updated this data quality warning"
    authorDisplayName: String
    "Time the data quality warning was created"
    createdAt: DateTime!
    "Unique identifier used by the metadata API. Not the same as the numeric ID used on server"
    id: ID!
    "True if the data quality warning is active"
    isActive: Boolean!
    "True if the data quality warning is severe"
    isSevere: Boolean!
    "Locally unique identifier used for the REST API on the Tableau Server"
    luid: String!
    "Message of the data quality warning"
    message: String
    "Time the data quality warning was last updated"
    updatedAt: DateTime!
    "Vizportal ID of this data quality warning, for use in client-to-server communications"
    vizportalId: String!
    "Type of the data quality warning"
    warningType: String!
}

"Connection Type for DataQualityWarning"
type DataQualityWarningsConnection {
    "List of nodes"
    nodes: [DataQualityWarning!]!
    "Information for pagination"
    pageInfo: PageInfo!
    "Total number of objects in connection"
    totalCount: Int!
}

" database server connection"
type DatabaseServer implements Certifiable & Database & Taggable & Warnable {
    "Notes related to this database being marked as certified"
    certificationNote: String @deprecated(reason: "No longer supported. Use 'dataQualityCertifications'")
    "User who marked this database as certified"
    certifier: TableauUser @deprecated(reason: "No longer supported. Use 'dataQualityCertifications'")
    "Connection type shortname"
    connectionType: String
    "Contact for this database"
    contact: TableauUser
    "The data quality certifications on a database"
    dataQualityCertifications(
        "Filter by GraphQL field and given value"
        filter: DataQualityCertification_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DataQualityCertificationSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [DataQualityCertification!]!
    "The data quality certifications on a database"
    dataQualityCertificationsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: DataQualityCertification_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DataQualityCertificationSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): DataQualityCertificationsConnection
    "The optional data quality warning on a database"
    dataQualityWarning: DataQualityWarning @deprecated(reason: "Use 'dataQualityWarnings'")
    "The data quality warnings on a database"
    dataQualityWarnings(
        "Filter by GraphQL field and given value"
        filter: DataQualityWarning_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DataQualityWarningSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [DataQualityWarning!]!
    "The data quality warnings on a database"
    dataQualityWarningsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: DataQualityWarning_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DataQualityWarningSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): DataQualityWarningsConnection
    "User modifiable description of this database"
    description: String
    "Dashboards connected to the database"
    downstreamDashboards(
        "Filter by GraphQL field and given value"
        filter: Dashboard_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DashboardSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Dashboard!]!
    "Dashboards connected to the database"
    downstreamDashboardsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Dashboard_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DashboardSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): DashboardsConnection
    "Databases downstream of this database"
    downstreamDatabases(
        "Filter by GraphQL field and given value"
        filter: Database_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DatabaseSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Database!]!
    "Databases downstream of this database"
    downstreamDatabasesConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Database_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DatabaseSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): DatabasesConnection
    "Published datasources connected to the database"
    downstreamDatasources(
        "Filter by GraphQL field and given value"
        filter: PublishedDatasource_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: PublishedDatasourceSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [PublishedDatasource!]!
    "Published datasources connected to the database"
    downstreamDatasourcesConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: PublishedDatasource_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: PublishedDatasourceSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): PublishedDatasourcesConnection
    "Flows downstream of this database"
    downstreamFlows(
        "Filter by GraphQL field and given value"
        filter: Flow_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: FlowSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Flow!]!
    "Flows downstream of this database"
    downstreamFlowsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Flow_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: FlowSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): FlowsConnection
    "Lenses connected to the database"
    downstreamLenses(
        "Filter by GraphQL field and given value"
        filter: Lens_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: LensSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Lens!]!
    "Lenses connected to the database"
    downstreamLensesConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Lens_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: LensSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): LensesConnection
    "Metrics connected to the database"
    downstreamMetrics(
        "Filter by GraphQL field and given value"
        filter: Metric_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: MetricSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Metric!]!
    "Metrics connected to the database"
    downstreamMetricsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Metric_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: MetricSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): MetricsConnection
    "Owners connected to the database"
    downstreamOwners(
        "Filter by GraphQL field and given value"
        filter: TableauUser_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: TableauUserSortOrder
    ): [TableauUser!]!
    "Owners connected to the database"
    downstreamOwnersConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: TableauUser_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: TableauUserSortOrder
    ): TableauUsersConnection
    "Sheets connected to the database"
    downstreamSheets(
        "Filter by GraphQL field and given value"
        filter: Sheet_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: SheetSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Sheet!]!
    "Sheets connected to the database"
    downstreamSheetsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Sheet_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: SheetSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): SheetsConnection
    "Tables downstream of this database"
    downstreamTables(
        "Filter by GraphQL field and given value"
        filter: DatabaseTable_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DatabaseTableSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [DatabaseTable!]!
    "Tables downstream of this database"
    downstreamTablesConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: DatabaseTable_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DatabaseTableSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): DatabaseTablesConnection
    "Virtual connection tables downstream of this database"
    downstreamVirtualConnectionTables(
        "Filter by GraphQL field and given value"
        filter: VirtualConnectionTable_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: VirtualConnectionTableSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [VirtualConnectionTable!]!
    "Virtual connection tables downstream of this database"
    downstreamVirtualConnectionTablesConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: VirtualConnectionTable_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: VirtualConnectionTableSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): VirtualConnectionTablesConnection
    "Virtual connection tables downstream of this database"
    downstreamVirtualConnections(
        "Filter by GraphQL field and given value"
        filter: VirtualConnection_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: VirtualConnectionSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [VirtualConnection!]!
    "Virtual connection tables downstream of this database"
    downstreamVirtualConnectionsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: VirtualConnection_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: VirtualConnectionSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): VirtualConnectionsConnection
    "Workbooks connected to the database"
    downstreamWorkbooks(
        "Filter by GraphQL field and given value"
        filter: Workbook_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: WorkbookSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Workbook!]!
    "Workbooks connected to the database"
    downstreamWorkbooksConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Workbook_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: WorkbookSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): WorkbooksConnection
    "optional Extended Connection info for specific connection types, eg hive for Cloudera Hadoop"
    extendedConnectionType: String
    "True if the database has an active data quality warning"
    hasActiveWarning: Boolean!
    "Hostname of the database"
    hostName: String
    "Unique identifier used by the metadata API.  Not the same as the numeric ID used on server"
    id: ID!
    "True if this database contains an active data quality certification"
    isCertified: Boolean!
    "True if this database has its permission locked"
    isControlledPermissionsEnabled: Boolean
    "A database server is never embedded in Tableau content"
    isEmbedded: Boolean
    "True if this database has been grouped with other databases"
    isGrouped: Boolean
    "Locally unique identifier used for the REST API on the Tableau Server"
    luid: String!
    "Name shown in server and desktop clients"
    name: String
    "Port number of the database connection"
    port: Int
    "The name of the project in which the table is visible. Will be empty if the table is not in a project."
    projectName: String
    "The ID of the project in which the table is visible. Will be empty if the table is not in a project."
    projectVizportalUrlId: String
    "The custom SQL queries that reference this database"
    referencedByQueries(
        "Filter by GraphQL field and given value"
        filter: CustomSQLTable_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: CustomSQLTableSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [CustomSQLTable]
    "The custom SQL queries that reference this database"
    referencedByQueriesConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: CustomSQLTable_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: CustomSQLTableSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): CustomSQLTablesConnection
    "service string for certain datasources eg Oracle"
    service: String
    "Tables belonging to this database"
    tables(
        "Filter by GraphQL field and given value"
        filter: DatabaseTable_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DatabaseTableSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [DatabaseTable]
    "Tables belonging to this database"
    tablesConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: DatabaseTable_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DatabaseTableSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): DatabaseTablesConnection
    "Tags associated with the database"
    tags(
        "Filter by GraphQL field and given value"
        filter: Tag_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: TagSortOrder
    ): [Tag!]!
    "Tags associated with the database"
    tagsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Tag_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: TagSortOrder
    ): TagsConnection
    "Data quality warnings upstream from this database"
    upstreamDataQualityWarnings(
        "Filter by GraphQL field and given value"
        filter: DataQualityWarning_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DataQualityWarningSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [DataQualityWarning!]!
    "Data quality warnings upstream from this database"
    upstreamDataQualityWarningsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: DataQualityWarning_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DataQualityWarningSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): DataQualityWarningsConnection
    "Databases upstream of this database"
    upstreamDatabases(
        "Filter by GraphQL field and given value"
        filter: Database_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DatabaseSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Database!]!
    "Databases upstream of this database"
    upstreamDatabasesConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Database_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DatabaseSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): DatabasesConnection
    "Datasources upstream of this database"
    upstreamDatasources(
        "Filter by GraphQL field and given value"
        filter: PublishedDatasource_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: PublishedDatasourceSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [PublishedDatasource!]!
    "Datasources upstream of this database"
    upstreamDatasourcesConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: PublishedDatasource_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: PublishedDatasourceSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): PublishedDatasourcesConnection
    "Flows upstream of this database"
    upstreamFlows(
        "Filter by GraphQL field and given value"
        filter: Flow_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: FlowSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Flow!]!
    "Flows upstream of this database"
    upstreamFlowsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Flow_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: FlowSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): FlowsConnection
    "Tables upstream of this database"
    upstreamTables(
        "Filter by GraphQL field and given value"
        filter: DatabaseTable_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DatabaseTableSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [DatabaseTable!]!
    "Tables upstream of this database"
    upstreamTablesConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: DatabaseTable_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DatabaseTableSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): DatabaseTablesConnection
    "Virtual connection tables upstream of this database"
    upstreamVirtualConnectionTables(
        "Filter by GraphQL field and given value"
        filter: VirtualConnectionTable_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: VirtualConnectionTableSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [VirtualConnectionTable!]!
    "Virtual connection tables upstream of this database"
    upstreamVirtualConnectionTablesConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: VirtualConnectionTable_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: VirtualConnectionTableSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): VirtualConnectionTablesConnection
    "Virtual connection tables upstream of this database"
    upstreamVirtualConnections(
        "Filter by GraphQL field and given value"
        filter: VirtualConnection_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: VirtualConnectionSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [VirtualConnection!]!
    "Virtual connection tables upstream of this database"
    upstreamVirtualConnectionsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: VirtualConnection_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: VirtualConnectionSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): VirtualConnectionsConnection
    "Vizportal ID of this database, for use in client-to-server communications"
    vizportalId: String!
}

"Connection Type for DatabaseServer"
type DatabaseServersConnection {
    "List of nodes"
    nodes: [DatabaseServer!]!
    "Information for pagination"
    pageInfo: PageInfo!
    "Total number of objects in connection"
    totalCount: Int!
}

" table that is contained in a database"
type DatabaseTable implements Certifiable & Table & Taggable & Warnable {
    "Notes related to the database table being marked as certified"
    certificationNote: String @deprecated(reason: "No longer supported. Use 'dataQualityCertifications'")
    "User who marked this table as certified"
    certifier: TableauUser @deprecated(reason: "No longer supported. Use 'dataQualityCertifications'")
    "Columns contained in this table"
    columns(
        "Filter by GraphQL field and given value"
        filter: Column_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: ColumnSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Column!]!
    "Columns contained in this table"
    columnsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Column_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: ColumnSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): ColumnsConnection
    "Connection type of parent database"
    connectionType: String
    "Contact for this table"
    contact: TableauUser
    "The data quality certifications on a table"
    dataQualityCertifications(
        "Filter by GraphQL field and given value"
        filter: DataQualityCertification_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DataQualityCertificationSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [DataQualityCertification!]!
    "The data quality certifications on a table"
    dataQualityCertificationsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: DataQualityCertification_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DataQualityCertificationSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): DataQualityCertificationsConnection
    "The optional data quality warning on a table"
    dataQualityWarning: DataQualityWarning @deprecated(reason: "Use 'dataQualityWarnings'")
    "The data quality warnings on a table"
    dataQualityWarnings(
        "Filter by GraphQL field and given value"
        filter: DataQualityWarning_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DataQualityWarningSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [DataQualityWarning!]!
    "The data quality warnings on a table"
    dataQualityWarningsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: DataQualityWarning_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DataQualityWarningSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): DataQualityWarningsConnection
    "The database to which this table belongs"
    database: Database
    "User modifiable description of this table"
    description: String
    "Dashboards connected downstream from the table"
    downstreamDashboards(
        "Filter by GraphQL field and given value"
        filter: Dashboard_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DashboardSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Dashboard!]!
    "Dashboards connected downstream from the table"
    downstreamDashboardsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Dashboard_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DashboardSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): DashboardsConnection
    "Databases downstream of this table"
    downstreamDatabases(
        "Filter by GraphQL field and given value"
        filter: Database_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DatabaseSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Database!]!
    "Databases downstream of this table"
    downstreamDatabasesConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Database_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DatabaseSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): DatabasesConnection
    "Published datasources connected to the table"
    downstreamDatasources(
        "Filter by GraphQL field and given value"
        filter: PublishedDatasource_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: PublishedDatasourceSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [PublishedDatasource!]!
    "Published datasources connected to the table"
    downstreamDatasourcesConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: PublishedDatasource_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: PublishedDatasourceSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): PublishedDatasourcesConnection
    "Flows downstream of this table"
    downstreamFlows(
        "Filter by GraphQL field and given value"
        filter: Flow_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: FlowSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Flow!]!
    "Flows downstream of this table"
    downstreamFlowsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Flow_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: FlowSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): FlowsConnection
    "Lenses connected downstream from the table"
    downstreamLenses(
        "Filter by GraphQL field and given value"
        filter: Lens_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: LensSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Lens!]!
    "Lenses connected downstream from the table"
    downstreamLensesConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Lens_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: LensSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): LensesConnection
    "Metrics connected downstream from the table"
    downstreamMetrics(
        "Filter by GraphQL field and given value"
        filter: Metric_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: MetricSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Metric!]!
    "Metrics connected downstream from the table"
    downstreamMetricsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Metric_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: MetricSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): MetricsConnection
    "Owners of workbooks and published datasources connected to the table"
    downstreamOwners(
        "Filter by GraphQL field and given value"
        filter: TableauUser_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: TableauUserSortOrder
    ): [TableauUser!]!
    "Owners of workbooks and published datasources connected to the table"
    downstreamOwnersConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: TableauUser_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: TableauUserSortOrder
    ): TableauUsersConnection
    "Sheets connected to the table"
    downstreamSheets(
        "Filter by GraphQL field and given value"
        filter: Sheet_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: SheetSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Sheet!]!
    "Sheets connected to the table"
    downstreamSheetsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Sheet_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: SheetSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): SheetsConnection
    "Tables downstream of this table"
    downstreamTables(
        "Filter by GraphQL field and given value"
        filter: DatabaseTable_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DatabaseTableSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [DatabaseTable!]!
    "Tables downstream of this table"
    downstreamTablesConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: DatabaseTable_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DatabaseTableSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): DatabaseTablesConnection
    "Virtual connection tables downstream from this table"
    downstreamVirtualConnectionTables(
        "Filter by GraphQL field and given value"
        filter: VirtualConnectionTable_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: VirtualConnectionTableSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [VirtualConnectionTable!]!
    "Virtual connection tables downstream from this table"
    downstreamVirtualConnectionTablesConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: VirtualConnectionTable_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: VirtualConnectionTableSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): VirtualConnectionTablesConnection
    "Virtual connections downstream from this table"
    downstreamVirtualConnections(
        "Filter by GraphQL field and given value"
        filter: VirtualConnection_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: VirtualConnectionSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [VirtualConnection!]!
    "Virtual connections downstream from this table"
    downstreamVirtualConnectionsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: VirtualConnection_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: VirtualConnectionSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): VirtualConnectionsConnection
    "Workbooks connected to the table"
    downstreamWorkbooks(
        "Filter by GraphQL field and given value"
        filter: Workbook_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: WorkbookSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Workbook!]!
    "Workbooks connected to the table"
    downstreamWorkbooksConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Workbook_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: WorkbookSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): WorkbooksConnection
    "Fully qualified table name"
    fullName: String
    "True if the table has an active data quality warning"
    hasActiveWarning: Boolean!
    "Unique identifier used by the metadata API.  Not the same as the numeric ID used on server"
    id: ID!
    "True if this table contains an active data quality certification"
    isCertified: Boolean!
    "True if this table is embedded in Tableau content"
    isEmbedded: Boolean
    "Locally unique identifier used for the REST API on the Tableau Server"
    luid: String!
    "Name shown in server and desktop clients"
    name: String
    "The name of the project in which the table is visible. Will be empty if the table is not in a project."
    projectName: String
    "The ID of the project in which the table is visible. Will be empty if the table is not in a project."
    projectVizportalUrlId: String
    "The custom SQL queries that reference this table"
    referencedByQueries(
        "Filter by GraphQL field and given value"
        filter: CustomSQLTable_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: CustomSQLTableSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [CustomSQLTable]
    "The custom SQL queries that reference this table"
    referencedByQueriesConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: CustomSQLTable_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: CustomSQLTableSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): CustomSQLTablesConnection
    """

    Name of table schema.

    Note: For some databases, such as Amazon Athena and Exasol, the schema attribute may not return the correct schema name for the table. For more information, see https://help.tableau.com/current/api/metadata_api/en-us/docs/meta_api_model.html#schema_attribute.
    """
    schema: String
    "Tags associated with the table"
    tags(
        "Filter by GraphQL field and given value"
        filter: Tag_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: TagSortOrder
    ): [Tag!]!
    "Tags associated with the table"
    tagsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Tag_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: TagSortOrder
    ): TagsConnection
    "Data quality warnings upstream from this table"
    upstreamDataQualityWarnings(
        "Filter by GraphQL field and given value"
        filter: DataQualityWarning_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DataQualityWarningSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [DataQualityWarning!]!
    "Data quality warnings upstream from this table"
    upstreamDataQualityWarningsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: DataQualityWarning_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DataQualityWarningSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): DataQualityWarningsConnection
    "Databases upstream of this table"
    upstreamDatabases(
        "Filter by GraphQL field and given value"
        filter: Database_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DatabaseSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Database!]!
    "Databases upstream of this table"
    upstreamDatabasesConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Database_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DatabaseSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): DatabasesConnection
    "Datasources upstream of this table"
    upstreamDatasources(
        "Filter by GraphQL field and given value"
        filter: PublishedDatasource_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: PublishedDatasourceSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [PublishedDatasource!]!
    "Datasources upstream of this table"
    upstreamDatasourcesConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: PublishedDatasource_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: PublishedDatasourceSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): PublishedDatasourcesConnection
    "Flows upstream of this table"
    upstreamFlows(
        "Filter by GraphQL field and given value"
        filter: Flow_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: FlowSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Flow!]!
    "Flows upstream of this table"
    upstreamFlowsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Flow_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: FlowSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): FlowsConnection
    "Tables upstream of this table"
    upstreamTables(
        "Filter by GraphQL field and given value"
        filter: DatabaseTable_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DatabaseTableSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [DatabaseTable!]!
    "Tables upstream of this table"
    upstreamTablesConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: DatabaseTable_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DatabaseTableSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): DatabaseTablesConnection
    "Virtual connection tables upstream from this table"
    upstreamVirtualConnectionTables(
        "Filter by GraphQL field and given value"
        filter: VirtualConnectionTable_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: VirtualConnectionTableSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [VirtualConnectionTable!]!
    "Virtual connection tables upstream from this table"
    upstreamVirtualConnectionTablesConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: VirtualConnectionTable_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: VirtualConnectionTableSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): VirtualConnectionTablesConnection
    "Virtual connections upstream from this table"
    upstreamVirtualConnections(
        "Filter by GraphQL field and given value"
        filter: VirtualConnection_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: VirtualConnectionSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [VirtualConnection!]!
    "Virtual connections upstream from this table"
    upstreamVirtualConnectionsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: VirtualConnection_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: VirtualConnectionSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): VirtualConnectionsConnection
    "Vizportal ID of this table, for use in client-to-server communications"
    vizportalId: String!
}

"Connection Type for DatabaseTable"
type DatabaseTablesConnection {
    "List of nodes"
    nodes: [DatabaseTable!]!
    "Information for pagination"
    pageInfo: PageInfo!
    "Total number of objects in connection"
    totalCount: Int!
}

"Connection Type for Database"
type DatabasesConnection {
    "List of nodes"
    nodes: [Database!]!
    "Information for pagination"
    pageInfo: PageInfo!
    "Total number of objects in connection"
    totalCount: Int!
}

"GraphQL type for a data source field. Data source fields can only exist in embedded data sources which connect to a published data source. A data source field is an embedded data source's 'layered' representation of a field that already exists in the published data source and is mostly a copy of the field in the published data source. Data source fields can get their own descriptions and renames local to the embedded data source, but cannot otherwise be modified in the embedded data source."
type DatasourceField implements Field & Node {
    "Data source that contains this field"
    datasource: Datasource
    "List of lens fields which are derived from this field"
    derivedLensFields(
        "Filter by GraphQL field and given value"
        filter: LensField_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: LensFieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [LensField]
    "List of lens fields which are derived from this field"
    derivedLensFieldsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: LensField_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: LensFieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): LensFieldsConnection
    "Description of field shown in server and desktop clients"
    description: String
    "description that is shown in the Tableau UI"
    descriptionInherited(
        "Method for selecting inherited value"
        inheritanceType: InheritanceType,
        "Option to select how to apply permissions. By default it is OBFUSCATE_RESULTS"
        permissionMode: PermissionMode
    ): [InheritedStringResult]
    "Sheets that reference this field"
    directSheets(
        "Filter by GraphQL field and given value"
        filter: Sheet_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: SheetSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Sheet]
    "Sheets that reference this field"
    directSheetsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Sheet_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: SheetSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): SheetsConnection
    "Columns downstream of this field"
    downstreamColumns(
        "Filter by GraphQL field and given value"
        filter: Column_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: ColumnSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Column!]!
    "Columns downstream of this field"
    downstreamColumnsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Column_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: ColumnSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): ColumnsConnection
    "Dashboards connected downstream from the field"
    downstreamDashboards(
        "Filter by GraphQL field and given value"
        filter: Dashboard_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DashboardSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Dashboard!]!
    "Dashboards connected downstream from the field"
    downstreamDashboardsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Dashboard_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DashboardSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): DashboardsConnection
    "Databases downstream of this field"
    downstreamDatabases(
        "Filter by GraphQL field and given value"
        filter: Database_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DatabaseSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Database!]!
    "Databases downstream of this field"
    downstreamDatabasesConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Database_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DatabaseSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): DatabasesConnection
    "Datasources connected downstream from this field"
    downstreamDatasources(
        "Filter by GraphQL field and given value"
        filter: PublishedDatasource_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: PublishedDatasourceSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [PublishedDatasource!]
    "Datasources connected downstream from this field"
    downstreamDatasourcesConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: PublishedDatasource_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: PublishedDatasourceSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): PublishedDatasourcesConnection
    "downstream fields that reference this field"
    downstreamFields(
        "Filter by GraphQL field and given value"
        filter: Field_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: FieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Field!]!
    "downstream fields that reference this field"
    downstreamFieldsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Field_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: FieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): FieldsConnection
    "Flows downstream of this field"
    downstreamFlows(
        "Filter by GraphQL field and given value"
        filter: Flow_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: FlowSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Flow!]!
    "Flows downstream of this field"
    downstreamFlowsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Flow_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: FlowSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): FlowsConnection
    "Lenses connected downstream from this field"
    downstreamLenses(
        "Filter by GraphQL field and given value"
        filter: Lens_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: LensSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Lens!]
    "Lenses connected downstream from this field"
    downstreamLensesConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Lens_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: LensSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): LensesConnection
    "Metrics connected downstream from the field"
    downstreamMetrics(
        "Filter by GraphQL field and given value"
        filter: Metric_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: MetricSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Metric!]
    "Metrics connected downstream from the field"
    downstreamMetricsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Metric_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: MetricSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): MetricsConnection
    "Workbook owners (authors) connected downstream from the field"
    downstreamOwners(
        "Filter by GraphQL field and given value"
        filter: TableauUser_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: TableauUserSortOrder
    ): [TableauUser!]
    "Workbook owners (authors) connected downstream from the field"
    downstreamOwnersConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: TableauUser_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: TableauUserSortOrder
    ): TableauUsersConnection
    "Sheets connected downstream from the field"
    downstreamSheets(
        "Filter by GraphQL field and given value"
        filter: Sheet_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: SheetSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Sheet!]!
    "Sheets connected downstream from the field"
    downstreamSheetsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Sheet_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: SheetSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): SheetsConnection
    "Tables downstream of this field"
    downstreamTables(
        "Filter by GraphQL field and given value"
        filter: DatabaseTable_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DatabaseTableSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [DatabaseTable!]!
    "Tables downstream of this field"
    downstreamTablesConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: DatabaseTable_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DatabaseTableSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): DatabaseTablesConnection
    "Virtual connection tables downstream of this field"
    downstreamVirtualConnectionTables(
        "Filter by GraphQL field and given value"
        filter: VirtualConnectionTable_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: VirtualConnectionTableSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [VirtualConnectionTable!]!
    "Virtual connection tables downstream of this field"
    downstreamVirtualConnectionTablesConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: VirtualConnectionTable_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: VirtualConnectionTableSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): VirtualConnectionTablesConnection
    "Virtual connections downstream of this field"
    downstreamVirtualConnections(
        "Filter by GraphQL field and given value"
        filter: VirtualConnection_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: VirtualConnectionSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [VirtualConnection!]!
    "Virtual connections downstream of this field"
    downstreamVirtualConnectionsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: VirtualConnection_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: VirtualConnectionSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): VirtualConnectionsConnection
    "Workbooks connected downstream from the field"
    downstreamWorkbooks(
        "Filter by GraphQL field and given value"
        filter: Workbook_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: WorkbookSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Workbook!]
    "Workbooks connected downstream from the field"
    downstreamWorkbooksConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Workbook_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: WorkbookSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): WorkbooksConnection
    "Name of folder if the field is in a folder. See https://onlinehelp.tableau.com/current/pro/desktop/en-us/datafields_dwfeatures.html#Organize"
    folderName: String
    "Name internally used to uniquely identify fields"
    fullyQualifiedName: String
    "Unique identifier used by the metadata API.  Not the same as the numeric ID used on server"
    id: ID!
    "True if the field is hidden"
    isHidden: Boolean
    "Name shown in server and desktop clients"
    name: String
    "The bin field that references this field"
    referencedByBins(
        "Filter by GraphQL field and given value"
        filter: BinField_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: BinFieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [BinField]
    "The bin field that references this field"
    referencedByBinsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: BinField_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: BinFieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): BinFieldsConnection
    "The calculated field that references this field"
    referencedByCalculations(
        "Filter by GraphQL field and given value"
        filter: CalculatedField_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: CalculatedFieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [CalculatedField]
    "The calculated field that references this field"
    referencedByCalculationsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: CalculatedField_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: CalculatedFieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): CalculatedFieldsConnection
    "The combined field that references this field"
    referencedByCombinedFields(
        "Filter by GraphQL field and given value"
        filter: CombinedField_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: CombinedFieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [CombinedField]
    "The combined field that references this field"
    referencedByCombinedFieldsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: CombinedField_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: CombinedFieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): CombinedFieldsConnection
    "Thie combined set field that references this field"
    referencedByCombinedSets(
        "Filter by GraphQL field and given value"
        filter: CombinedSetField_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: CombinedSetFieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [CombinedSetField]
    "Thie combined set field that references this field"
    referencedByCombinedSetsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: CombinedSetField_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: CombinedSetFieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): CombinedSetFieldsConnection
    "The field that references this field"
    referencedByFields(
        "Filter by GraphQL field and given value"
        filter: FieldReferencingField_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: FieldReferencingFieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [FieldReferencingField]
    "The field that references this field"
    referencedByFieldsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: FieldReferencingField_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: FieldReferencingFieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): FieldReferencingFieldsConnection
    "The data source filters that include this field"
    referencedByFilters(
        "Filter by GraphQL field and given value"
        filter: DatasourceFilter_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DatasourceFilterSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [DatasourceFilter]
    "The data source filters that include this field"
    referencedByFiltersConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: DatasourceFilter_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DatasourceFilterSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): DatasourceFiltersConnection
    "A flow input field that wraps this field"
    referencedByFlowFieldInputField(
        "Filter by GraphQL field and given value"
        filter: FlowFieldInputField_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: FlowFieldInputFieldSortOrder
    ): [FlowFieldInputField]
    "A flow input field that wraps this field"
    referencedByFlowFieldInputFieldConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: FlowFieldInputField_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: FlowFieldInputFieldSortOrder
    ): FlowFieldInputFieldsConnection
    "A flow output field that wraps this field"
    referencedByFlowFieldOutputField(
        "Filter by GraphQL field and given value"
        filter: FlowFieldOutputField_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: FlowFieldOutputFieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [FlowFieldOutputField]
    "A flow output field that wraps this field"
    referencedByFlowFieldOutputFieldConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: FlowFieldOutputField_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: FlowFieldOutputFieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): FlowFieldOutputFieldsConnection
    "The group field that references this field"
    referencedByGroups(
        "Filter by GraphQL field and given value"
        filter: GroupField_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: GroupFieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [GroupField]
    "The group field that references this field"
    referencedByGroupsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: GroupField_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: GroupFieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): GroupFieldsConnection
    "The hierarchy field that references this field"
    referencedByHierarchies(
        "Filter by GraphQL field and given value"
        filter: HierarchyField_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: HierarchyFieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [HierarchyField]
    "The hierarchy field that references this field"
    referencedByHierarchiesConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: HierarchyField_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: HierarchyFieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): HierarchyFieldsConnection
    "The field that references this remote field"
    referencedByRemoteFields(
        "Filter by GraphQL field and given value"
        filter: DatasourceField_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DatasourceFieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [DatasourceField]
    "The field that references this remote field"
    referencedByRemoteFieldsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: DatasourceField_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DatasourceFieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): DatasourceFieldsConnection
    "The set field that this field references"
    referencedBySets(
        "Filter by GraphQL field and given value"
        filter: SetField_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: SetFieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [SetField]
    "The set field that this field references"
    referencedBySetsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: SetField_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: SetFieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): SetFieldsConnection
    "Reference to a field from a published data source. This property only exists on Fields that are in an embedded data source with a connection to a published data source."
    remoteField: Field
    "Sheets that reference this data source field"
    sheets(
        "Filter by GraphQL field and given value"
        filter: Sheet_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: SheetSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Sheet]
    "Sheets that reference this data source field"
    sheetsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Sheet_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: SheetSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): SheetsConnection
    "All upstream columns this field references"
    upstreamColumns(
        "Filter by GraphQL field and given value"
        filter: Column_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: ColumnSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Column]!
    "All upstream columns this field references"
    upstreamColumnsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Column_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: ColumnSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): ColumnsConnection
    "Databases connected upstream from the field"
    upstreamDatabases(
        "Filter by GraphQL field and given value"
        filter: Database_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DatabaseSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Database!]!
    "Databases connected upstream from the field"
    upstreamDatabasesConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Database_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DatabaseSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): DatabasesConnection
    "Datasources connected upstream from the field"
    upstreamDatasources(
        "Filter by GraphQL field and given value"
        filter: PublishedDatasource_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: PublishedDatasourceSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [PublishedDatasource!]!
    "Datasources connected upstream from the field"
    upstreamDatasourcesConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: PublishedDatasource_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: PublishedDatasourceSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): PublishedDatasourcesConnection
    "fields that are upstream of this field"
    upstreamFields(
        "Filter by GraphQL field and given value"
        filter: Field_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: FieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Field]!
    "fields that are upstream of this field"
    upstreamFieldsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Field_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: FieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): FieldsConnection
    "Flows connected upstream from the field"
    upstreamFlows(
        "Filter by GraphQL field and given value"
        filter: Flow_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: FlowSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Flow!]!
    "Flows connected upstream from the field"
    upstreamFlowsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Flow_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: FlowSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): FlowsConnection
    "Tables connected upstream from the field"
    upstreamTables(
        "Filter by GraphQL field and given value"
        filter: DatabaseTable_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DatabaseTableSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [DatabaseTable!]!
    "Tables connected upstream from the field"
    upstreamTablesConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: DatabaseTable_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DatabaseTableSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): DatabaseTablesConnection
    "Virtual connection tables upstream of this field"
    upstreamVirtualConnectionTables(
        "Filter by GraphQL field and given value"
        filter: VirtualConnectionTable_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: VirtualConnectionTableSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [VirtualConnectionTable!]!
    "Virtual connection tables upstream of this field"
    upstreamVirtualConnectionTablesConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: VirtualConnectionTable_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: VirtualConnectionTableSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): VirtualConnectionTablesConnection
    "Virtual connections upstream of this field"
    upstreamVirtualConnections(
        "Filter by GraphQL field and given value"
        filter: VirtualConnection_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: VirtualConnectionSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [VirtualConnection!]!
    "Virtual connections upstream of this field"
    upstreamVirtualConnectionsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: VirtualConnection_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: VirtualConnectionSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): VirtualConnectionsConnection
}

"Connection Type for DatasourceField"
type DatasourceFieldsConnection {
    "List of nodes"
    nodes: [DatasourceField!]!
    "Information for pagination"
    pageInfo: PageInfo!
    "Total number of objects in connection"
    totalCount: Int!
}

"""

Data source filters include/exclude certain values from a single field to filter out rows of data from this data source. For data security reasons, we don't track the values used in the filter in this schema, but you can see the field used in the filter.

See https://onlinehelp.tableau.com/current/pro/desktop/en-us/filtering_datasource.html
"""
type DatasourceFilter {
    "Data source that contains this datasource filter"
    datasource: Datasource
    "Field used by this filter."
    field: Field!
    "Unique identifier used by the metadata API.  Not the same as the numeric ID used on server"
    id: ID!
}

"Connection Type for DatasourceFilter"
type DatasourceFiltersConnection {
    "List of nodes"
    nodes: [DatasourceFilter!]!
    "Information for pagination"
    pageInfo: PageInfo!
    "Total number of objects in connection"
    totalCount: Int!
}

"Connection Type for Datasource"
type DatasourcesConnection {
    "List of nodes"
    nodes: [Datasource!]!
    "Information for pagination"
    pageInfo: PageInfo!
    "Total number of objects in connection"
    totalCount: Int!
}

" data source embedded in a workbook"
type EmbeddedDatasource implements Datasource {
    "True if the datasource contains unsupported custom SQL, in which case lineage may be incomplete"
    containsUnsupportedCustomSql: Boolean
    "Time the datasource was created. Available in Tableau Cloud June 2022 / Server 2022.3 and later."
    createdAt: DateTime
    "Data source filters contained in this data source"
    datasourceFilters(
        "Filter by GraphQL field and given value"
        filter: DatasourceFilter_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DatasourceFilterSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [DatasourceFilter!]!
    "Data source filters contained in this data source"
    datasourceFiltersConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: DatasourceFilter_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DatasourceFilterSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): DatasourceFiltersConnection
    "Dashboards downstream from this data source"
    downstreamDashboards(
        "Filter by GraphQL field and given value"
        filter: Dashboard_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DashboardSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Dashboard!]!
    "Dashboards downstream from this data source"
    downstreamDashboardsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Dashboard_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DashboardSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): DashboardsConnection
    "Flows downstream from this data source"
    downstreamFlows(
        "Filter by GraphQL field and given value"
        filter: Flow_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: FlowSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Flow!]!
    "Flows downstream from this data source"
    downstreamFlowsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Flow_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: FlowSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): FlowsConnection
    "Workbook owners downstream from this data source"
    downstreamOwners(
        "Filter by GraphQL field and given value"
        filter: TableauUser_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: TableauUserSortOrder
    ): [TableauUser!]!
    "Workbook owners downstream from this data source"
    downstreamOwnersConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: TableauUser_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: TableauUserSortOrder
    ): TableauUsersConnection
    "Sheets downstream from this data source"
    downstreamSheets(
        "Filter by GraphQL field and given value"
        filter: Sheet_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: SheetSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Sheet!]!
    "Sheets downstream from this data source"
    downstreamSheetsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Sheet_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: SheetSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): SheetsConnection
    "Workbooks downstream from this data source"
    downstreamWorkbooks(
        "Filter by GraphQL field and given value"
        filter: Workbook_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: WorkbookSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Workbook!]!
    "Workbooks downstream from this data source"
    downstreamWorkbooksConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Workbook_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: WorkbookSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): WorkbooksConnection
    "Time an extract was last incrementally updated"
    extractLastIncrementalUpdateTime: DateTime
    "Time an extract was last fully refreshed"
    extractLastRefreshTime: DateTime
    "Time an extract was last updated by either a full refresh, incremental update, or creation"
    extractLastUpdateTime: DateTime
    "Fields, usually measures or dimensions, contained in the data source"
    fields(
        "Filter by GraphQL field and given value"
        filter: Field_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: FieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Field!]!
    "Fields, usually measures or dimensions, contained in the data source"
    fieldsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Field_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: FieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): FieldsConnection
    "True if datasource contains extracted data"
    hasExtracts: Boolean
    "True if data source contains a formula that involves a user function (for example, USERNAME or ISMEMBEROF)"
    hasUserReference: Boolean
    "Unique identifier used by the metadata API.  Not the same as the numeric ID used on server"
    id: ID!
    "The lenses derived from this datasource"
    lenses(
        "Filter by GraphQL field and given value"
        filter: Lens_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: LensSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Lens]
    "The lenses derived from this datasource"
    lensesConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Lens_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: LensSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): LensesConnection
    "Name shown in server and desktop clients"
    name: String
    "Parent published data sources of this embedded data source"
    parentPublishedDatasources(
        "Filter by GraphQL field and given value"
        filter: PublishedDatasource_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: PublishedDatasourceSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [PublishedDatasource!]!
    "Parent published data sources of this embedded data source"
    parentPublishedDatasourcesConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: PublishedDatasource_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: PublishedDatasourceSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): PublishedDatasourcesConnection
    "Time the datasource was last updated. Available in Tableau Cloud June 2022 / Server 2022.3 and later."
    updatedAt: DateTime
    "Data quality warnings upstream from this data source"
    upstreamDataQualityWarnings(
        "Filter by GraphQL field and given value"
        filter: DataQualityWarning_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DataQualityWarningSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [DataQualityWarning!]!
    "Data quality warnings upstream from this data source"
    upstreamDataQualityWarningsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: DataQualityWarning_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DataQualityWarningSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): DataQualityWarningsConnection
    "Databases upstream from this data source"
    upstreamDatabases(
        "Filter by GraphQL field and given value"
        filter: Database_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DatabaseSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Database!]!
    "Databases upstream from this data source"
    upstreamDatabasesConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Database_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DatabaseSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): DatabasesConnection
    "Datasources upstream from this data source"
    upstreamDatasources(
        "Filter by GraphQL field and given value"
        filter: PublishedDatasource_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: PublishedDatasourceSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [PublishedDatasource!]!
    "Datasources upstream from this data source"
    upstreamDatasourcesConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: PublishedDatasource_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: PublishedDatasourceSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): PublishedDatasourcesConnection
    "Flows upstream from this data source"
    upstreamFlows(
        "Filter by GraphQL field and given value"
        filter: Flow_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: FlowSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Flow!]!
    "Flows upstream from this data source"
    upstreamFlowsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Flow_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: FlowSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): FlowsConnection
    "Tables upstream from this data source"
    upstreamTables(
        "Filter by GraphQL field and given value"
        filter: DatabaseTable_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DatabaseTableSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [DatabaseTable!]!
    "Tables upstream from this data source"
    upstreamTablesConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: DatabaseTable_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DatabaseTableSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): DatabaseTablesConnection
    "Workbook that contains these embedded datasources"
    workbook: Workbook
}

"Connection Type for EmbeddedDatasource"
type EmbeddedDatasourcesConnection {
    "List of nodes"
    nodes: [EmbeddedDatasource!]!
    "Information for pagination"
    pageInfo: PageInfo!
    "Total number of objects in connection"
    totalCount: Int!
}

"Connection Type for FieldReferencingField"
type FieldReferencingFieldsConnection {
    "List of nodes"
    nodes: [FieldReferencingField!]!
    "Information for pagination"
    pageInfo: PageInfo!
    "Total number of objects in connection"
    totalCount: Int!
}

"Connection Type for Field"
type FieldsConnection {
    "List of nodes"
    nodes: [Field!]!
    "Information for pagination"
    pageInfo: PageInfo!
    "Total number of objects in connection"
    totalCount: Int!
}

" file connection"
type File implements Certifiable & Database & Taggable & Warnable {
    "Notes related to this database being marked as certified"
    certificationNote: String @deprecated(reason: "No longer supported. Use 'dataQualityCertifications'")
    "User who marked this database as certified"
    certifier: TableauUser @deprecated(reason: "No longer supported. Use 'dataQualityCertifications'")
    "Connection type shortname"
    connectionType: String
    "Contact for this database"
    contact: TableauUser
    "The data quality certifications on a database"
    dataQualityCertifications(
        "Filter by GraphQL field and given value"
        filter: DataQualityCertification_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DataQualityCertificationSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [DataQualityCertification!]!
    "The data quality certifications on a database"
    dataQualityCertificationsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: DataQualityCertification_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DataQualityCertificationSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): DataQualityCertificationsConnection
    "The optional data quality warning on a database"
    dataQualityWarning: DataQualityWarning @deprecated(reason: "Use 'dataQualityWarnings'")
    "The data quality warnings on a database"
    dataQualityWarnings(
        "Filter by GraphQL field and given value"
        filter: DataQualityWarning_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DataQualityWarningSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [DataQualityWarning!]!
    "The data quality warnings on a database"
    dataQualityWarningsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: DataQualityWarning_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DataQualityWarningSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): DataQualityWarningsConnection
    "User modifiable description of this database"
    description: String
    "Dashboards connected to the database"
    downstreamDashboards(
        "Filter by GraphQL field and given value"
        filter: Dashboard_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DashboardSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Dashboard!]!
    "Dashboards connected to the database"
    downstreamDashboardsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Dashboard_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DashboardSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): DashboardsConnection
    "Databases downstream of this database"
    downstreamDatabases(
        "Filter by GraphQL field and given value"
        filter: Database_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DatabaseSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Database!]!
    "Databases downstream of this database"
    downstreamDatabasesConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Database_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DatabaseSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): DatabasesConnection
    "Published datasources connected to the database"
    downstreamDatasources(
        "Filter by GraphQL field and given value"
        filter: PublishedDatasource_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: PublishedDatasourceSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [PublishedDatasource!]!
    "Published datasources connected to the database"
    downstreamDatasourcesConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: PublishedDatasource_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: PublishedDatasourceSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): PublishedDatasourcesConnection
    "Flows downstream of this database"
    downstreamFlows(
        "Filter by GraphQL field and given value"
        filter: Flow_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: FlowSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Flow!]!
    "Flows downstream of this database"
    downstreamFlowsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Flow_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: FlowSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): FlowsConnection
    "Lenses connected to the database"
    downstreamLenses(
        "Filter by GraphQL field and given value"
        filter: Lens_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: LensSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Lens!]!
    "Lenses connected to the database"
    downstreamLensesConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Lens_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: LensSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): LensesConnection
    "Metrics connected to the database"
    downstreamMetrics(
        "Filter by GraphQL field and given value"
        filter: Metric_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: MetricSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Metric!]!
    "Metrics connected to the database"
    downstreamMetricsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Metric_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: MetricSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): MetricsConnection
    "Owners connected to the database"
    downstreamOwners(
        "Filter by GraphQL field and given value"
        filter: TableauUser_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: TableauUserSortOrder
    ): [TableauUser!]!
    "Owners connected to the database"
    downstreamOwnersConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: TableauUser_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: TableauUserSortOrder
    ): TableauUsersConnection
    "Sheets connected to the database"
    downstreamSheets(
        "Filter by GraphQL field and given value"
        filter: Sheet_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: SheetSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Sheet!]!
    "Sheets connected to the database"
    downstreamSheetsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Sheet_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: SheetSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): SheetsConnection
    "Tables downstream of this database"
    downstreamTables(
        "Filter by GraphQL field and given value"
        filter: DatabaseTable_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DatabaseTableSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [DatabaseTable!]!
    "Tables downstream of this database"
    downstreamTablesConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: DatabaseTable_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DatabaseTableSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): DatabaseTablesConnection
    "Virtual connection tables downstream of this database"
    downstreamVirtualConnectionTables(
        "Filter by GraphQL field and given value"
        filter: VirtualConnectionTable_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: VirtualConnectionTableSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [VirtualConnectionTable!]!
    "Virtual connection tables downstream of this database"
    downstreamVirtualConnectionTablesConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: VirtualConnectionTable_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: VirtualConnectionTableSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): VirtualConnectionTablesConnection
    "Virtual connection tables downstream of this database"
    downstreamVirtualConnections(
        "Filter by GraphQL field and given value"
        filter: VirtualConnection_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: VirtualConnectionSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [VirtualConnection!]!
    "Virtual connection tables downstream of this database"
    downstreamVirtualConnectionsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: VirtualConnection_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: VirtualConnectionSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): VirtualConnectionsConnection
    "Workbooks connected to the database"
    downstreamWorkbooks(
        "Filter by GraphQL field and given value"
        filter: Workbook_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: WorkbookSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Workbook!]!
    "Workbooks connected to the database"
    downstreamWorkbooksConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Workbook_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: WorkbookSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): WorkbooksConnection
    "Path to file"
    filePath: String
    "True if the database has an active data quality warning"
    hasActiveWarning: Boolean!
    "Unique identifier used by the metadata API.  Not the same as the numeric ID used on server"
    id: ID!
    "True if this database contains an active data quality certification"
    isCertified: Boolean!
    "True if this database has its permission locked"
    isControlledPermissionsEnabled: Boolean
    "True if this file is embedded in Tableau content, e.g., a packaged workbook"
    isEmbedded: Boolean
    "True if this database has been grouped with other databases"
    isGrouped: Boolean
    "Locally unique identifier used for the REST API on the Tableau Server"
    luid: String!
    "Name shown in server and desktop clients"
    name: String
    "The name of the project in which the table is visible. Will be empty if the table is not in a project."
    projectName: String
    "The ID of the project in which the table is visible. Will be empty if the table is not in a project."
    projectVizportalUrlId: String
    "The custom SQL queries that reference this database"
    referencedByQueries(
        "Filter by GraphQL field and given value"
        filter: CustomSQLTable_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: CustomSQLTableSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [CustomSQLTable]
    "The custom SQL queries that reference this database"
    referencedByQueriesConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: CustomSQLTable_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: CustomSQLTableSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): CustomSQLTablesConnection
    "Tables belonging to this database"
    tables(
        "Filter by GraphQL field and given value"
        filter: DatabaseTable_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DatabaseTableSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [DatabaseTable]
    "Tables belonging to this database"
    tablesConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: DatabaseTable_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DatabaseTableSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): DatabaseTablesConnection
    "Tags associated with the database"
    tags(
        "Filter by GraphQL field and given value"
        filter: Tag_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: TagSortOrder
    ): [Tag!]!
    "Tags associated with the database"
    tagsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Tag_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: TagSortOrder
    ): TagsConnection
    "Data quality warnings upstream from this database"
    upstreamDataQualityWarnings(
        "Filter by GraphQL field and given value"
        filter: DataQualityWarning_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DataQualityWarningSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [DataQualityWarning!]!
    "Data quality warnings upstream from this database"
    upstreamDataQualityWarningsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: DataQualityWarning_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DataQualityWarningSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): DataQualityWarningsConnection
    "Databases upstream of this database"
    upstreamDatabases(
        "Filter by GraphQL field and given value"
        filter: Database_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DatabaseSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Database!]!
    "Databases upstream of this database"
    upstreamDatabasesConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Database_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DatabaseSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): DatabasesConnection
    "Datasources upstream of this database"
    upstreamDatasources(
        "Filter by GraphQL field and given value"
        filter: PublishedDatasource_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: PublishedDatasourceSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [PublishedDatasource!]!
    "Datasources upstream of this database"
    upstreamDatasourcesConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: PublishedDatasource_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: PublishedDatasourceSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): PublishedDatasourcesConnection
    "Flows upstream of this database"
    upstreamFlows(
        "Filter by GraphQL field and given value"
        filter: Flow_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: FlowSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Flow!]!
    "Flows upstream of this database"
    upstreamFlowsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Flow_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: FlowSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): FlowsConnection
    "Tables upstream of this database"
    upstreamTables(
        "Filter by GraphQL field and given value"
        filter: DatabaseTable_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DatabaseTableSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [DatabaseTable!]!
    "Tables upstream of this database"
    upstreamTablesConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: DatabaseTable_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DatabaseTableSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): DatabaseTablesConnection
    "Virtual connection tables upstream of this database"
    upstreamVirtualConnectionTables(
        "Filter by GraphQL field and given value"
        filter: VirtualConnectionTable_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: VirtualConnectionTableSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [VirtualConnectionTable!]!
    "Virtual connection tables upstream of this database"
    upstreamVirtualConnectionTablesConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: VirtualConnectionTable_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: VirtualConnectionTableSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): VirtualConnectionTablesConnection
    "Virtual connection tables upstream of this database"
    upstreamVirtualConnections(
        "Filter by GraphQL field and given value"
        filter: VirtualConnection_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: VirtualConnectionSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [VirtualConnection!]!
    "Virtual connection tables upstream of this database"
    upstreamVirtualConnectionsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: VirtualConnection_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: VirtualConnectionSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): VirtualConnectionsConnection
    "Vizportal ID of this database, for use in client-to-server communications"
    vizportalId: String!
}

"Connection Type for File"
type FilesConnection {
    "List of nodes"
    nodes: [File!]!
    "Information for pagination"
    pageInfo: PageInfo!
    "Total number of objects in connection"
    totalCount: Int!
}

"Flows are used to prepare data, which can include aggregation, cleaning, preprocessing, etc."
type Flow implements Taggable & Warnable {
    "The name of the container in which the flow is visible and usable. Either a personal space or project."
    containerName: String
    "The type of the container in which the flow is visible and usable. Either personal space or project."
    containerType: String!
    "True if the flow contains unsupported custom SQL, in which case lineage may be incomplete"
    containsUnsupportedCustomSql: Boolean
    "Time the flow was created. Available in Tableau Cloud June 2022 / Server 2022.3 and later."
    createdAt: DateTime
    "The optional data quality warning on a flow"
    dataQualityWarning: DataQualityWarning @deprecated(reason: "Use 'dataQualityWarnings'")
    "The data quality warnings on a flow"
    dataQualityWarnings(
        "Filter by GraphQL field and given value"
        filter: DataQualityWarning_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DataQualityWarningSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [DataQualityWarning!]!
    "The data quality warnings on a flow"
    dataQualityWarningsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: DataQualityWarning_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DataQualityWarningSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): DataQualityWarningsConnection
    "Description of the flow"
    description: String
    "Dashboards that are downstream from this flow"
    downstreamDashboards(
        "Filter by GraphQL field and given value"
        filter: Dashboard_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DashboardSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Dashboard!]!
    "Dashboards that are downstream from this flow"
    downstreamDashboardsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Dashboard_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DashboardSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): DashboardsConnection
    "Databases that are downstream from this flow."
    downstreamDatabases(
        "Filter by GraphQL field and given value"
        filter: Database_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DatabaseSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Database!]!
    "Databases that are downstream from this flow."
    downstreamDatabasesConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Database_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DatabaseSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): DatabasesConnection
    "Published Data Sources that are downstream from this flow."
    downstreamDatasources(
        "Filter by GraphQL field and given value"
        filter: PublishedDatasource_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: PublishedDatasourceSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [PublishedDatasource!]!
    "Published Data Sources that are downstream from this flow."
    downstreamDatasourcesConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: PublishedDatasource_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: PublishedDatasourceSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): PublishedDatasourcesConnection
    "Flows that are downstream from this flow."
    downstreamFlows(
        "Filter by GraphQL field and given value"
        filter: Flow_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: FlowSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Flow!]!
    "Flows that are downstream from this flow."
    downstreamFlowsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Flow_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: FlowSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): FlowsConnection
    "Lenses that are downstream from this flow"
    downstreamLenses(
        "Filter by GraphQL field and given value"
        filter: Lens_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: LensSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Lens!]!
    "Lenses that are downstream from this flow"
    downstreamLensesConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Lens_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: LensSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): LensesConnection
    "Linked flows that are downstream from this flow."
    downstreamLinkedFlows(
        "Filter by GraphQL field and given value"
        filter: LinkedFlow_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: LinkedFlowSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [LinkedFlow!]!
    "Linked flows that are downstream from this flow."
    downstreamLinkedFlowsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: LinkedFlow_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: LinkedFlowSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): LinkedFlowsConnection
    "Metrics that are downstream from this flow"
    downstreamMetrics(
        "Filter by GraphQL field and given value"
        filter: Metric_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: MetricSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Metric!]!
    "Metrics that are downstream from this flow"
    downstreamMetricsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Metric_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: MetricSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): MetricsConnection
    "Owners that are downstream from this flow"
    downstreamOwners(
        "Filter by GraphQL field and given value"
        filter: TableauUser_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: TableauUserSortOrder
    ): [TableauUser!]!
    "Owners that are downstream from this flow"
    downstreamOwnersConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: TableauUser_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: TableauUserSortOrder
    ): TableauUsersConnection
    "Sheets that are downstream from this flow"
    downstreamSheets(
        "Filter by GraphQL field and given value"
        filter: Sheet_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: SheetSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Sheet!]!
    "Sheets that are downstream from this flow"
    downstreamSheetsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Sheet_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: SheetSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): SheetsConnection
    "Tables that are downstream from this flow."
    downstreamTables(
        "Filter by GraphQL field and given value"
        filter: DatabaseTable_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DatabaseTableSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [DatabaseTable!]!
    "Tables that are downstream from this flow."
    downstreamTablesConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: DatabaseTable_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DatabaseTableSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): DatabaseTablesConnection
    "VirtualConnectionTables that are downstream of this flow"
    downstreamVirtualConnectionTables(
        "Filter by GraphQL field and given value"
        filter: VirtualConnectionTable_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: VirtualConnectionTableSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [VirtualConnectionTable!]!
    "VirtualConnectionTables that are downstream of this flow"
    downstreamVirtualConnectionTablesConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: VirtualConnectionTable_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: VirtualConnectionTableSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): VirtualConnectionTablesConnection
    "VirtualConnections that are downstream of this flow"
    downstreamVirtualConnections(
        "Filter by GraphQL field and given value"
        filter: VirtualConnection_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: VirtualConnectionSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [VirtualConnection!]!
    "VirtualConnections that are downstream of this flow"
    downstreamVirtualConnectionsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: VirtualConnection_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: VirtualConnectionSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): VirtualConnectionsConnection
    "Workbooks that are downstream from this flow"
    downstreamWorkbooks(
        "Filter by GraphQL field and given value"
        filter: Workbook_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: WorkbookSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Workbook!]!
    "Workbooks that are downstream from this flow"
    downstreamWorkbooksConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Workbook_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: WorkbookSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): WorkbooksConnection
    "True if the flow has an active data quality warning"
    hasActiveWarning: Boolean!
    "Unique identifier used by the metadata API.  Not the same as the numeric ID used on server"
    id: ID!
    "Fields that are inputs to this flow"
    inputFields(
        "Filter by GraphQL field and given value"
        filter: FlowInputField_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: FlowInputFieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [FlowInputField!]!
    "Fields that are inputs to this flow"
    inputFieldsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: FlowInputField_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: FlowInputFieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): FlowInputFieldsConnection
    "Locally unique identifier used for the REST API on the Tableau Server"
    luid: String!
    "Name shown in server and desktop clients"
    name: String
    "Flows that are next immediate downstream from this flow."
    nextDownstreamFlows(
        "Filter by GraphQL field and given value"
        filter: Flow_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: FlowSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Flow!]!
    "Flows that are next immediate downstream from this flow."
    nextDownstreamFlowsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Flow_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: FlowSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): FlowsConnection
    "Flows that are next immediate upstream from this flow."
    nextUpstreamFlows(
        "Filter by GraphQL field and given value"
        filter: Flow_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: FlowSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Flow]!
    "Flows that are next immediate upstream from this flow."
    nextUpstreamFlowsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Flow_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: FlowSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): FlowsConnection
    "Fields that are outputs of this flow"
    outputFields(
        "Filter by GraphQL field and given value"
        filter: FlowOutputField_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: FlowOutputFieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [FlowOutputField!]!
    "Fields that are outputs of this flow"
    outputFieldsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: FlowOutputField_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: FlowOutputFieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): FlowOutputFieldsConnection
    "Output steps for this flow"
    outputSteps(
        "Filter by GraphQL field and given value"
        filter: FlowOutputStep_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: FlowOutputStepSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [FlowOutputStep!]!
    "Output steps for this flow"
    outputStepsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: FlowOutputStep_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: FlowOutputStepSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): FlowOutputStepsConnection
    "User who owns this flow"
    owner: TableauUser
    "The link to the personal space in which the flow is visible and usable. Will be null if the flow is not in a personal space."
    personalSpaceUrlLink: String
    "The name of the project in which the flow is visible and usable"
    projectName: String
    "The ID of the project in which the flow is visible and usable. Will be null if the flow is not in a project."
    projectVizportalUrlId: String
    "The site in which the flow is visible and usable"
    site: TableauSite
    "Tags associated with a flow"
    tags(
        "Filter by GraphQL field and given value"
        filter: Tag_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: TagSortOrder
    ): [Tag!]!
    "Tags associated with a flow"
    tagsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Tag_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: TagSortOrder
    ): TagsConnection
    "Time the flow was updated. Available in Tableau Cloud June 2022 / Server 2022.3 and later."
    updatedAt: DateTime
    "Data quality warnings upstream from this flow"
    upstreamDataQualityWarnings(
        "Filter by GraphQL field and given value"
        filter: DataQualityWarning_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DataQualityWarningSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [DataQualityWarning!]!
    "Data quality warnings upstream from this flow"
    upstreamDataQualityWarningsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: DataQualityWarning_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DataQualityWarningSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): DataQualityWarningsConnection
    "Databases that are upstream from this flow."
    upstreamDatabases(
        "Filter by GraphQL field and given value"
        filter: Database_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DatabaseSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Database!]!
    "Databases that are upstream from this flow."
    upstreamDatabasesConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Database_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DatabaseSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): DatabasesConnection
    "Datasources that are upstream from this flow."
    upstreamDatasources(
        "Filter by GraphQL field and given value"
        filter: PublishedDatasource_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: PublishedDatasourceSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [PublishedDatasource!]!
    "Datasources that are upstream from this flow."
    upstreamDatasourcesConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: PublishedDatasource_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: PublishedDatasourceSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): PublishedDatasourcesConnection
    "Flows that are upstream from this flow."
    upstreamFlows(
        "Filter by GraphQL field and given value"
        filter: Flow_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: FlowSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Flow!]!
    "Flows that are upstream from this flow."
    upstreamFlowsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Flow_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: FlowSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): FlowsConnection
    "Linked flows that are upstream from this flow."
    upstreamLinkedFlows(
        "Filter by GraphQL field and given value"
        filter: LinkedFlow_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: LinkedFlowSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [LinkedFlow!]!
    "Linked flows that are upstream from this flow."
    upstreamLinkedFlowsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: LinkedFlow_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: LinkedFlowSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): LinkedFlowsConnection
    "Tables that are upstream from this flow."
    upstreamTables(
        "Filter by GraphQL field and given value"
        filter: DatabaseTable_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DatabaseTableSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [DatabaseTable!]!
    "Tables that are upstream from this flow."
    upstreamTablesConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: DatabaseTable_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DatabaseTableSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): DatabaseTablesConnection
    "The virtual connection table upstream to this Flow"
    upstreamVirtualConnectionTables(
        "Filter by GraphQL field and given value"
        filter: VirtualConnectionTable_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: VirtualConnectionTableSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [VirtualConnectionTable]!
    "The virtual connection table upstream to this Flow"
    upstreamVirtualConnectionTablesConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: VirtualConnectionTable_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: VirtualConnectionTableSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): VirtualConnectionTablesConnection
    "The virtual connection upstream to this Flow"
    upstreamVirtualConnections(
        "Filter by GraphQL field and given value"
        filter: VirtualConnection_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: VirtualConnectionSortOrder
    ): [VirtualConnection]
    "The virtual connection upstream to this Flow"
    upstreamVirtualConnectionsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: VirtualConnection_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: VirtualConnectionSortOrder
    ): VirtualConnectionsConnection
    "Locally unique identifier used for the REST API on the Tableau Server"
    uri: String
    "VizPortal URL ID; used for URL generation"
    vizportalUrlId: String!
}

"Column input field implementation"
type FlowColumnInputField implements FlowInputField {
    "Fields that are children of this field"
    childFields(
        "Filter by GraphQL field and given value"
        filter: FlowOutputField_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: FlowOutputFieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [FlowOutputField!]!
    "Fields that are children of this field"
    childFieldsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: FlowOutputField_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: FlowOutputFieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): FlowOutputFieldsConnection
    "The underlying wrapped column"
    column: Column
    "Identifier internal to flow"
    fieldId: String
    "A flow to which these fields input"
    flow: Flow
    "Unique identifier used by the metadata API"
    id: ID!
    "Name shown in server and desktop clients"
    name: String
    "Databases that are upstream from this outputField."
    upstreamDatabases(
        "Filter by GraphQL field and given value"
        filter: Database_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DatabaseSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Database!]!
    "Databases that are upstream from this outputField."
    upstreamDatabasesConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Database_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DatabaseSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): DatabasesConnection
    "PublishedDatasources that are upstream from this outputField."
    upstreamDatasources(
        "Filter by GraphQL field and given value"
        filter: PublishedDatasource_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: PublishedDatasourceSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [PublishedDatasource!]!
    "PublishedDatasources that are upstream from this outputField."
    upstreamDatasourcesConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: PublishedDatasource_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: PublishedDatasourceSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): PublishedDatasourcesConnection
    "Flows that are upstream from this outputField."
    upstreamFlows(
        "Filter by GraphQL field and given value"
        filter: Flow_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: FlowSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Flow!]!
    "Flows that are upstream from this outputField."
    upstreamFlowsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Flow_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: FlowSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): FlowsConnection
    "Tables that are upstream of this field"
    upstreamTables(
        "Filter by GraphQL field and given value"
        filter: DatabaseTable_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DatabaseTableSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [DatabaseTable!]!
    "Tables that are upstream of this field"
    upstreamTablesConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: DatabaseTable_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DatabaseTableSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): DatabaseTablesConnection
}

"Connection Type for FlowColumnInputField"
type FlowColumnInputFieldsConnection {
    "List of nodes"
    nodes: [FlowColumnInputField!]!
    "Information for pagination"
    pageInfo: PageInfo!
    "Total number of objects in connection"
    totalCount: Int!
}

"Column output field implementation"
type FlowColumnOutputField implements FlowOutputField {
    "The underlying wrapped column"
    column: Column
    "Dashboards that are downstream from this outputField"
    downstreamDashboards(
        "Filter by GraphQL field and given value"
        filter: Dashboard_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DashboardSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Dashboard!]!
    "Dashboards that are downstream from this outputField"
    downstreamDashboardsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Dashboard_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DashboardSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): DashboardsConnection
    "Databases that are downstream from this outputField"
    downstreamDatabases(
        "Filter by GraphQL field and given value"
        filter: Database_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DatabaseSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Database!]!
    "Databases that are downstream from this outputField"
    downstreamDatabasesConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Database_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DatabaseSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): DatabasesConnection
    "Datasources that are downstream from this outputField"
    downstreamDatasources(
        "Filter by GraphQL field and given value"
        filter: PublishedDatasource_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: PublishedDatasourceSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [PublishedDatasource!]!
    "Datasources that are downstream from this outputField"
    downstreamDatasourcesConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: PublishedDatasource_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: PublishedDatasourceSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): PublishedDatasourcesConnection
    "Flows that are downstream from this outputField"
    downstreamFlows(
        "Filter by GraphQL field and given value"
        filter: Flow_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: FlowSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Flow!]!
    "Flows that are downstream from this outputField"
    downstreamFlowsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Flow_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: FlowSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): FlowsConnection
    "Lenses that are downstream from this outputField"
    downstreamLenses(
        "Filter by GraphQL field and given value"
        filter: Lens_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: LensSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Lens!]!
    "Lenses that are downstream from this outputField"
    downstreamLensesConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Lens_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: LensSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): LensesConnection
    "Metrics that are downstream from this outputField"
    downstreamMetrics(
        "Filter by GraphQL field and given value"
        filter: Metric_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: MetricSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Metric!]!
    "Metrics that are downstream from this outputField"
    downstreamMetricsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Metric_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: MetricSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): MetricsConnection
    "Owners that are downstream from this outputField"
    downstreamOwners(
        "Filter by GraphQL field and given value"
        filter: TableauUser_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: TableauUserSortOrder
    ): [TableauUser!]!
    "Owners that are downstream from this outputField"
    downstreamOwnersConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: TableauUser_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: TableauUserSortOrder
    ): TableauUsersConnection
    "Sheets that are downstream from this outputField"
    downstreamSheets(
        "Filter by GraphQL field and given value"
        filter: Sheet_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: SheetSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Sheet!]!
    "Sheets that are downstream from this outputField"
    downstreamSheetsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Sheet_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: SheetSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): SheetsConnection
    "Tables that are downstream from this outputField"
    downstreamTables(
        "Filter by GraphQL field and given value"
        filter: DatabaseTable_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DatabaseTableSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [DatabaseTable!]!
    "Tables that are downstream from this outputField"
    downstreamTablesConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: DatabaseTable_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DatabaseTableSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): DatabaseTablesConnection
    "VirtualConnectionTables that are downstream of this outputField"
    downstreamVirtualConnectionTables(
        "Filter by GraphQL field and given value"
        filter: VirtualConnectionTable_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: VirtualConnectionTableSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [VirtualConnectionTable!]!
    "VirtualConnectionTables that are downstream of this outputField"
    downstreamVirtualConnectionTablesConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: VirtualConnectionTable_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: VirtualConnectionTableSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): VirtualConnectionTablesConnection
    "VirtualConnections that are downstream of this outputField"
    downstreamVirtualConnections(
        "Filter by GraphQL field and given value"
        filter: VirtualConnection_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: VirtualConnectionSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [VirtualConnection!]!
    "VirtualConnections that are downstream of this outputField"
    downstreamVirtualConnectionsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: VirtualConnection_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: VirtualConnectionSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): VirtualConnectionsConnection
    "Workbooks that are downstream from this outputField"
    downstreamWorkbooks(
        "Filter by GraphQL field and given value"
        filter: Workbook_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: WorkbookSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Workbook!]!
    "Workbooks that are downstream from this outputField"
    downstreamWorkbooksConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Workbook_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: WorkbookSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): WorkbooksConnection
    "Identifier internal to flow"
    fieldId: String
    "The flow that outputs these fields"
    flow(
        "Filter by GraphQL field and given value"
        filter: Flow_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: FlowSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Flow]
    "The flow that outputs these fields"
    flowConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Flow_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: FlowSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): FlowsConnection
    "The flow output step that contains this field"
    flowOutputStep: FlowOutputStep
    "Unique identifier used by the metadata API"
    id: ID!
    "Name shown in server and desktop clients"
    name: String
    "Fields that are parents of this field"
    parentFields(
        "Filter by GraphQL field and given value"
        filter: FlowInputField_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: FlowInputFieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [FlowInputField!]!
    "Fields that are parents of this field"
    parentFieldsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: FlowInputField_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: FlowInputFieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): FlowInputFieldsConnection
    "Databases that are upstream from this outputField"
    upstreamDatabases(
        "Filter by GraphQL field and given value"
        filter: Database_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DatabaseSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Database!]!
    "Databases that are upstream from this outputField"
    upstreamDatabasesConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Database_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DatabaseSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): DatabasesConnection
    "Datasources that are upstream from this flow."
    upstreamDatasources(
        "Filter by GraphQL field and given value"
        filter: PublishedDatasource_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: PublishedDatasourceSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [PublishedDatasource!]!
    "Datasources that are upstream from this flow."
    upstreamDatasourcesConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: PublishedDatasource_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: PublishedDatasourceSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): PublishedDatasourcesConnection
    "Flows that are upstream from this flow"
    upstreamFlows(
        "Filter by GraphQL field and given value"
        filter: Flow_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: FlowSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Flow!]!
    "Flows that are upstream from this flow"
    upstreamFlowsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Flow_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: FlowSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): FlowsConnection
    "Tables that are upstream from this outputField"
    upstreamTables(
        "Filter by GraphQL field and given value"
        filter: DatabaseTable_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DatabaseTableSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [DatabaseTable!]!
    "Tables that are upstream from this outputField"
    upstreamTablesConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: DatabaseTable_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DatabaseTableSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): DatabaseTablesConnection
    "VirtualConnectionTables that are uptream of this outputField"
    upstreamVirtualConnectionTables(
        "Filter by GraphQL field and given value"
        filter: VirtualConnectionTable_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: VirtualConnectionTableSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [VirtualConnectionTable!]!
    "VirtualConnectionTables that are uptream of this outputField"
    upstreamVirtualConnectionTablesConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: VirtualConnectionTable_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: VirtualConnectionTableSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): VirtualConnectionTablesConnection
    "VirtualConnections that are upstream of this outputField"
    upstreamVirtualConnections(
        "Filter by GraphQL field and given value"
        filter: VirtualConnection_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: VirtualConnectionSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [VirtualConnection!]!
    "VirtualConnections that are upstream of this outputField"
    upstreamVirtualConnectionsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: VirtualConnection_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: VirtualConnectionSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): VirtualConnectionsConnection
}

"Connection Type for FlowColumnOutputField"
type FlowColumnOutputFieldsConnection {
    "List of nodes"
    nodes: [FlowColumnOutputField!]!
    "Information for pagination"
    pageInfo: PageInfo!
    "Total number of objects in connection"
    totalCount: Int!
}

"Field input field implementation"
type FlowFieldInputField implements FlowInputField {
    "Fields that are children of this field"
    childFields(
        "Filter by GraphQL field and given value"
        filter: FlowOutputField_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: FlowOutputFieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [FlowOutputField!]!
    "Fields that are children of this field"
    childFieldsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: FlowOutputField_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: FlowOutputFieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): FlowOutputFieldsConnection
    "The underlying wrapped field"
    field: Field
    "Identifier internal to flow"
    fieldId: String
    "A flow to which these fields input"
    flow: Flow
    "Unique identifier used by the metadata API"
    id: ID!
    "Name shown in server and desktop clients"
    name: String
    "Databases that are upstream from this outputField."
    upstreamDatabases(
        "Filter by GraphQL field and given value"
        filter: Database_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DatabaseSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Database!]!
    "Databases that are upstream from this outputField."
    upstreamDatabasesConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Database_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DatabaseSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): DatabasesConnection
    "Datasources that are upstream from this outputField."
    upstreamDatasources(
        "Filter by GraphQL field and given value"
        filter: PublishedDatasource_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: PublishedDatasourceSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [PublishedDatasource!]!
    "Datasources that are upstream from this outputField."
    upstreamDatasourcesConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: PublishedDatasource_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: PublishedDatasourceSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): PublishedDatasourcesConnection
    "Flows that are upstream from this outputField."
    upstreamFlows(
        "Filter by GraphQL field and given value"
        filter: Flow_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: FlowSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Flow!]!
    "Flows that are upstream from this outputField."
    upstreamFlowsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Flow_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: FlowSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): FlowsConnection
    "Tables that are upstream of this field."
    upstreamTables(
        "Filter by GraphQL field and given value"
        filter: DatabaseTable_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DatabaseTableSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [DatabaseTable!]!
    "Tables that are upstream of this field."
    upstreamTablesConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: DatabaseTable_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DatabaseTableSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): DatabaseTablesConnection
}

"Connection Type for FlowFieldInputField"
type FlowFieldInputFieldsConnection {
    "List of nodes"
    nodes: [FlowFieldInputField!]!
    "Information for pagination"
    pageInfo: PageInfo!
    "Total number of objects in connection"
    totalCount: Int!
}

"Field output field implementation"
type FlowFieldOutputField implements FlowOutputField {
    "Dashboards that are downstream from this outputField"
    downstreamDashboards(
        "Filter by GraphQL field and given value"
        filter: Dashboard_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DashboardSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Dashboard!]!
    "Dashboards that are downstream from this outputField"
    downstreamDashboardsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Dashboard_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DashboardSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): DashboardsConnection
    "Databases that are downstream from this outputField"
    downstreamDatabases(
        "Filter by GraphQL field and given value"
        filter: Database_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DatabaseSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Database!]!
    "Databases that are downstream from this outputField"
    downstreamDatabasesConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Database_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DatabaseSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): DatabasesConnection
    "Datasources that are downstream from this outputField"
    downstreamDatasources(
        "Filter by GraphQL field and given value"
        filter: PublishedDatasource_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: PublishedDatasourceSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [PublishedDatasource!]!
    "Datasources that are downstream from this outputField"
    downstreamDatasourcesConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: PublishedDatasource_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: PublishedDatasourceSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): PublishedDatasourcesConnection
    "Flows that are downstream from this outputField"
    downstreamFlows(
        "Filter by GraphQL field and given value"
        filter: Flow_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: FlowSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Flow!]!
    "Flows that are downstream from this outputField"
    downstreamFlowsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Flow_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: FlowSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): FlowsConnection
    "Lenses that are downstream from this outputField"
    downstreamLenses(
        "Filter by GraphQL field and given value"
        filter: Lens_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: LensSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Lens!]!
    "Lenses that are downstream from this outputField"
    downstreamLensesConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Lens_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: LensSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): LensesConnection
    "Metrics that are downstream from this outputField"
    downstreamMetrics(
        "Filter by GraphQL field and given value"
        filter: Metric_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: MetricSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Metric!]!
    "Metrics that are downstream from this outputField"
    downstreamMetricsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Metric_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: MetricSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): MetricsConnection
    "Owners that are downstream from this outputField"
    downstreamOwners(
        "Filter by GraphQL field and given value"
        filter: TableauUser_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: TableauUserSortOrder
    ): [TableauUser!]!
    "Owners that are downstream from this outputField"
    downstreamOwnersConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: TableauUser_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: TableauUserSortOrder
    ): TableauUsersConnection
    "Sheets that are downstream from this outputField"
    downstreamSheets(
        "Filter by GraphQL field and given value"
        filter: Sheet_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: SheetSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Sheet!]!
    "Sheets that are downstream from this outputField"
    downstreamSheetsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Sheet_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: SheetSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): SheetsConnection
    "Tables that are downstream from this outputField"
    downstreamTables(
        "Filter by GraphQL field and given value"
        filter: DatabaseTable_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DatabaseTableSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [DatabaseTable!]!
    "Tables that are downstream from this outputField"
    downstreamTablesConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: DatabaseTable_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DatabaseTableSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): DatabaseTablesConnection
    "VirtualConnectionTables that are downstream of this outputField"
    downstreamVirtualConnectionTables(
        "Filter by GraphQL field and given value"
        filter: VirtualConnectionTable_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: VirtualConnectionTableSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [VirtualConnectionTable!]!
    "VirtualConnectionTables that are downstream of this outputField"
    downstreamVirtualConnectionTablesConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: VirtualConnectionTable_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: VirtualConnectionTableSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): VirtualConnectionTablesConnection
    "VirtualConnections that are downstream of this outputField"
    downstreamVirtualConnections(
        "Filter by GraphQL field and given value"
        filter: VirtualConnection_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: VirtualConnectionSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [VirtualConnection!]!
    "VirtualConnections that are downstream of this outputField"
    downstreamVirtualConnectionsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: VirtualConnection_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: VirtualConnectionSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): VirtualConnectionsConnection
    "Workbooks that are downstream from this outputField"
    downstreamWorkbooks(
        "Filter by GraphQL field and given value"
        filter: Workbook_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: WorkbookSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Workbook!]!
    "Workbooks that are downstream from this outputField"
    downstreamWorkbooksConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Workbook_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: WorkbookSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): WorkbooksConnection
    "The underlying wrapped field"
    field: Field
    "Identifier internal to flow"
    fieldId: String
    "The flow that outputs these fields"
    flow(
        "Filter by GraphQL field and given value"
        filter: Flow_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: FlowSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Flow]
    "The flow that outputs these fields"
    flowConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Flow_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: FlowSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): FlowsConnection
    "The flow output step that contains this field"
    flowOutputStep: FlowOutputStep
    "Unique identifier used by the metadata API"
    id: ID!
    "Name shown in server and desktop clients"
    name: String
    "Fields that are parents of this field"
    parentFields(
        "Filter by GraphQL field and given value"
        filter: FlowInputField_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: FlowInputFieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [FlowInputField!]!
    "Fields that are parents of this field"
    parentFieldsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: FlowInputField_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: FlowInputFieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): FlowInputFieldsConnection
    "Databases that are upstream from this outputField"
    upstreamDatabases(
        "Filter by GraphQL field and given value"
        filter: Database_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DatabaseSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Database!]!
    "Databases that are upstream from this outputField"
    upstreamDatabasesConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Database_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DatabaseSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): DatabasesConnection
    "Datasources that are upstream from this output field."
    upstreamDatasources(
        "Filter by GraphQL field and given value"
        filter: PublishedDatasource_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: PublishedDatasourceSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [PublishedDatasource!]!
    "Datasources that are upstream from this output field."
    upstreamDatasourcesConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: PublishedDatasource_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: PublishedDatasourceSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): PublishedDatasourcesConnection
    "Flows that are upstream from this flow."
    upstreamFlows(
        "Filter by GraphQL field and given value"
        filter: Flow_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: FlowSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Flow!]!
    "Flows that are upstream from this flow."
    upstreamFlowsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Flow_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: FlowSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): FlowsConnection
    "Tables that are upstream from this outputField"
    upstreamTables(
        "Filter by GraphQL field and given value"
        filter: DatabaseTable_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DatabaseTableSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [DatabaseTable!]!
    "Tables that are upstream from this outputField"
    upstreamTablesConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: DatabaseTable_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DatabaseTableSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): DatabaseTablesConnection
    "VirtualConnectionTables that are uptream of this outputField"
    upstreamVirtualConnectionTables(
        "Filter by GraphQL field and given value"
        filter: VirtualConnectionTable_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: VirtualConnectionTableSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [VirtualConnectionTable!]!
    "VirtualConnectionTables that are uptream of this outputField"
    upstreamVirtualConnectionTablesConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: VirtualConnectionTable_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: VirtualConnectionTableSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): VirtualConnectionTablesConnection
    "VirtualConnections that are upstream of this outputField"
    upstreamVirtualConnections(
        "Filter by GraphQL field and given value"
        filter: VirtualConnection_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: VirtualConnectionSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [VirtualConnection!]!
    "VirtualConnections that are upstream of this outputField"
    upstreamVirtualConnectionsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: VirtualConnection_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: VirtualConnectionSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): VirtualConnectionsConnection
}

"Connection Type for FlowFieldOutputField"
type FlowFieldOutputFieldsConnection {
    "List of nodes"
    nodes: [FlowFieldOutputField!]!
    "Information for pagination"
    pageInfo: PageInfo!
    "Total number of objects in connection"
    totalCount: Int!
}

"Connection Type for FlowInputField"
type FlowInputFieldsConnection {
    "List of nodes"
    nodes: [FlowInputField!]!
    "Information for pagination"
    pageInfo: PageInfo!
    "Total number of objects in connection"
    totalCount: Int!
}

"Connection Type for FlowOutputField"
type FlowOutputFieldsConnection {
    "List of nodes"
    nodes: [FlowOutputField!]!
    "Information for pagination"
    pageInfo: PageInfo!
    "Total number of objects in connection"
    totalCount: Int!
}

" flow output step"
type FlowOutputStep {
    "The flow that contains this output step"
    flow: Flow
    "Unique identifier used by the metadata API"
    id: ID!
    "Name shown in server and desktop clients"
    name: String
    "Fields output by this step"
    outputFields(
        "Filter by GraphQL field and given value"
        filter: FlowOutputField_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: FlowOutputFieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [FlowOutputField!]!
    "Fields output by this step"
    outputFieldsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: FlowOutputField_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: FlowOutputFieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): FlowOutputFieldsConnection
    "Identifier internal to flow"
    stepId: String
}

"Connection Type for FlowOutputStep"
type FlowOutputStepsConnection {
    "List of nodes"
    nodes: [FlowOutputStep!]!
    "Information for pagination"
    pageInfo: PageInfo!
    "Total number of objects in connection"
    totalCount: Int!
}

"Connection Type for Flow"
type FlowsConnection {
    "List of nodes"
    nodes: [Flow!]!
    "Information for pagination"
    pageInfo: PageInfo!
    "Total number of objects in connection"
    totalCount: Int!
}

"GraphQL type for a group field. See https://onlinehelp.tableau.com/current/pro/desktop/en-us/sortgroup_groups_creating.html"
type GroupField implements DataField & Field & FieldReferencingField & Node {
    "Data category of the field"
    dataCategory: FieldRoleCategory
    "Type of the data in the field. See https://onlinehelp.tableau.com/current/pro/desktop/en-us/datafields_typesandroles_datatypes.html"
    dataType: FieldDataType
    "Data source that contains this field"
    datasource: Datasource
    "List of lens fields which are derived from this field"
    derivedLensFields(
        "Filter by GraphQL field and given value"
        filter: LensField_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: LensFieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [LensField]
    "List of lens fields which are derived from this field"
    derivedLensFieldsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: LensField_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: LensFieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): LensFieldsConnection
    "Description of field shown in server and desktop clients"
    description: String
    "description that is shown in the Tableau UI"
    descriptionInherited(
        "Method for selecting inherited value"
        inheritanceType: InheritanceType,
        "Option to select how to apply permissions. By default it is OBFUSCATE_RESULTS"
        permissionMode: PermissionMode
    ): [InheritedStringResult]
    "Sheets that reference this field"
    directSheets(
        "Filter by GraphQL field and given value"
        filter: Sheet_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: SheetSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Sheet]
    "Sheets that reference this field"
    directSheetsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Sheet_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: SheetSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): SheetsConnection
    "Columns downstream of this field"
    downstreamColumns(
        "Filter by GraphQL field and given value"
        filter: Column_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: ColumnSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Column!]!
    "Columns downstream of this field"
    downstreamColumnsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Column_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: ColumnSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): ColumnsConnection
    "Dashboards connected downstream from the field"
    downstreamDashboards(
        "Filter by GraphQL field and given value"
        filter: Dashboard_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DashboardSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Dashboard!]!
    "Dashboards connected downstream from the field"
    downstreamDashboardsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Dashboard_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DashboardSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): DashboardsConnection
    "Databases downstream of this field"
    downstreamDatabases(
        "Filter by GraphQL field and given value"
        filter: Database_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DatabaseSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Database!]!
    "Databases downstream of this field"
    downstreamDatabasesConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Database_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DatabaseSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): DatabasesConnection
    "Datasources connected downstream from this field"
    downstreamDatasources(
        "Filter by GraphQL field and given value"
        filter: PublishedDatasource_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: PublishedDatasourceSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [PublishedDatasource!]
    "Datasources connected downstream from this field"
    downstreamDatasourcesConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: PublishedDatasource_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: PublishedDatasourceSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): PublishedDatasourcesConnection
    "downstream fields that reference this field"
    downstreamFields(
        "Filter by GraphQL field and given value"
        filter: Field_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: FieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Field!]!
    "downstream fields that reference this field"
    downstreamFieldsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Field_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: FieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): FieldsConnection
    "Flows downstream of this field"
    downstreamFlows(
        "Filter by GraphQL field and given value"
        filter: Flow_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: FlowSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Flow!]!
    "Flows downstream of this field"
    downstreamFlowsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Flow_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: FlowSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): FlowsConnection
    "Lenses connected downstream from this field"
    downstreamLenses(
        "Filter by GraphQL field and given value"
        filter: Lens_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: LensSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Lens!]
    "Lenses connected downstream from this field"
    downstreamLensesConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Lens_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: LensSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): LensesConnection
    "Metrics connected downstream from the field"
    downstreamMetrics(
        "Filter by GraphQL field and given value"
        filter: Metric_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: MetricSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Metric!]
    "Metrics connected downstream from the field"
    downstreamMetricsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Metric_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: MetricSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): MetricsConnection
    "Workbook owners (authors) connected downstream from the field"
    downstreamOwners(
        "Filter by GraphQL field and given value"
        filter: TableauUser_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: TableauUserSortOrder
    ): [TableauUser!]
    "Workbook owners (authors) connected downstream from the field"
    downstreamOwnersConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: TableauUser_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: TableauUserSortOrder
    ): TableauUsersConnection
    "Sheets connected downstream from the field"
    downstreamSheets(
        "Filter by GraphQL field and given value"
        filter: Sheet_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: SheetSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Sheet!]!
    "Sheets connected downstream from the field"
    downstreamSheetsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Sheet_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: SheetSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): SheetsConnection
    "Tables downstream of this field"
    downstreamTables(
        "Filter by GraphQL field and given value"
        filter: DatabaseTable_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DatabaseTableSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [DatabaseTable!]!
    "Tables downstream of this field"
    downstreamTablesConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: DatabaseTable_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DatabaseTableSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): DatabaseTablesConnection
    "Virtual connection tables downstream of this field"
    downstreamVirtualConnectionTables(
        "Filter by GraphQL field and given value"
        filter: VirtualConnectionTable_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: VirtualConnectionTableSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [VirtualConnectionTable!]!
    "Virtual connection tables downstream of this field"
    downstreamVirtualConnectionTablesConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: VirtualConnectionTable_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: VirtualConnectionTableSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): VirtualConnectionTablesConnection
    "Virtual connections downstream of this field"
    downstreamVirtualConnections(
        "Filter by GraphQL field and given value"
        filter: VirtualConnection_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: VirtualConnectionSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [VirtualConnection!]!
    "Virtual connections downstream of this field"
    downstreamVirtualConnectionsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: VirtualConnection_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: VirtualConnectionSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): VirtualConnectionsConnection
    "Workbooks connected downstream from the field"
    downstreamWorkbooks(
        "Filter by GraphQL field and given value"
        filter: Workbook_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: WorkbookSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Workbook!]
    "Workbooks connected downstream from the field"
    downstreamWorkbooksConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Workbook_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: WorkbookSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): WorkbooksConnection
    "List of fields, if any, that this field references"
    fields(
        "Filter by GraphQL field and given value"
        filter: Field_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: FieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Field!]!
    "List of fields, if any, that this field references"
    fieldsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Field_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: FieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): FieldsConnection
    "Name of folder if the field is in a folder. See https://onlinehelp.tableau.com/current/pro/desktop/en-us/datafields_dwfeatures.html#Organize"
    folderName: String
    "Name internally used to uniquely identify fields"
    fullyQualifiedName: String
    "Field has an 'Other' group. See https://onlinehelp.tableau.com/current/pro/desktop/en-us/sortgroup_groups_creating.html#Include"
    hasOther: Boolean
    "Unique identifier used by the metadata API.  Not the same as the numeric ID used on server"
    id: ID!
    "True if the field is hidden"
    isHidden: Boolean
    "Name shown in server and desktop clients"
    name: String
    "The bin field that references this field"
    referencedByBins(
        "Filter by GraphQL field and given value"
        filter: BinField_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: BinFieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [BinField]
    "The bin field that references this field"
    referencedByBinsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: BinField_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: BinFieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): BinFieldsConnection
    "The calculated field that references this field"
    referencedByCalculations(
        "Filter by GraphQL field and given value"
        filter: CalculatedField_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: CalculatedFieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [CalculatedField]
    "The calculated field that references this field"
    referencedByCalculationsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: CalculatedField_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: CalculatedFieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): CalculatedFieldsConnection
    "The combined field that references this field"
    referencedByCombinedFields(
        "Filter by GraphQL field and given value"
        filter: CombinedField_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: CombinedFieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [CombinedField]
    "The combined field that references this field"
    referencedByCombinedFieldsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: CombinedField_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: CombinedFieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): CombinedFieldsConnection
    "Thie combined set field that references this field"
    referencedByCombinedSets(
        "Filter by GraphQL field and given value"
        filter: CombinedSetField_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: CombinedSetFieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [CombinedSetField]
    "Thie combined set field that references this field"
    referencedByCombinedSetsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: CombinedSetField_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: CombinedSetFieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): CombinedSetFieldsConnection
    "The field that references this field"
    referencedByFields(
        "Filter by GraphQL field and given value"
        filter: FieldReferencingField_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: FieldReferencingFieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [FieldReferencingField]
    "The field that references this field"
    referencedByFieldsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: FieldReferencingField_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: FieldReferencingFieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): FieldReferencingFieldsConnection
    "The data source filters that include this field"
    referencedByFilters(
        "Filter by GraphQL field and given value"
        filter: DatasourceFilter_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DatasourceFilterSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [DatasourceFilter]
    "The data source filters that include this field"
    referencedByFiltersConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: DatasourceFilter_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DatasourceFilterSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): DatasourceFiltersConnection
    "A flow input field that wraps this field"
    referencedByFlowFieldInputField(
        "Filter by GraphQL field and given value"
        filter: FlowFieldInputField_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: FlowFieldInputFieldSortOrder
    ): [FlowFieldInputField]
    "A flow input field that wraps this field"
    referencedByFlowFieldInputFieldConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: FlowFieldInputField_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: FlowFieldInputFieldSortOrder
    ): FlowFieldInputFieldsConnection
    "A flow output field that wraps this field"
    referencedByFlowFieldOutputField(
        "Filter by GraphQL field and given value"
        filter: FlowFieldOutputField_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: FlowFieldOutputFieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [FlowFieldOutputField]
    "A flow output field that wraps this field"
    referencedByFlowFieldOutputFieldConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: FlowFieldOutputField_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: FlowFieldOutputFieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): FlowFieldOutputFieldsConnection
    "The group field that references this field"
    referencedByGroups(
        "Filter by GraphQL field and given value"
        filter: GroupField_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: GroupFieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [GroupField]
    "The group field that references this field"
    referencedByGroupsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: GroupField_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: GroupFieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): GroupFieldsConnection
    "The hierarchy field that references this field"
    referencedByHierarchies(
        "Filter by GraphQL field and given value"
        filter: HierarchyField_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: HierarchyFieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [HierarchyField]
    "The hierarchy field that references this field"
    referencedByHierarchiesConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: HierarchyField_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: HierarchyFieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): HierarchyFieldsConnection
    "The field that references this remote field"
    referencedByRemoteFields(
        "Filter by GraphQL field and given value"
        filter: DatasourceField_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DatasourceFieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [DatasourceField]
    "The field that references this remote field"
    referencedByRemoteFieldsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: DatasourceField_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DatasourceFieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): DatasourceFieldsConnection
    "The set field that this field references"
    referencedBySets(
        "Filter by GraphQL field and given value"
        filter: SetField_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: SetFieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [SetField]
    "The set field that this field references"
    referencedBySetsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: SetField_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: SetFieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): SetFieldsConnection
    "Role of the field: 'dimension', 'measure' or 'unknown'"
    role: FieldRole
    "Sheets that reference this data source field"
    sheets(
        "Filter by GraphQL field and given value"
        filter: Sheet_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: SheetSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Sheet]
    "Sheets that reference this data source field"
    sheetsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Sheet_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: SheetSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): SheetsConnection
    "All upstream columns this field references"
    upstreamColumns(
        "Filter by GraphQL field and given value"
        filter: Column_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: ColumnSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Column]!
    "All upstream columns this field references"
    upstreamColumnsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Column_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: ColumnSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): ColumnsConnection
    "Databases connected upstream from the field"
    upstreamDatabases(
        "Filter by GraphQL field and given value"
        filter: Database_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DatabaseSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Database!]!
    "Databases connected upstream from the field"
    upstreamDatabasesConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Database_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DatabaseSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): DatabasesConnection
    "Datasources connected upstream from the field"
    upstreamDatasources(
        "Filter by GraphQL field and given value"
        filter: PublishedDatasource_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: PublishedDatasourceSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [PublishedDatasource!]!
    "Datasources connected upstream from the field"
    upstreamDatasourcesConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: PublishedDatasource_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: PublishedDatasourceSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): PublishedDatasourcesConnection
    "fields that are upstream of this field"
    upstreamFields(
        "Filter by GraphQL field and given value"
        filter: Field_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: FieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Field]!
    "fields that are upstream of this field"
    upstreamFieldsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Field_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: FieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): FieldsConnection
    "Flows connected upstream from the field"
    upstreamFlows(
        "Filter by GraphQL field and given value"
        filter: Flow_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: FlowSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Flow!]!
    "Flows connected upstream from the field"
    upstreamFlowsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Flow_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: FlowSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): FlowsConnection
    "Tables connected upstream from the field"
    upstreamTables(
        "Filter by GraphQL field and given value"
        filter: DatabaseTable_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DatabaseTableSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [DatabaseTable!]!
    "Tables connected upstream from the field"
    upstreamTablesConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: DatabaseTable_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DatabaseTableSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): DatabaseTablesConnection
    "Virtual connection tables upstream of this field"
    upstreamVirtualConnectionTables(
        "Filter by GraphQL field and given value"
        filter: VirtualConnectionTable_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: VirtualConnectionTableSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [VirtualConnectionTable!]!
    "Virtual connection tables upstream of this field"
    upstreamVirtualConnectionTablesConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: VirtualConnectionTable_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: VirtualConnectionTableSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): VirtualConnectionTablesConnection
    "Virtual connections upstream of this field"
    upstreamVirtualConnections(
        "Filter by GraphQL field and given value"
        filter: VirtualConnection_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: VirtualConnectionSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [VirtualConnection!]!
    "Virtual connections upstream of this field"
    upstreamVirtualConnectionsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: VirtualConnection_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: VirtualConnectionSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): VirtualConnectionsConnection
}

"Connection Type for GroupField"
type GroupFieldsConnection {
    "List of nodes"
    nodes: [GroupField!]!
    "Information for pagination"
    pageInfo: PageInfo!
    "Total number of objects in connection"
    totalCount: Int!
}

"GraphQL type for a hierarchy. See https://onlinehelp.tableau.com/current/pro/desktop/en-us/qs_hierarchies.html"
type HierarchyField implements Field & FieldReferencingField & Node {
    "Data source that contains this field"
    datasource: Datasource
    "List of lens fields which are derived from this field"
    derivedLensFields(
        "Filter by GraphQL field and given value"
        filter: LensField_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: LensFieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [LensField]
    "List of lens fields which are derived from this field"
    derivedLensFieldsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: LensField_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: LensFieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): LensFieldsConnection
    "Description of field shown in server and desktop clients"
    description: String
    "description that is shown in the Tableau UI"
    descriptionInherited(
        "Method for selecting inherited value"
        inheritanceType: InheritanceType,
        "Option to select how to apply permissions. By default it is OBFUSCATE_RESULTS"
        permissionMode: PermissionMode
    ): [InheritedStringResult]
    "Sheets that reference this field"
    directSheets(
        "Filter by GraphQL field and given value"
        filter: Sheet_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: SheetSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Sheet]
    "Sheets that reference this field"
    directSheetsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Sheet_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: SheetSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): SheetsConnection
    "Columns downstream of this field"
    downstreamColumns(
        "Filter by GraphQL field and given value"
        filter: Column_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: ColumnSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Column!]!
    "Columns downstream of this field"
    downstreamColumnsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Column_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: ColumnSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): ColumnsConnection
    "Dashboards connected downstream from the field"
    downstreamDashboards(
        "Filter by GraphQL field and given value"
        filter: Dashboard_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DashboardSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Dashboard!]!
    "Dashboards connected downstream from the field"
    downstreamDashboardsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Dashboard_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DashboardSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): DashboardsConnection
    "Databases downstream of this field"
    downstreamDatabases(
        "Filter by GraphQL field and given value"
        filter: Database_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DatabaseSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Database!]!
    "Databases downstream of this field"
    downstreamDatabasesConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Database_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DatabaseSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): DatabasesConnection
    "Datasources connected downstream from this field"
    downstreamDatasources(
        "Filter by GraphQL field and given value"
        filter: PublishedDatasource_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: PublishedDatasourceSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [PublishedDatasource!]
    "Datasources connected downstream from this field"
    downstreamDatasourcesConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: PublishedDatasource_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: PublishedDatasourceSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): PublishedDatasourcesConnection
    "downstream fields that reference this field"
    downstreamFields(
        "Filter by GraphQL field and given value"
        filter: Field_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: FieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Field!]!
    "downstream fields that reference this field"
    downstreamFieldsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Field_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: FieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): FieldsConnection
    "Flows downstream of this field"
    downstreamFlows(
        "Filter by GraphQL field and given value"
        filter: Flow_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: FlowSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Flow!]!
    "Flows downstream of this field"
    downstreamFlowsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Flow_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: FlowSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): FlowsConnection
    "Lenses connected downstream from this field"
    downstreamLenses(
        "Filter by GraphQL field and given value"
        filter: Lens_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: LensSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Lens!]
    "Lenses connected downstream from this field"
    downstreamLensesConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Lens_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: LensSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): LensesConnection
    "Metrics connected downstream from the field"
    downstreamMetrics(
        "Filter by GraphQL field and given value"
        filter: Metric_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: MetricSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Metric!]
    "Metrics connected downstream from the field"
    downstreamMetricsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Metric_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: MetricSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): MetricsConnection
    "Workbook owners (authors) connected downstream from the field"
    downstreamOwners(
        "Filter by GraphQL field and given value"
        filter: TableauUser_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: TableauUserSortOrder
    ): [TableauUser!]
    "Workbook owners (authors) connected downstream from the field"
    downstreamOwnersConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: TableauUser_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: TableauUserSortOrder
    ): TableauUsersConnection
    "Sheets connected downstream from the field"
    downstreamSheets(
        "Filter by GraphQL field and given value"
        filter: Sheet_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: SheetSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Sheet!]!
    "Sheets connected downstream from the field"
    downstreamSheetsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Sheet_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: SheetSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): SheetsConnection
    "Tables downstream of this field"
    downstreamTables(
        "Filter by GraphQL field and given value"
        filter: DatabaseTable_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DatabaseTableSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [DatabaseTable!]!
    "Tables downstream of this field"
    downstreamTablesConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: DatabaseTable_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DatabaseTableSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): DatabaseTablesConnection
    "Virtual connection tables downstream of this field"
    downstreamVirtualConnectionTables(
        "Filter by GraphQL field and given value"
        filter: VirtualConnectionTable_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: VirtualConnectionTableSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [VirtualConnectionTable!]!
    "Virtual connection tables downstream of this field"
    downstreamVirtualConnectionTablesConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: VirtualConnectionTable_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: VirtualConnectionTableSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): VirtualConnectionTablesConnection
    "Virtual connections downstream of this field"
    downstreamVirtualConnections(
        "Filter by GraphQL field and given value"
        filter: VirtualConnection_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: VirtualConnectionSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [VirtualConnection!]!
    "Virtual connections downstream of this field"
    downstreamVirtualConnectionsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: VirtualConnection_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: VirtualConnectionSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): VirtualConnectionsConnection
    "Workbooks connected downstream from the field"
    downstreamWorkbooks(
        "Filter by GraphQL field and given value"
        filter: Workbook_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: WorkbookSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Workbook!]
    "Workbooks connected downstream from the field"
    downstreamWorkbooksConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Workbook_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: WorkbookSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): WorkbooksConnection
    "List of fields, if any, that this field references"
    fields(
        "Filter by GraphQL field and given value"
        filter: Field_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: FieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Field!]!
    "List of fields, if any, that this field references"
    fieldsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Field_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: FieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): FieldsConnection
    "Name of folder if the field is in a folder. See https://onlinehelp.tableau.com/current/pro/desktop/en-us/datafields_dwfeatures.html#Organize"
    folderName: String
    "Name internally used to uniquely identify fields"
    fullyQualifiedName: String
    "Unique identifier used by the metadata API.  Not the same as the numeric ID used on server"
    id: ID!
    "True if the field is hidden"
    isHidden: Boolean
    "Name shown in server and desktop clients"
    name: String
    "The bin field that references this field"
    referencedByBins(
        "Filter by GraphQL field and given value"
        filter: BinField_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: BinFieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [BinField]
    "The bin field that references this field"
    referencedByBinsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: BinField_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: BinFieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): BinFieldsConnection
    "The calculated field that references this field"
    referencedByCalculations(
        "Filter by GraphQL field and given value"
        filter: CalculatedField_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: CalculatedFieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [CalculatedField]
    "The calculated field that references this field"
    referencedByCalculationsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: CalculatedField_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: CalculatedFieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): CalculatedFieldsConnection
    "The combined field that references this field"
    referencedByCombinedFields(
        "Filter by GraphQL field and given value"
        filter: CombinedField_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: CombinedFieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [CombinedField]
    "The combined field that references this field"
    referencedByCombinedFieldsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: CombinedField_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: CombinedFieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): CombinedFieldsConnection
    "Thie combined set field that references this field"
    referencedByCombinedSets(
        "Filter by GraphQL field and given value"
        filter: CombinedSetField_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: CombinedSetFieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [CombinedSetField]
    "Thie combined set field that references this field"
    referencedByCombinedSetsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: CombinedSetField_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: CombinedSetFieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): CombinedSetFieldsConnection
    "The field that references this field"
    referencedByFields(
        "Filter by GraphQL field and given value"
        filter: FieldReferencingField_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: FieldReferencingFieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [FieldReferencingField]
    "The field that references this field"
    referencedByFieldsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: FieldReferencingField_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: FieldReferencingFieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): FieldReferencingFieldsConnection
    "The data source filters that include this field"
    referencedByFilters(
        "Filter by GraphQL field and given value"
        filter: DatasourceFilter_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DatasourceFilterSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [DatasourceFilter]
    "The data source filters that include this field"
    referencedByFiltersConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: DatasourceFilter_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DatasourceFilterSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): DatasourceFiltersConnection
    "A flow input field that wraps this field"
    referencedByFlowFieldInputField(
        "Filter by GraphQL field and given value"
        filter: FlowFieldInputField_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: FlowFieldInputFieldSortOrder
    ): [FlowFieldInputField]
    "A flow input field that wraps this field"
    referencedByFlowFieldInputFieldConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: FlowFieldInputField_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: FlowFieldInputFieldSortOrder
    ): FlowFieldInputFieldsConnection
    "A flow output field that wraps this field"
    referencedByFlowFieldOutputField(
        "Filter by GraphQL field and given value"
        filter: FlowFieldOutputField_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: FlowFieldOutputFieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [FlowFieldOutputField]
    "A flow output field that wraps this field"
    referencedByFlowFieldOutputFieldConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: FlowFieldOutputField_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: FlowFieldOutputFieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): FlowFieldOutputFieldsConnection
    "The group field that references this field"
    referencedByGroups(
        "Filter by GraphQL field and given value"
        filter: GroupField_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: GroupFieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [GroupField]
    "The group field that references this field"
    referencedByGroupsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: GroupField_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: GroupFieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): GroupFieldsConnection
    "The hierarchy field that references this field"
    referencedByHierarchies(
        "Filter by GraphQL field and given value"
        filter: HierarchyField_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: HierarchyFieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [HierarchyField]
    "The hierarchy field that references this field"
    referencedByHierarchiesConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: HierarchyField_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: HierarchyFieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): HierarchyFieldsConnection
    "The field that references this remote field"
    referencedByRemoteFields(
        "Filter by GraphQL field and given value"
        filter: DatasourceField_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DatasourceFieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [DatasourceField]
    "The field that references this remote field"
    referencedByRemoteFieldsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: DatasourceField_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DatasourceFieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): DatasourceFieldsConnection
    "The set field that this field references"
    referencedBySets(
        "Filter by GraphQL field and given value"
        filter: SetField_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: SetFieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [SetField]
    "The set field that this field references"
    referencedBySetsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: SetField_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: SetFieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): SetFieldsConnection
    "Sheets that reference this data source field"
    sheets(
        "Filter by GraphQL field and given value"
        filter: Sheet_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: SheetSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Sheet]
    "Sheets that reference this data source field"
    sheetsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Sheet_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: SheetSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): SheetsConnection
    "All upstream columns this field references"
    upstreamColumns(
        "Filter by GraphQL field and given value"
        filter: Column_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: ColumnSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Column]!
    "All upstream columns this field references"
    upstreamColumnsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Column_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: ColumnSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): ColumnsConnection
    "Databases connected upstream from the field"
    upstreamDatabases(
        "Filter by GraphQL field and given value"
        filter: Database_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DatabaseSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Database!]!
    "Databases connected upstream from the field"
    upstreamDatabasesConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Database_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DatabaseSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): DatabasesConnection
    "Datasources connected upstream from the field"
    upstreamDatasources(
        "Filter by GraphQL field and given value"
        filter: PublishedDatasource_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: PublishedDatasourceSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [PublishedDatasource!]!
    "Datasources connected upstream from the field"
    upstreamDatasourcesConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: PublishedDatasource_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: PublishedDatasourceSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): PublishedDatasourcesConnection
    "fields that are upstream of this field"
    upstreamFields(
        "Filter by GraphQL field and given value"
        filter: Field_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: FieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Field]!
    "fields that are upstream of this field"
    upstreamFieldsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Field_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: FieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): FieldsConnection
    "Flows connected upstream from the field"
    upstreamFlows(
        "Filter by GraphQL field and given value"
        filter: Flow_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: FlowSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Flow!]!
    "Flows connected upstream from the field"
    upstreamFlowsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Flow_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: FlowSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): FlowsConnection
    "Tables connected upstream from the field"
    upstreamTables(
        "Filter by GraphQL field and given value"
        filter: DatabaseTable_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DatabaseTableSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [DatabaseTable!]!
    "Tables connected upstream from the field"
    upstreamTablesConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: DatabaseTable_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DatabaseTableSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): DatabaseTablesConnection
    "Virtual connection tables upstream of this field"
    upstreamVirtualConnectionTables(
        "Filter by GraphQL field and given value"
        filter: VirtualConnectionTable_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: VirtualConnectionTableSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [VirtualConnectionTable!]!
    "Virtual connection tables upstream of this field"
    upstreamVirtualConnectionTablesConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: VirtualConnectionTable_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: VirtualConnectionTableSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): VirtualConnectionTablesConnection
    "Virtual connections upstream of this field"
    upstreamVirtualConnections(
        "Filter by GraphQL field and given value"
        filter: VirtualConnection_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: VirtualConnectionSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [VirtualConnection!]!
    "Virtual connections upstream of this field"
    upstreamVirtualConnectionsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: VirtualConnection_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: VirtualConnectionSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): VirtualConnectionsConnection
}

"Connection Type for HierarchyField"
type HierarchyFieldsConnection {
    "List of nodes"
    nodes: [HierarchyField!]!
    "Information for pagination"
    pageInfo: PageInfo!
    "Total number of objects in connection"
    totalCount: Int!
}

"Wrapper type containing the inherited result"
type InheritedStringResult {
    "The object (i.e., inheritance source) where the attribute was inherited from"
    asset: Node
    "Unique identifier of the object (i.e., inheritance source) that is providing the inherited attribute"
    assetId: String!
    "Name of the property that is being inherited"
    attribute: String!
    "Number of edges in between the inheritance source and inheritance target"
    distance: Int
    "The edges between inheritance source and inheritance target"
    edges: [String!]
    "Inherited value"
    value: String
}

"""

Lenses are curated, embeddable Ask Data experiences.
*Available in Tableau Cloud June 2022 / Server 2022.3 and later.*
"""
type Lens {
    "The lens configured in askData extension"
    askDataExtensions(
        "Filter by GraphQL field and given value"
        filter: AskDataExtension_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: AskDataExtensionSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [AskDataExtension]
    "The lens configured in askData extension"
    askDataExtensionsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: AskDataExtension_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: AskDataExtensionSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): AskDataExtensionsConnection
    "Time the Lens was created"
    createdAt: DateTime!
    "Datasource this lens is derived from"
    datasource: Datasource!
    "Description of the Lens"
    description: String
    "\"Dashboards connected to the Lens\""
    downstreamDashboards(
        "Filter by GraphQL field and given value"
        filter: Dashboard_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DashboardSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Dashboard!]!
    downstreamDashboardsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Dashboard_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DashboardSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): DashboardsConnection
    "\"Metrics connected to the Lens\""
    downstreamMetrics(
        "Filter by GraphQL field and given value"
        filter: Metric_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: MetricSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Metric!]!
    downstreamMetricsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Metric_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: MetricSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): MetricsConnection
    "Owners of contents connected to the Lens"
    downstreamOwners(
        "Filter by GraphQL field and given value"
        filter: TableauUser_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: TableauUserSortOrder
    ): [TableauUser!]!
    "Owners of contents connected to the Lens"
    downstreamOwnersConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: TableauUser_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: TableauUserSortOrder
    ): TableauUsersConnection
    "\"Workbooks connected to the Lens\""
    downstreamWorkbooks(
        "Filter by GraphQL field and given value"
        filter: Workbook_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: WorkbookSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Workbook!]!
    downstreamWorkbooksConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Workbook_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: WorkbookSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): WorkbooksConnection
    "The list of fields"
    fields(
        "Filter by GraphQL field and given value"
        filter: LensField_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: LensFieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [LensField!]!
    "The list of fields"
    fieldsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: LensField_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: LensFieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): LensFieldsConnection
    "Unique identifier used by the metadata API.  Not the same as the numeric ID used on server"
    id: ID!
    "Locally unique identifier used for the REST API on the Tableau Server"
    luid: String!
    "Name shown in server"
    name: String
    "User who owns this Lens"
    owner: TableauUser!
    "The ID of the project in which the Lens is visible and usable."
    projectVizportalUrlId: String!
    "The site in which the Lens is visible and usable"
    site: TableauSite!
    "Time the Lens was last updated"
    updatedAt: DateTime!
    "The Databases that are upstream to this Lens"
    upstreamDatabases(
        "Filter by GraphQL field and given value"
        filter: Database_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DatabaseSortOrder
    ): [Database]
    "The Databases that are upstream to this Lens"
    upstreamDatabasesConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Database_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DatabaseSortOrder
    ): DatabasesConnection
    "The datasource that are upstream of this lens"
    upstreamDatasources(
        "Filter by GraphQL field and given value"
        filter: PublishedDatasource_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: PublishedDatasourceSortOrder
    ): [PublishedDatasource]
    "The datasource that are upstream of this lens"
    upstreamDatasourcesConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: PublishedDatasource_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: PublishedDatasourceSortOrder
    ): PublishedDatasourcesConnection
    "The fields that are upstream of this lens"
    upstreamFields(
        "Filter by GraphQL field and given value"
        filter: Field_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: FieldSortOrder
    ): [Field]
    "The fields that are upstream of this lens"
    upstreamFieldsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Field_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: FieldSortOrder
    ): FieldsConnection
    "The flows that are upstream of this Lens"
    upstreamFlows(
        "Filter by GraphQL field and given value"
        filter: Flow_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: FlowSortOrder
    ): [Flow]
    "The flows that are upstream of this Lens"
    upstreamFlowsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Flow_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: FlowSortOrder
    ): FlowsConnection
    "Tables that are upstream of this Lens"
    upstreamTables(
        "Filter by GraphQL field and given value"
        filter: Table_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: TableSortOrder
    ): [Table!]!
    "Tables that are upstream of this Lens"
    upstreamTablesConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Table_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: TableSortOrder
    ): TablesConnection
    "The virtual connection table upstream to this Lens"
    upstreamVirtualConnectionTables(
        "Filter by GraphQL field and given value"
        filter: VirtualConnectionTable_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: VirtualConnectionTableSortOrder
    ): [VirtualConnectionTable]
    "The virtual connection table upstream to this Lens"
    upstreamVirtualConnectionTablesConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: VirtualConnectionTable_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: VirtualConnectionTableSortOrder
    ): VirtualConnectionTablesConnection
    "The virtual connection upstream to this Lens"
    upstreamVirtualConnections(
        "Filter by GraphQL field and given value"
        filter: VirtualConnection_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: VirtualConnectionSortOrder
    ): [VirtualConnection]
    "The virtual connection upstream to this Lens"
    upstreamVirtualConnectionsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: VirtualConnection_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: VirtualConnectionSortOrder
    ): VirtualConnectionsConnection
    "VizPortal URL ID; used for URL generation"
    vizportalUrlId: String!
}

"Lens Fields contain extra information based on an underlying datasource field"
type LensField {
    "The Lens which contains this lens field"
    containingLens: Lens
    "Underlying datasource field this lens field is based on"
    datasourceField: Field!
    "Description of field shown in Ask Data. If null or empty, use description inherited from datasource field."
    description: String
    "Unique identifier used by the metadata API.  Not the same as the numeric ID used on server"
    id: ID!
    "Name of field shown locally in Ask Data. If null or empty, use name inherited from datasource field."
    name: String
}

"Connection Type for LensField"
type LensFieldsConnection {
    "List of nodes"
    nodes: [LensField!]!
    "Information for pagination"
    pageInfo: PageInfo!
    "Total number of objects in connection"
    totalCount: Int!
}

"Connection Type for Lens"
type LensesConnection {
    "List of nodes"
    nodes: [Lens!]!
    "Information for pagination"
    pageInfo: PageInfo!
    "Total number of objects in connection"
    totalCount: Int!
}

"Wrapper type including edge information"
type LinkedFlow {
    "Object in this linked flow"
    asset: Flow!
    "Unique identifier of the object in this linked flow"
    assetId: String!
    "The nodes preceding this node"
    fromEdges: [String!]
    "The nodes following this node"
    toEdges: [String!]
}

"Connection Type for LinkedFlow"
type LinkedFlowsConnection {
    "List of nodes"
    nodes: [LinkedFlow!]!
    "Information for pagination"
    pageInfo: PageInfo!
    "Total number of objects in connection"
    totalCount: Int!
}

"Metrics are time series data constructed from fields contained in views."
type Metric implements Taggable {
    "The name of the container in which the metric is visible and usable. This is always a project."
    containerName: String
    "The type of the container in which the metric is visible and usable. This is always a project."
    containerType: String!
    "Time the Metric was created"
    createdAt: DateTime!
    "Description of the Metric"
    description: String
    "Unique identifier used by the metadata API.  Not the same as the numeric ID used on server"
    id: ID!
    "Locally unique identifier used for the REST API on the Tableau Server"
    luid: String!
    "Name shown in server and desktop clients"
    name: String
    "User who owns this Metric"
    owner: TableauUser!
    "The name of the project in which the Metric is visible and usable."
    projectName: String
    "The ID of the project in which the Metric is visible and usable."
    projectVizportalUrlId: String!
    "The site in which the Metric is visible and usable"
    site: TableauSite!
    "Tags associated with the Metric"
    tags(
        "Filter by GraphQL field and given value"
        filter: Tag_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: TagSortOrder
    ): [Tag!]!
    "Tags associated with the Metric"
    tagsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Tag_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: TagSortOrder
    ): TagsConnection
    "The original View off of which the Metric is based"
    underlyingView: View
    "Time the Metric was last updated"
    updatedAt: DateTime!
    "Columns that are upstream of this metric"
    upstreamColumns(
        "Filter by GraphQL field and given value"
        filter: Column_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: ColumnSortOrder
    ): [Column]
    "Columns that are upstream of this metric"
    upstreamColumnsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Column_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: ColumnSortOrder
    ): ColumnsConnection
    "Data quality warnings upstream from this Metric"
    upstreamDataQualityWarnings(
        "Filter by GraphQL field and given value"
        filter: DataQualityWarning_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DataQualityWarningSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [DataQualityWarning!]!
    "Data quality warnings upstream from this Metric"
    upstreamDataQualityWarningsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: DataQualityWarning_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DataQualityWarningSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): DataQualityWarningsConnection
    "Databases that are upstream of this metric"
    upstreamDatabases(
        "Filter by GraphQL field and given value"
        filter: Database_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DatabaseSortOrder
    ): [Database]
    "Databases that are upstream of this metric"
    upstreamDatabasesConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Database_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DatabaseSortOrder
    ): DatabasesConnection
    "The Published Datasources that are upstream to this Metric"
    upstreamDatasources(
        "Filter by GraphQL field and given value"
        filter: PublishedDatasource_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: PublishedDatasourceSortOrder
    ): [PublishedDatasource]
    "The Published Datasources that are upstream to this Metric"
    upstreamDatasourcesConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: PublishedDatasource_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: PublishedDatasourceSortOrder
    ): PublishedDatasourcesConnection
    "fields that are upstream of this metric"
    upstreamFields(
        "Filter by GraphQL field and given value"
        filter: Field_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: FieldSortOrder
    ): [Field]
    "fields that are upstream of this metric"
    upstreamFieldsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Field_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: FieldSortOrder
    ): FieldsConnection
    "OutputFields that are upstream of this Metric"
    upstreamFlowColumnOutputFields(
        "Filter by GraphQL field and given value"
        filter: FlowColumnOutputField_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: FlowColumnOutputFieldSortOrder
    ): [FlowColumnOutputField]
    "OutputFields that are upstream of this Metric"
    upstreamFlowColumnOutputFieldsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: FlowColumnOutputField_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: FlowColumnOutputFieldSortOrder
    ): FlowColumnOutputFieldsConnection
    "OutputFields that are upstream of this Metric"
    upstreamFlowFieldOutputFields(
        "Filter by GraphQL field and given value"
        filter: FlowFieldOutputField_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: FlowFieldOutputFieldSortOrder
    ): [FlowFieldOutputField]
    "OutputFields that are upstream of this Metric"
    upstreamFlowFieldOutputFieldsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: FlowFieldOutputField_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: FlowFieldOutputFieldSortOrder
    ): FlowFieldOutputFieldsConnection
    "OutputFields that are upstream of this Metric"
    upstreamFlowOutputFields(
        "Filter by GraphQL field and given value"
        filter: FlowOutputField_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: FlowOutputFieldSortOrder
    ): [FlowOutputField]
    "OutputFields that are upstream of this Metric"
    upstreamFlowOutputFieldsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: FlowOutputField_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: FlowOutputFieldSortOrder
    ): FlowOutputFieldsConnection
    "The flows that are upstream of this metric"
    upstreamFlows(
        "Filter by GraphQL field and given value"
        filter: Flow_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: FlowSortOrder
    ): [Flow]
    "The flows that are upstream of this metric"
    upstreamFlowsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Flow_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: FlowSortOrder
    ): FlowsConnection
    "The Lenses that are upstream of this workbook"
    upstreamLenses(
        "Filter by GraphQL field and given value"
        filter: Lens_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: LensSortOrder
    ): [Lens]
    "The Lenses that are upstream of this workbook"
    upstreamLensesConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Lens_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: LensSortOrder
    ): LensesConnection
    "tables that are upstream of this metric"
    upstreamTables(
        "Filter by GraphQL field and given value"
        filter: DatabaseTable_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DatabaseTableSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [DatabaseTable]!
    "tables that are upstream of this metric"
    upstreamTablesConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: DatabaseTable_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DatabaseTableSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): DatabaseTablesConnection
    "Workbooks that are upstream of this metric"
    upstreamWorkbooks(
        "Filter by GraphQL field and given value"
        filter: Workbook_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: WorkbookSortOrder
    ): [Workbook]
    "Workbooks that are upstream of this metric"
    upstreamWorkbooksConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Workbook_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: WorkbookSortOrder
    ): WorkbooksConnection
    "VizPortal URL ID; used for URL generation"
    vizportalUrlId: String!
}

"Connection Type for Metric"
type MetricsConnection {
    "List of nodes"
    nodes: [Metric!]!
    "Information for pagination"
    pageInfo: PageInfo!
    "Total number of objects in connection"
    totalCount: Int!
}

"Connection Type for Node"
type NodesConnection {
    "List of nodes"
    nodes: [Node!]!
    "Information for pagination"
    pageInfo: PageInfo!
    "Total number of objects in connection"
    totalCount: Int!
}

"Information about pagination in a connection"
type PageInfo {
    "Cursor to use in subsequent query to fetch next page of objects"
    endCursor: String
    "Indicates if there are more objects to fetch"
    hasNextPage: Boolean!
}

"Tableau Parameter. For more info see https://onlinehelp.tableau.com/current/pro/desktop/en-us/parameters_create.html"
type Parameter {
    "Published data source that contains this parameter"
    datasource: PublishedDatasource
    "Unique identifier used by the metadata API.  Not the same as the numeric ID used on server"
    id: ID!
    "Name of parameter"
    name: String
    "Name of the parameter's parent"
    parentName: String
    "The bin field that references this parameter"
    referencedByBins(
        "Filter by GraphQL field and given value"
        filter: BinField_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: BinFieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [BinField]
    "The bin field that references this parameter"
    referencedByBinsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: BinField_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: BinFieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): BinFieldsConnection
    "The calculated field that references this parameter"
    referencedByCalculations(
        "Filter by GraphQL field and given value"
        filter: CalculatedField_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: CalculatedFieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [CalculatedField]
    "The calculated field that references this parameter"
    referencedByCalculationsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: CalculatedField_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: CalculatedFieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): CalculatedFieldsConnection
    "The set field that this parameter references"
    referencedBySets(
        "Filter by GraphQL field and given value"
        filter: SetField_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: SetFieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [SetField]
    "The set field that this parameter references"
    referencedBySetsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: SetField_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: SetFieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): SetFieldsConnection
    "Workbook that contains this parameter"
    workbook: Workbook
}

"Connection Type for Parameter"
type ParametersConnection {
    "List of nodes"
    nodes: [Parameter!]!
    "Information for pagination"
    pageInfo: PageInfo!
    "Total number of objects in connection"
    totalCount: Int!
}

" Tableau data source that has been published separately to Tableau Server. It can be used by multiple workbooks."
type PublishedDatasource implements Certifiable & Datasource & Taggable & Warnable {
    "Notes related to the data source being marked as certified"
    certificationNote: String @deprecated(reason: "No longer supported. Use 'dataQualityCertifications'")
    "User who marked this data source as certified"
    certifier: TableauUser @deprecated(reason: "No longer supported. Use 'dataQualityCertifications'")
    "Name of the user who marked this data source as certified"
    certifierDisplayName: String @deprecated(reason: "No longer supported. Use 'dataQualityCertifications'")
    "The name of the container in which the published data source is visible and usable. Either a personal space or project."
    containerName: String
    "The type of the container in which the published data source is visible and usable. Either personal space or project."
    containerType: String!
    "True if the datasource contains unsupported custom SQL, in which case lineage may be incomplete"
    containsUnsupportedCustomSql: Boolean
    "Time the datasource was created. Available in Tableau Cloud June 2022 / Server 2022.3 and later."
    createdAt: DateTime
    "The data quality certifications on a published datasource"
    dataQualityCertifications(
        "Filter by GraphQL field and given value"
        filter: DataQualityCertification_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DataQualityCertificationSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [DataQualityCertification!]!
    "The data quality certifications on a published datasource"
    dataQualityCertificationsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: DataQualityCertification_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DataQualityCertificationSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): DataQualityCertificationsConnection
    "The optional data quality warning on a published datasource"
    dataQualityWarning: DataQualityWarning @deprecated(reason: "Use 'dataQualityWarnings'")
    "The data quality warnings on a published datasource"
    dataQualityWarnings(
        "Filter by GraphQL field and given value"
        filter: DataQualityWarning_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DataQualityWarningSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [DataQualityWarning!]!
    "The data quality warnings on a published datasource"
    dataQualityWarningsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: DataQualityWarning_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DataQualityWarningSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): DataQualityWarningsConnection
    "Data source filters contained in this data source"
    datasourceFilters(
        "Filter by GraphQL field and given value"
        filter: DatasourceFilter_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DatasourceFilterSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [DatasourceFilter!]!
    "Data source filters contained in this data source"
    datasourceFiltersConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: DatasourceFilter_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DatasourceFilterSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): DatasourceFiltersConnection
    "Description of the datasource"
    description: String
    "Dashboards connected downstream from the field"
    downstreamDashboards(
        "Filter by GraphQL field and given value"
        filter: Dashboard_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DashboardSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Dashboard!]!
    "Dashboards connected downstream from the field"
    downstreamDashboardsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Dashboard_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DashboardSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): DashboardsConnection
    "Databases downstream from this data source"
    downstreamDatabases(
        "Filter by GraphQL field and given value"
        filter: Database_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DatabaseSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Database!]!
    "Databases downstream from this data source"
    downstreamDatabasesConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Database_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DatabaseSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): DatabasesConnection
    "Datasources downstream from this data source"
    downstreamDatasources(
        "Filter by GraphQL field and given value"
        filter: PublishedDatasource_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: PublishedDatasourceSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [PublishedDatasource!]!
    "Datasources downstream from this data source"
    downstreamDatasourcesConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: PublishedDatasource_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: PublishedDatasourceSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): PublishedDatasourcesConnection
    "Flows downstream from this data source"
    downstreamFlows(
        "Filter by GraphQL field and given value"
        filter: Flow_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: FlowSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Flow!]!
    "Flows downstream from this data source"
    downstreamFlowsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Flow_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: FlowSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): FlowsConnection
    "Lenses connected downstream from this field"
    downstreamLenses(
        "Filter by GraphQL field and given value"
        filter: Lens_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: LensSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Lens!]
    "Lenses connected downstream from this field"
    downstreamLensesConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Lens_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: LensSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): LensesConnection
    "Metrics downstream from this data source"
    downstreamMetrics(
        "Filter by GraphQL field and given value"
        filter: Metric_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: MetricSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Metric!]!
    "Metrics downstream from this data source"
    downstreamMetricsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Metric_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: MetricSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): MetricsConnection
    "Workbook owners downstream from this data source"
    downstreamOwners(
        "Filter by GraphQL field and given value"
        filter: TableauUser_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: TableauUserSortOrder
    ): [TableauUser!]!
    "Workbook owners downstream from this data source"
    downstreamOwnersConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: TableauUser_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: TableauUserSortOrder
    ): TableauUsersConnection
    "Sheets downstream from this data source"
    downstreamSheets(
        "Filter by GraphQL field and given value"
        filter: Sheet_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: SheetSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Sheet!]!
    "Sheets downstream from this data source"
    downstreamSheetsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Sheet_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: SheetSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): SheetsConnection
    "Tables downstream from this data source"
    downstreamTables(
        "Filter by GraphQL field and given value"
        filter: DatabaseTable_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DatabaseTableSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [DatabaseTable!]!
    "Tables downstream from this data source"
    downstreamTablesConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: DatabaseTable_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DatabaseTableSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): DatabaseTablesConnection
    "Virtual connection tables downstream of this data source"
    downstreamVirtualConnectionTables(
        "Filter by GraphQL field and given value"
        filter: VirtualConnectionTable_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: VirtualConnectionTableSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [VirtualConnectionTable!]!
    "Virtual connection tables downstream of this data source"
    downstreamVirtualConnectionTablesConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: VirtualConnectionTable_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: VirtualConnectionTableSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): VirtualConnectionTablesConnection
    "Virtual connections downstream from this data source"
    downstreamVirtualConnections(
        "Filter by GraphQL field and given value"
        filter: VirtualConnection_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: VirtualConnectionSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [VirtualConnection!]!
    "Virtual connections downstream from this data source"
    downstreamVirtualConnectionsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: VirtualConnection_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: VirtualConnectionSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): VirtualConnectionsConnection
    "Workbooks downstream from this data source"
    downstreamWorkbooks(
        "Filter by GraphQL field and given value"
        filter: Workbook_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: WorkbookSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Workbook!]!
    "Workbooks downstream from this data source"
    downstreamWorkbooksConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Workbook_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: WorkbookSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): WorkbooksConnection
    "Time an extract was last incrementally updated"
    extractLastIncrementalUpdateTime: DateTime
    "Time an extract was last fully refreshed"
    extractLastRefreshTime: DateTime
    "Time an extract was last updated by either a full refresh, incremental update, or creation"
    extractLastUpdateTime: DateTime
    "Fields usable in workbooks connected to this data source"
    fields(
        "Filter by GraphQL field and given value"
        filter: Field_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: FieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Field!]!
    "Fields usable in workbooks connected to this data source"
    fieldsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Field_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: FieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): FieldsConnection
    "True if the data source has an active data quality warning"
    hasActiveWarning: Boolean!
    "True if datasource contains extracted data"
    hasExtracts: Boolean
    "True if data source contains a formula that involves a user function (for example, USERNAME or ISMEMBEROF)"
    hasUserReference: Boolean
    "Unique identifier used by the metadata API.  Not the same as the numeric ID used on server"
    id: ID!
    "True if this data source contains an active data quality certification"
    isCertified: Boolean!
    "The lenses derived from this datasource"
    lenses(
        "Filter by GraphQL field and given value"
        filter: Lens_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: LensSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Lens]
    "The lenses derived from this datasource"
    lensesConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Lens_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: LensSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): LensesConnection
    "Locally unique identifier used for the REST API on the Tableau Server"
    luid: String!
    "Name shown in server and desktop clients"
    name: String
    "User who owns this data source"
    owner: TableauUser!
    "List of parameters, if any, used in this data source"
    parameters(
        "Filter by GraphQL field and given value"
        filter: Parameter_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: ParameterSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Parameter!]!
    "List of parameters, if any, used in this data source"
    parametersConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Parameter_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: ParameterSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): ParametersConnection
    "The name of the project that contains this published data source."
    projectName: String
    "The ID of the project in which the published data source is visible and usable. Will return null if the published data source is not in a project."
    projectVizportalUrlId: String
    "The site which contains this published data source"
    site: TableauSite!
    "Tags associated with the published datasource"
    tags(
        "Filter by GraphQL field and given value"
        filter: Tag_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: TagSortOrder
    ): [Tag!]!
    "Tags associated with the published datasource"
    tagsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Tag_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: TagSortOrder
    ): TagsConnection
    "Time the datasource was last updated. Available in Tableau Cloud June 2022 / Server 2022.3 and later."
    updatedAt: DateTime
    "Data quality warnings upstream from this data source"
    upstreamDataQualityWarnings(
        "Filter by GraphQL field and given value"
        filter: DataQualityWarning_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DataQualityWarningSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [DataQualityWarning!]!
    "Data quality warnings upstream from this data source"
    upstreamDataQualityWarningsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: DataQualityWarning_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DataQualityWarningSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): DataQualityWarningsConnection
    "Databases upstream from this data source"
    upstreamDatabases(
        "Filter by GraphQL field and given value"
        filter: Database_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DatabaseSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Database!]!
    "Databases upstream from this data source"
    upstreamDatabasesConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Database_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DatabaseSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): DatabasesConnection
    "Datasources upstream from this data source"
    upstreamDatasources(
        "Filter by GraphQL field and given value"
        filter: PublishedDatasource_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: PublishedDatasourceSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [PublishedDatasource!]!
    "Datasources upstream from this data source"
    upstreamDatasourcesConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: PublishedDatasource_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: PublishedDatasourceSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): PublishedDatasourcesConnection
    "Flows upstream from this data source"
    upstreamFlows(
        "Filter by GraphQL field and given value"
        filter: Flow_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: FlowSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Flow!]!
    "Flows upstream from this data source"
    upstreamFlowsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Flow_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: FlowSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): FlowsConnection
    "Tables upstream from this data source"
    upstreamTables(
        "Filter by GraphQL field and given value"
        filter: DatabaseTable_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DatabaseTableSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [DatabaseTable!]!
    "Tables upstream from this data source"
    upstreamTablesConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: DatabaseTable_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DatabaseTableSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): DatabaseTablesConnection
    "The virtual connection table upstream to this Datasource"
    upstreamVirtualConnectionTables(
        "Filter by GraphQL field and given value"
        filter: VirtualConnectionTable_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: VirtualConnectionTableSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [VirtualConnectionTable]!
    "The virtual connection table upstream to this Datasource"
    upstreamVirtualConnectionTablesConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: VirtualConnectionTable_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: VirtualConnectionTableSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): VirtualConnectionTablesConnection
    "The virtual connection upstream to this Datasource"
    upstreamVirtualConnections(
        "Filter by GraphQL field and given value"
        filter: VirtualConnection_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: VirtualConnectionSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [VirtualConnection]!
    "The virtual connection upstream to this Datasource"
    upstreamVirtualConnectionsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: VirtualConnection_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: VirtualConnectionSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): VirtualConnectionsConnection
    "Uri of the datasource"
    uri: String
    "Vizportal ID of this published datasource, for use in client-to-server communications"
    vizportalId: String!
    "VizPortal URL ID; used for URL generation"
    vizportalUrlId: String!
}

"Connection Type for PublishedDatasource"
type PublishedDatasourcesConnection {
    "List of nodes"
    nodes: [PublishedDatasource!]!
    "Information for pagination"
    pageInfo: PageInfo!
    "Total number of objects in connection"
    totalCount: Int!
}

"Query root for Metadata GraphQL interface"
type Query {
    "Fetches AskDataExtensions by filtering on id or name"
    askDataExtensions(
        "Filter by GraphQL field and given value"
        filter: AskDataExtension_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: AskDataExtensionSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [AskDataExtension!]!
    "Fetch AskDataExtensions with support for pagination"
    askDataExtensionsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: AskDataExtension_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: AskDataExtensionSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): AskDataExtensionsConnection!
    "Fetches BinFields by filtering on id or name"
    binFields(
        "Filter by GraphQL field and given value"
        filter: BinField_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: BinFieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [BinField!]!
    "Fetch BinFields with support for pagination"
    binFieldsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: BinField_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: BinFieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): BinFieldsConnection!
    "Fetches CalculatedFields by filtering on id or name"
    calculatedFields(
        "Filter by GraphQL field and given value"
        filter: CalculatedField_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: CalculatedFieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [CalculatedField!]!
    "Fetch CalculatedFields with support for pagination"
    calculatedFieldsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: CalculatedField_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: CalculatedFieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): CalculatedFieldsConnection!
    "Fetches CloudFiles by filtering on id or name"
    cloudFiles(
        "Filter by GraphQL field and given value"
        filter: CloudFile_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: CloudFileSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [CloudFile!]!
    "Fetch CloudFiles with support for pagination"
    cloudFilesConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: CloudFile_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: CloudFileSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): CloudFilesConnection!
    "Fetches ColumnFields by filtering on id or name"
    columnFields(
        "Filter by GraphQL field and given value"
        filter: ColumnField_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: ColumnFieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [ColumnField!]!
    "Fetch ColumnFields with support for pagination"
    columnFieldsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: ColumnField_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: ColumnFieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): ColumnFieldsConnection!
    "Fetches Columns by filtering on id or name"
    columns(
        "Filter by GraphQL field and given value"
        filter: Column_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: ColumnSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Column!]!
    "Fetch Columns with support for pagination"
    columnsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Column_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: ColumnSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): ColumnsConnection!
    "Fetches CombinedFields by filtering on id or name"
    combinedFields(
        "Filter by GraphQL field and given value"
        filter: CombinedField_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: CombinedFieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [CombinedField!]!
    "Fetch CombinedFields with support for pagination"
    combinedFieldsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: CombinedField_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: CombinedFieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): CombinedFieldsConnection!
    "Fetches CombinedSetFields by filtering on id or name"
    combinedSetFields(
        "Filter by GraphQL field and given value"
        filter: CombinedSetField_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: CombinedSetFieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [CombinedSetField!]!
    "Fetch CombinedSetFields with support for pagination"
    combinedSetFieldsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: CombinedSetField_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: CombinedSetFieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): CombinedSetFieldsConnection!
    "Fetches CustomSQLTables by filtering on id or name"
    customSQLTables(
        "Filter by GraphQL field and given value"
        filter: CustomSQLTable_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: CustomSQLTableSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [CustomSQLTable!]!
    "Fetch CustomSQLTables with support for pagination"
    customSQLTablesConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: CustomSQLTable_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: CustomSQLTableSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): CustomSQLTablesConnection!
    "Fetches Dashboards by filtering on id or name"
    dashboards(
        "Filter by GraphQL field and given value"
        filter: Dashboard_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DashboardSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Dashboard!]!
    "Fetch Dashboards with support for pagination"
    dashboardsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Dashboard_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DashboardSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): DashboardsConnection!
    "Fetches DataQualityCertifications by filtering on id or name"
    dataQualityCertifications(
        "Filter by GraphQL field and given value"
        filter: DataQualityCertification_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DataQualityCertificationSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [DataQualityCertification!]!
    "Fetch DataQualityCertifications with support for pagination"
    dataQualityCertificationsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: DataQualityCertification_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DataQualityCertificationSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): DataQualityCertificationsConnection!
    "Fetches DataQualityWarnings by filtering on id or name"
    dataQualityWarnings(
        "Filter by GraphQL field and given value"
        filter: DataQualityWarning_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DataQualityWarningSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [DataQualityWarning!]!
    "Fetch DataQualityWarnings with support for pagination"
    dataQualityWarningsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: DataQualityWarning_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DataQualityWarningSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): DataQualityWarningsConnection!
    "Fetches DatabaseServers by filtering on id or name"
    databaseServers(
        "Filter by GraphQL field and given value"
        filter: DatabaseServer_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DatabaseServerSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [DatabaseServer!]!
    "Fetch DatabaseServers with support for pagination"
    databaseServersConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: DatabaseServer_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DatabaseServerSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): DatabaseServersConnection!
    "Fetches DatabaseTables by filtering on id or name"
    databaseTables(
        "Filter by GraphQL field and given value"
        filter: DatabaseTable_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DatabaseTableSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [DatabaseTable!]!
    "Fetch DatabaseTables with support for pagination"
    databaseTablesConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: DatabaseTable_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DatabaseTableSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): DatabaseTablesConnection!
    "Fetches Databases by filtering on id or name"
    databases(
        "Filter by GraphQL field and given value"
        filter: Database_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DatabaseSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Database!]!
    "Fetch Databases with support for pagination"
    databasesConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Database_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DatabaseSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): DatabasesConnection!
    "Fetches DatasourceFields by filtering on id or name"
    datasourceFields(
        "Filter by GraphQL field and given value"
        filter: DatasourceField_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DatasourceFieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [DatasourceField!]!
    "Fetch DatasourceFields with support for pagination"
    datasourceFieldsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: DatasourceField_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DatasourceFieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): DatasourceFieldsConnection!
    "Fetches DatasourceFilters by filtering on id or name"
    datasourceFilters(
        "Filter by GraphQL field and given value"
        filter: DatasourceFilter_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DatasourceFilterSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [DatasourceFilter!]!
    "Fetch DatasourceFilters with support for pagination"
    datasourceFiltersConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: DatasourceFilter_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DatasourceFilterSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): DatasourceFiltersConnection!
    "Fetches Datasources by filtering on id or name"
    datasources(
        "Filter by GraphQL field and given value"
        filter: Datasource_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DatasourceSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Datasource!]!
    "Fetch Datasources with support for pagination"
    datasourcesConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Datasource_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DatasourceSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): DatasourcesConnection!
    "Fetches EmbeddedDatasources by filtering on id or name"
    embeddedDatasources(
        "Filter by GraphQL field and given value"
        filter: EmbeddedDatasource_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: EmbeddedDatasourceSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [EmbeddedDatasource!]!
    "Fetch EmbeddedDatasources with support for pagination"
    embeddedDatasourcesConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: EmbeddedDatasource_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: EmbeddedDatasourceSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): EmbeddedDatasourcesConnection!
    "Fetches Fields by filtering on id or name"
    fields(
        "Filter by GraphQL field and given value"
        filter: Field_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: FieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Field!]!
    "Fetch Fields with support for pagination"
    fieldsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Field_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: FieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): FieldsConnection!
    "Fetches Files by filtering on id or name"
    files(
        "Filter by GraphQL field and given value"
        filter: File_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: FileSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [File!]!
    "Fetch Files with support for pagination"
    filesConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: File_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: FileSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): FilesConnection!
    "Fetches FlowColumnInputFields by filtering on id or name"
    flowColumnInputFields(
        "Filter by GraphQL field and given value"
        filter: FlowColumnInputField_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: FlowColumnInputFieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [FlowColumnInputField!]!
    "Fetch FlowColumnInputFields with support for pagination"
    flowColumnInputFieldsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: FlowColumnInputField_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: FlowColumnInputFieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): FlowColumnInputFieldsConnection!
    "Fetches FlowColumnOutputFields by filtering on id or name"
    flowColumnOutputFields(
        "Filter by GraphQL field and given value"
        filter: FlowColumnOutputField_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: FlowColumnOutputFieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [FlowColumnOutputField!]!
    "Fetch FlowColumnOutputFields with support for pagination"
    flowColumnOutputFieldsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: FlowColumnOutputField_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: FlowColumnOutputFieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): FlowColumnOutputFieldsConnection!
    "Fetches FlowFieldInputFields by filtering on id or name"
    flowFieldInputFields(
        "Filter by GraphQL field and given value"
        filter: FlowFieldInputField_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: FlowFieldInputFieldSortOrder
    ): [FlowFieldInputField!]!
    "Fetch FlowFieldInputFields with support for pagination"
    flowFieldInputFieldsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: FlowFieldInputField_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: FlowFieldInputFieldSortOrder
    ): FlowFieldInputFieldsConnection!
    "Fetches FlowFieldOutputFields by filtering on id or name"
    flowFieldOutputFields(
        "Filter by GraphQL field and given value"
        filter: FlowFieldOutputField_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: FlowFieldOutputFieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [FlowFieldOutputField!]!
    "Fetch FlowFieldOutputFields with support for pagination"
    flowFieldOutputFieldsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: FlowFieldOutputField_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: FlowFieldOutputFieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): FlowFieldOutputFieldsConnection!
    "Fetches FlowOutputSteps by filtering on id or name"
    flowOutputSteps(
        "Filter by GraphQL field and given value"
        filter: FlowOutputStep_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: FlowOutputStepSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [FlowOutputStep!]!
    "Fetch FlowOutputSteps with support for pagination"
    flowOutputStepsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: FlowOutputStep_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: FlowOutputStepSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): FlowOutputStepsConnection!
    "Fetches Flows by filtering on id or name"
    flows(
        "Filter by GraphQL field and given value"
        filter: Flow_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: FlowSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Flow!]!
    "Fetch Flows with support for pagination"
    flowsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Flow_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: FlowSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): FlowsConnection!
    "Fetches GroupFields by filtering on id or name"
    groupFields(
        "Filter by GraphQL field and given value"
        filter: GroupField_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: GroupFieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [GroupField!]!
    "Fetch GroupFields with support for pagination"
    groupFieldsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: GroupField_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: GroupFieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): GroupFieldsConnection!
    "Fetches HierarchyFields by filtering on id or name"
    hierarchyFields(
        "Filter by GraphQL field and given value"
        filter: HierarchyField_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: HierarchyFieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [HierarchyField!]!
    "Fetch HierarchyFields with support for pagination"
    hierarchyFieldsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: HierarchyField_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: HierarchyFieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): HierarchyFieldsConnection!
    "Fetches LensFields by filtering on id or name"
    lensFields(
        "Filter by GraphQL field and given value"
        filter: LensField_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: LensFieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [LensField!]!
    "Fetch LensFields with support for pagination"
    lensFieldsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: LensField_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: LensFieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): LensFieldsConnection!
    "Fetches Lenses by filtering on id or name"
    lenses(
        "Filter by GraphQL field and given value"
        filter: Lens_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: LensSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Lens!]!
    "Fetch Lenss with support for pagination"
    lensesConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Lens_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: LensSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): LensesConnection!
    "Fetches Metrics by filtering on id or name"
    metrics(
        "Filter by GraphQL field and given value"
        filter: Metric_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: MetricSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Metric!]!
    "Fetch Metrics with support for pagination"
    metricsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Metric_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: MetricSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): MetricsConnection!
    "Fetches Parameters by filtering on id or name"
    parameters(
        "Filter by GraphQL field and given value"
        filter: Parameter_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: ParameterSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Parameter!]!
    "Fetch Parameters with support for pagination"
    parametersConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Parameter_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: ParameterSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): ParametersConnection!
    "Fetches PublishedDatasources by filtering on id or name"
    publishedDatasources(
        "Filter by GraphQL field and given value"
        filter: PublishedDatasource_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: PublishedDatasourceSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [PublishedDatasource!]!
    "Fetch PublishedDatasources with support for pagination"
    publishedDatasourcesConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: PublishedDatasource_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: PublishedDatasourceSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): PublishedDatasourcesConnection!
    "Fetches SetFields by filtering on id or name"
    setFields(
        "Filter by GraphQL field and given value"
        filter: SetField_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: SetFieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [SetField!]!
    "Fetch SetFields with support for pagination"
    setFieldsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: SetField_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: SetFieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): SetFieldsConnection!
    "Fetches Sheets by filtering on id or name"
    sheets(
        "Filter by GraphQL field and given value"
        filter: Sheet_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: SheetSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Sheet!]!
    "Fetch Sheets with support for pagination"
    sheetsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Sheet_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: SheetSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): SheetsConnection!
    "Fetches TableauSites by filtering on id or name"
    tableauSites(
        "Filter by GraphQL field and given value"
        filter: TableauSite_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: TableauSiteSortOrder
    ): [TableauSite!]!
    "Fetch TableauSites with support for pagination"
    tableauSitesConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: TableauSite_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: TableauSiteSortOrder
    ): TableauSitesConnection!
    "Fetches TableauUsers by filtering on id or name"
    tableauUsers(
        "Filter by GraphQL field and given value"
        filter: TableauUser_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: TableauUserSortOrder
    ): [TableauUser!]!
    "Fetch TableauUsers with support for pagination"
    tableauUsersConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: TableauUser_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: TableauUserSortOrder
    ): TableauUsersConnection!
    "Fetches Tables by filtering on id or name"
    tables(
        "Filter by GraphQL field and given value"
        filter: Table_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: TableSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Table!]!
    "Fetch Tables with support for pagination"
    tablesConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Table_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: TableSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): TablesConnection!
    "Fetches Tags by filtering on id or name"
    tags(
        "Filter by GraphQL field and given value"
        filter: Tag_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: TagSortOrder
    ): [Tag!]!
    "Fetch Tags with support for pagination"
    tagsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Tag_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: TagSortOrder
    ): TagsConnection!
    "Fetches Views by filtering on id or name"
    views(
        "Filter by GraphQL field and given value"
        filter: View_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: ViewSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [View!]!
    "Fetch Views with support for pagination"
    viewsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: View_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: ViewSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): ViewsConnection!
    "Fetches VirtualConnectionTables by filtering on id or name"
    virtualConnectionTables(
        "Filter by GraphQL field and given value"
        filter: VirtualConnectionTable_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: VirtualConnectionTableSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [VirtualConnectionTable!]!
    "Fetch VirtualConnectionTables with support for pagination"
    virtualConnectionTablesConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: VirtualConnectionTable_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: VirtualConnectionTableSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): VirtualConnectionTablesConnection!
    "Fetches VirtualConnections by filtering on id or name"
    virtualConnections(
        "Filter by GraphQL field and given value"
        filter: VirtualConnection_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: VirtualConnectionSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [VirtualConnection!]!
    "Fetch VirtualConnections with support for pagination"
    virtualConnectionsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: VirtualConnection_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: VirtualConnectionSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): VirtualConnectionsConnection!
    "Fetches WebDataConnectors by filtering on id or name"
    webDataConnectors(
        "Filter by GraphQL field and given value"
        filter: WebDataConnector_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: WebDataConnectorSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [WebDataConnector!]!
    "Fetch WebDataConnectors with support for pagination"
    webDataConnectorsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: WebDataConnector_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: WebDataConnectorSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): WebDataConnectorsConnection!
    "Fetches Workbooks by filtering on id or name"
    workbooks(
        "Filter by GraphQL field and given value"
        filter: Workbook_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: WorkbookSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Workbook!]!
    "Fetch Workbooks with support for pagination"
    workbooksConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Workbook_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: WorkbookSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): WorkbooksConnection!
}

"GraphQL type for a set field. See https://onlinehelp.tableau.com/current/pro/desktop/en-us/sortgroup_sets_create.html"
type SetField implements Field & FieldReferencingField & Node {
    "Data source that contains this field"
    datasource: Datasource
    "List of lens fields which are derived from this field"
    derivedLensFields(
        "Filter by GraphQL field and given value"
        filter: LensField_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: LensFieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [LensField]
    "List of lens fields which are derived from this field"
    derivedLensFieldsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: LensField_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: LensFieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): LensFieldsConnection
    "Description of field shown in server and desktop clients"
    description: String
    "description that is shown in the Tableau UI"
    descriptionInherited(
        "Method for selecting inherited value"
        inheritanceType: InheritanceType,
        "Option to select how to apply permissions. By default it is OBFUSCATE_RESULTS"
        permissionMode: PermissionMode
    ): [InheritedStringResult]
    "Sheets that reference this field"
    directSheets(
        "Filter by GraphQL field and given value"
        filter: Sheet_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: SheetSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Sheet]
    "Sheets that reference this field"
    directSheetsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Sheet_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: SheetSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): SheetsConnection
    "Columns downstream of this field"
    downstreamColumns(
        "Filter by GraphQL field and given value"
        filter: Column_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: ColumnSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Column!]!
    "Columns downstream of this field"
    downstreamColumnsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Column_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: ColumnSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): ColumnsConnection
    "Dashboards connected downstream from the field"
    downstreamDashboards(
        "Filter by GraphQL field and given value"
        filter: Dashboard_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DashboardSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Dashboard!]!
    "Dashboards connected downstream from the field"
    downstreamDashboardsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Dashboard_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DashboardSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): DashboardsConnection
    "Databases downstream of this field"
    downstreamDatabases(
        "Filter by GraphQL field and given value"
        filter: Database_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DatabaseSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Database!]!
    "Databases downstream of this field"
    downstreamDatabasesConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Database_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DatabaseSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): DatabasesConnection
    "Datasources connected downstream from this field"
    downstreamDatasources(
        "Filter by GraphQL field and given value"
        filter: PublishedDatasource_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: PublishedDatasourceSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [PublishedDatasource!]
    "Datasources connected downstream from this field"
    downstreamDatasourcesConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: PublishedDatasource_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: PublishedDatasourceSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): PublishedDatasourcesConnection
    "downstream fields that reference this field"
    downstreamFields(
        "Filter by GraphQL field and given value"
        filter: Field_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: FieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Field!]!
    "downstream fields that reference this field"
    downstreamFieldsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Field_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: FieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): FieldsConnection
    "Flows downstream of this field"
    downstreamFlows(
        "Filter by GraphQL field and given value"
        filter: Flow_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: FlowSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Flow!]!
    "Flows downstream of this field"
    downstreamFlowsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Flow_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: FlowSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): FlowsConnection
    "Lenses connected downstream from this field"
    downstreamLenses(
        "Filter by GraphQL field and given value"
        filter: Lens_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: LensSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Lens!]
    "Lenses connected downstream from this field"
    downstreamLensesConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Lens_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: LensSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): LensesConnection
    "Metrics connected downstream from the field"
    downstreamMetrics(
        "Filter by GraphQL field and given value"
        filter: Metric_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: MetricSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Metric!]
    "Metrics connected downstream from the field"
    downstreamMetricsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Metric_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: MetricSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): MetricsConnection
    "Workbook owners (authors) connected downstream from the field"
    downstreamOwners(
        "Filter by GraphQL field and given value"
        filter: TableauUser_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: TableauUserSortOrder
    ): [TableauUser!]
    "Workbook owners (authors) connected downstream from the field"
    downstreamOwnersConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: TableauUser_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: TableauUserSortOrder
    ): TableauUsersConnection
    "Sheets connected downstream from the field"
    downstreamSheets(
        "Filter by GraphQL field and given value"
        filter: Sheet_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: SheetSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Sheet!]!
    "Sheets connected downstream from the field"
    downstreamSheetsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Sheet_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: SheetSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): SheetsConnection
    "Tables downstream of this field"
    downstreamTables(
        "Filter by GraphQL field and given value"
        filter: DatabaseTable_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DatabaseTableSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [DatabaseTable!]!
    "Tables downstream of this field"
    downstreamTablesConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: DatabaseTable_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DatabaseTableSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): DatabaseTablesConnection
    "Virtual connection tables downstream of this field"
    downstreamVirtualConnectionTables(
        "Filter by GraphQL field and given value"
        filter: VirtualConnectionTable_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: VirtualConnectionTableSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [VirtualConnectionTable!]!
    "Virtual connection tables downstream of this field"
    downstreamVirtualConnectionTablesConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: VirtualConnectionTable_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: VirtualConnectionTableSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): VirtualConnectionTablesConnection
    "Virtual connections downstream of this field"
    downstreamVirtualConnections(
        "Filter by GraphQL field and given value"
        filter: VirtualConnection_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: VirtualConnectionSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [VirtualConnection!]!
    "Virtual connections downstream of this field"
    downstreamVirtualConnectionsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: VirtualConnection_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: VirtualConnectionSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): VirtualConnectionsConnection
    "Workbooks connected downstream from the field"
    downstreamWorkbooks(
        "Filter by GraphQL field and given value"
        filter: Workbook_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: WorkbookSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Workbook!]
    "Workbooks connected downstream from the field"
    downstreamWorkbooksConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Workbook_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: WorkbookSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): WorkbooksConnection
    "List of fields, if any, that this field references"
    fields(
        "Filter by GraphQL field and given value"
        filter: Field_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: FieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Field!]!
    "List of fields, if any, that this field references"
    fieldsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Field_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: FieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): FieldsConnection
    "Name of folder if the field is in a folder. See https://onlinehelp.tableau.com/current/pro/desktop/en-us/datafields_dwfeatures.html#Organize"
    folderName: String
    "Name internally used to uniquely identify fields"
    fullyQualifiedName: String
    "Unique identifier used by the metadata API.  Not the same as the numeric ID used on server"
    id: ID!
    "True if the field is hidden"
    isHidden: Boolean
    "Name shown in server and desktop clients"
    name: String
    "List of parameters, if any, used in this field"
    parameters(
        "Filter by GraphQL field and given value"
        filter: Parameter_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: ParameterSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Parameter!]!
    "List of parameters, if any, used in this field"
    parametersConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Parameter_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: ParameterSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): ParametersConnection
    "The bin field that references this field"
    referencedByBins(
        "Filter by GraphQL field and given value"
        filter: BinField_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: BinFieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [BinField]
    "The bin field that references this field"
    referencedByBinsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: BinField_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: BinFieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): BinFieldsConnection
    "The calculated field that references this field"
    referencedByCalculations(
        "Filter by GraphQL field and given value"
        filter: CalculatedField_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: CalculatedFieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [CalculatedField]
    "The calculated field that references this field"
    referencedByCalculationsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: CalculatedField_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: CalculatedFieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): CalculatedFieldsConnection
    "The combined field that references this field"
    referencedByCombinedFields(
        "Filter by GraphQL field and given value"
        filter: CombinedField_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: CombinedFieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [CombinedField]
    "The combined field that references this field"
    referencedByCombinedFieldsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: CombinedField_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: CombinedFieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): CombinedFieldsConnection
    "Thie combined set field that references this field"
    referencedByCombinedSets(
        "Filter by GraphQL field and given value"
        filter: CombinedSetField_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: CombinedSetFieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [CombinedSetField]
    "Thie combined set field that references this field"
    referencedByCombinedSetsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: CombinedSetField_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: CombinedSetFieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): CombinedSetFieldsConnection
    "The field that references this field"
    referencedByFields(
        "Filter by GraphQL field and given value"
        filter: FieldReferencingField_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: FieldReferencingFieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [FieldReferencingField]
    "The field that references this field"
    referencedByFieldsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: FieldReferencingField_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: FieldReferencingFieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): FieldReferencingFieldsConnection
    "The data source filters that include this field"
    referencedByFilters(
        "Filter by GraphQL field and given value"
        filter: DatasourceFilter_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DatasourceFilterSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [DatasourceFilter]
    "The data source filters that include this field"
    referencedByFiltersConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: DatasourceFilter_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DatasourceFilterSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): DatasourceFiltersConnection
    "A flow input field that wraps this field"
    referencedByFlowFieldInputField(
        "Filter by GraphQL field and given value"
        filter: FlowFieldInputField_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: FlowFieldInputFieldSortOrder
    ): [FlowFieldInputField]
    "A flow input field that wraps this field"
    referencedByFlowFieldInputFieldConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: FlowFieldInputField_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: FlowFieldInputFieldSortOrder
    ): FlowFieldInputFieldsConnection
    "A flow output field that wraps this field"
    referencedByFlowFieldOutputField(
        "Filter by GraphQL field and given value"
        filter: FlowFieldOutputField_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: FlowFieldOutputFieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [FlowFieldOutputField]
    "A flow output field that wraps this field"
    referencedByFlowFieldOutputFieldConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: FlowFieldOutputField_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: FlowFieldOutputFieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): FlowFieldOutputFieldsConnection
    "The group field that references this field"
    referencedByGroups(
        "Filter by GraphQL field and given value"
        filter: GroupField_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: GroupFieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [GroupField]
    "The group field that references this field"
    referencedByGroupsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: GroupField_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: GroupFieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): GroupFieldsConnection
    "The hierarchy field that references this field"
    referencedByHierarchies(
        "Filter by GraphQL field and given value"
        filter: HierarchyField_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: HierarchyFieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [HierarchyField]
    "The hierarchy field that references this field"
    referencedByHierarchiesConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: HierarchyField_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: HierarchyFieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): HierarchyFieldsConnection
    "The field that references this remote field"
    referencedByRemoteFields(
        "Filter by GraphQL field and given value"
        filter: DatasourceField_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DatasourceFieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [DatasourceField]
    "The field that references this remote field"
    referencedByRemoteFieldsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: DatasourceField_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DatasourceFieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): DatasourceFieldsConnection
    "The set field that this field references"
    referencedBySets(
        "Filter by GraphQL field and given value"
        filter: SetField_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: SetFieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [SetField]
    "The set field that this field references"
    referencedBySetsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: SetField_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: SetFieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): SetFieldsConnection
    "Sheets that reference this data source field"
    sheets(
        "Filter by GraphQL field and given value"
        filter: Sheet_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: SheetSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Sheet]
    "Sheets that reference this data source field"
    sheetsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Sheet_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: SheetSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): SheetsConnection
    "All upstream columns this field references"
    upstreamColumns(
        "Filter by GraphQL field and given value"
        filter: Column_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: ColumnSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Column]!
    "All upstream columns this field references"
    upstreamColumnsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Column_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: ColumnSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): ColumnsConnection
    "Databases connected upstream from the field"
    upstreamDatabases(
        "Filter by GraphQL field and given value"
        filter: Database_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DatabaseSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Database!]!
    "Databases connected upstream from the field"
    upstreamDatabasesConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Database_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DatabaseSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): DatabasesConnection
    "Datasources connected upstream from the field"
    upstreamDatasources(
        "Filter by GraphQL field and given value"
        filter: PublishedDatasource_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: PublishedDatasourceSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [PublishedDatasource!]!
    "Datasources connected upstream from the field"
    upstreamDatasourcesConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: PublishedDatasource_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: PublishedDatasourceSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): PublishedDatasourcesConnection
    "fields that are upstream of this field"
    upstreamFields(
        "Filter by GraphQL field and given value"
        filter: Field_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: FieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Field]!
    "fields that are upstream of this field"
    upstreamFieldsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Field_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: FieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): FieldsConnection
    "Flows connected upstream from the field"
    upstreamFlows(
        "Filter by GraphQL field and given value"
        filter: Flow_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: FlowSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Flow!]!
    "Flows connected upstream from the field"
    upstreamFlowsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Flow_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: FlowSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): FlowsConnection
    "Tables connected upstream from the field"
    upstreamTables(
        "Filter by GraphQL field and given value"
        filter: DatabaseTable_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DatabaseTableSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [DatabaseTable!]!
    "Tables connected upstream from the field"
    upstreamTablesConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: DatabaseTable_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DatabaseTableSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): DatabaseTablesConnection
    "Virtual connection tables upstream of this field"
    upstreamVirtualConnectionTables(
        "Filter by GraphQL field and given value"
        filter: VirtualConnectionTable_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: VirtualConnectionTableSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [VirtualConnectionTable!]!
    "Virtual connection tables upstream of this field"
    upstreamVirtualConnectionTablesConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: VirtualConnectionTable_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: VirtualConnectionTableSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): VirtualConnectionTablesConnection
    "Virtual connections upstream of this field"
    upstreamVirtualConnections(
        "Filter by GraphQL field and given value"
        filter: VirtualConnection_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: VirtualConnectionSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [VirtualConnection!]!
    "Virtual connections upstream of this field"
    upstreamVirtualConnectionsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: VirtualConnection_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: VirtualConnectionSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): VirtualConnectionsConnection
}

"Connection Type for SetField"
type SetFieldsConnection {
    "List of nodes"
    nodes: [SetField!]!
    "Information for pagination"
    pageInfo: PageInfo!
    "Total number of objects in connection"
    totalCount: Int!
}

" sheet contained in a published workbook."
type Sheet implements Taggable & View {
    "Dashboards that contain this sheet"
    containedInDashboards(
        "Filter by GraphQL field and given value"
        filter: Dashboard_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DashboardSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Dashboard]
    "Dashboards that contain this sheet"
    containedInDashboardsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Dashboard_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DashboardSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): DashboardsConnection
    "Time the sheet was created"
    createdAt: DateTime!
    "Fields that are contained in an embedded data source and are also referenced by the worksheet. If a worksheet uses calculated fields (or any other FieldReferencingField), this list will also include all of the referenced fields."
    datasourceFields(
        "Filter by GraphQL field and given value"
        filter: Field_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: FieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Field]
    "Fields that are contained in an embedded data source and are also referenced by the worksheet. If a worksheet uses calculated fields (or any other FieldReferencingField), this list will also include all of the referenced fields."
    datasourceFieldsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Field_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: FieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): FieldsConnection
    "Unique ID for the sheet generated for and stored within the workbook, survives renames, and is used for internal processes"
    documentViewId: String
    "Unique identifier used by the metadata API.  Not the same as the numeric ID used on server"
    id: ID!
    "Index of view; the order it appears in the workbook"
    index: Int
    "Locally unique identifier used for the REST API on the Tableau Server (Blank if worksheet is hidden in Workbook)"
    luid: String!
    "Name shown in server and desktop clients"
    name: String
    "Parent embedded data source of this sheet"
    parentEmbeddedDatasources(
        "Filter by GraphQL field and given value"
        filter: EmbeddedDatasource_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: EmbeddedDatasourceSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [EmbeddedDatasource!]!
    "Parent embedded data source of this sheet"
    parentEmbeddedDatasourcesConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: EmbeddedDatasource_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: EmbeddedDatasourceSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): EmbeddedDatasourcesConnection
    "Server path to sheet"
    path: String
    "The Metrics that reference this View"
    referencedByMetrics(
        "Filter by GraphQL field and given value"
        filter: Metric_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: MetricSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Metric]
    "The Metrics that reference this View"
    referencedByMetricsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Metric_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: MetricSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): MetricsConnection
    "All fields in the collection worksheetFields as well as the fields in datasourceFields used directly by this sheet. If the worksheet uses calculated fields this list will not include referenced fields that are not directly used by the sheet."
    sheetFieldInstances(
        "Filter by GraphQL field and given value"
        filter: Field_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: FieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Field]
    "All fields in the collection worksheetFields as well as the fields in datasourceFields used directly by this sheet. If the worksheet uses calculated fields this list will not include referenced fields that are not directly used by the sheet."
    sheetFieldInstancesConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Field_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: FieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): FieldsConnection
    "Tags associated with the view"
    tags(
        "Filter by GraphQL field and given value"
        filter: Tag_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: TagSortOrder
    ): [Tag!]!
    "Tags associated with the view"
    tagsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Tag_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: TagSortOrder
    ): TagsConnection
    "Time the sheet was updated"
    updatedAt: DateTime!
    "The columns that are upstream of this sheet"
    upstreamColumns(
        "Filter by GraphQL field and given value"
        filter: Column_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: ColumnSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Column]!
    "The columns that are upstream of this sheet"
    upstreamColumnsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Column_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: ColumnSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): ColumnsConnection
    "Data quality warnings upstream from this sheet"
    upstreamDataQualityWarnings(
        "Filter by GraphQL field and given value"
        filter: DataQualityWarning_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DataQualityWarningSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [DataQualityWarning!]!
    "Data quality warnings upstream from this sheet"
    upstreamDataQualityWarningsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: DataQualityWarning_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DataQualityWarningSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): DataQualityWarningsConnection
    "The databases that are upstream of this sheet"
    upstreamDatabases(
        "Filter by GraphQL field and given value"
        filter: Database_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DatabaseSortOrder
    ): [Database]
    "The databases that are upstream of this sheet"
    upstreamDatabasesConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Database_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DatabaseSortOrder
    ): DatabasesConnection
    "The data sources that are upstream of this sheet"
    upstreamDatasources(
        "Filter by GraphQL field and given value"
        filter: Datasource_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DatasourceSortOrder
    ): [Datasource]
    "The data sources that are upstream of this sheet"
    upstreamDatasourcesConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Datasource_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DatasourceSortOrder
    ): DatasourcesConnection
    "The fields that are upstream of this sheet"
    upstreamFields(
        "Filter by GraphQL field and given value"
        filter: Field_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: FieldSortOrder
    ): [Field]
    "The fields that are upstream of this sheet"
    upstreamFieldsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Field_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: FieldSortOrder
    ): FieldsConnection
    "The flows that are upstream of this sheet"
    upstreamFlows(
        "Filter by GraphQL field and given value"
        filter: Flow_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: FlowSortOrder
    ): [Flow]
    "The flows that are upstream of this sheet"
    upstreamFlowsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Flow_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: FlowSortOrder
    ): FlowsConnection
    "The tables that are upstream of this sheet"
    upstreamTables(
        "Filter by GraphQL field and given value"
        filter: Table_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: TableSortOrder
    ): [Table]
    "The tables that are upstream of this sheet"
    upstreamTablesConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Table_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: TableSortOrder
    ): TablesConnection
    "The workbook that contains this view"
    workbook: Workbook
    "Calculated fields which were created on this sheet, e.g. in the rows or columns shelves and which may not be used on other sheets that use this embedded data source"
    worksheetFields(
        "Filter by GraphQL field and given value"
        filter: CalculatedField_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: CalculatedFieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [CalculatedField]
    "Calculated fields which were created on this sheet, e.g. in the rows or columns shelves and which may not be used on other sheets that use this embedded data source"
    worksheetFieldsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: CalculatedField_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: CalculatedFieldSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): CalculatedFieldsConnection
}

"Connection Type for Sheet"
type SheetsConnection {
    "List of nodes"
    nodes: [Sheet!]!
    "Information for pagination"
    pageInfo: PageInfo!
    "Total number of objects in connection"
    totalCount: Int!
}

"Site on Tableau server"
type TableauSite {
    "Time the site was created. Available in Tableau Cloud June 2022 / Server 2022.3 and later."
    createdAt: DateTime
    "The flows that are part of this site"
    flows(
        "Filter by GraphQL field and given value"
        filter: Flow_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: FlowSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Flow]
    "The flows that are part of this site"
    flowsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Flow_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: FlowSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): FlowsConnection
    "Unique identifier used by the metadata API. Not the same as the numeric ID used on server"
    id: ID!
    "The Lenses that are part of this site"
    lenses(
        "Filter by GraphQL field and given value"
        filter: Lens_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: LensSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Lens]
    "The Lenses that are part of this site"
    lensesConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Lens_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: LensSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): LensesConnection
    "Locally unique identifier used for the REST API on the Tableau Server"
    luid: String!
    "The Metrics that are part of this site"
    metrics(
        "Filter by GraphQL field and given value"
        filter: Metric_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: MetricSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Metric]
    "The Metrics that are part of this site"
    metricsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Metric_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: MetricSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): MetricsConnection
    "Name shown in server"
    name: String!
    "The published data sources that are part of this site"
    publishedDatasources(
        "Filter by GraphQL field and given value"
        filter: PublishedDatasource_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: PublishedDatasourceSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [PublishedDatasource]
    "The published data sources that are part of this site"
    publishedDatasourcesConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: PublishedDatasource_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: PublishedDatasourceSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): PublishedDatasourcesConnection
    "URI of this site, e.g., 'sites/4'"
    uri: String!
    "The virtual connections that are part of this site"
    virtualConnections(
        "Filter by GraphQL field and given value"
        filter: VirtualConnection_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: VirtualConnectionSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [VirtualConnection]
    "The virtual connections that are part of this site"
    virtualConnectionsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: VirtualConnection_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: VirtualConnectionSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): VirtualConnectionsConnection
    "The workbooks that are part of this site"
    workbooks(
        "Filter by GraphQL field and given value"
        filter: Workbook_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: WorkbookSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Workbook]
    "The workbooks that are part of this site"
    workbooksConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Workbook_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: WorkbookSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): WorkbooksConnection
}

"Connection Type for TableauSite"
type TableauSitesConnection {
    "List of nodes"
    nodes: [TableauSite!]!
    "Information for pagination"
    pageInfo: PageInfo!
    "Total number of objects in connection"
    totalCount: Int!
}

"User on a site on Tableau server"
type TableauUser {
    "The data quality certifications this user has authored"
    authoredDataQualityCertifications(
        "Filter by GraphQL field and given value"
        filter: DataQualityCertification_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DataQualityCertificationSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [DataQualityCertification]
    "The data quality certifications this user has authored"
    authoredDataQualityCertificationsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: DataQualityCertification_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DataQualityCertificationSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): DataQualityCertificationsConnection
    "The data quality warnings this user has authored"
    authoredDataQualityWarnings(
        "Filter by GraphQL field and given value"
        filter: DataQualityWarning_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DataQualityWarningSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [DataQualityWarning]
    "The data quality warnings this user has authored"
    authoredDataQualityWarningsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: DataQualityWarning_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DataQualityWarningSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): DataQualityWarningsConnection
    "The databases that this user has certified"
    certifiedDatabases(
        "Filter by GraphQL field and given value"
        filter: Database_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DatabaseSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Database]
    "The databases that this user has certified"
    certifiedDatabasesConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Database_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DatabaseSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): DatabasesConnection
    "The published data sources that this user has certified"
    certifiedDatasources(
        "Filter by GraphQL field and given value"
        filter: PublishedDatasource_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: PublishedDatasourceSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [PublishedDatasource]
    "The published data sources that this user has certified"
    certifiedDatasourcesConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: PublishedDatasource_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: PublishedDatasourceSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): PublishedDatasourcesConnection
    "The tables that this user has certified"
    certifiedTables(
        "Filter by GraphQL field and given value"
        filter: DatabaseTable_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DatabaseTableSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [DatabaseTable]
    "The tables that this user has certified"
    certifiedTablesConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: DatabaseTable_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DatabaseTableSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): DatabaseTablesConnection
    "The databases that this user is the contact for"
    contactForDatabases(
        "Filter by GraphQL field and given value"
        filter: Database_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DatabaseSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Database]
    "The databases that this user is the contact for"
    contactForDatabasesConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Database_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DatabaseSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): DatabasesConnection
    "The tables that this user is the contact for"
    contactForTables(
        "Filter by GraphQL field and given value"
        filter: DatabaseTable_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DatabaseTableSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [DatabaseTable]
    "The tables that this user is the contact for"
    contactForTablesConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: DatabaseTable_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DatabaseTableSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): DatabaseTablesConnection
    "Domain this user belongs to"
    domain: String
    "Email address of this user"
    email: String
    "Unique identifier used by the metadata API. Not the same as the numeric ID used on server"
    id: ID!
    "Locally unique identifier used for the REST API on the Tableau Server"
    luid: String!
    "Display name of this user"
    name: String
    "The published data sources that belong to this user"
    ownedDatasources(
        "Filter by GraphQL field and given value"
        filter: PublishedDatasource_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: PublishedDatasourceSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [PublishedDatasource]
    "The published data sources that belong to this user"
    ownedDatasourcesConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: PublishedDatasource_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: PublishedDatasourceSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): PublishedDatasourcesConnection
    "The flows that belong to this user"
    ownedFlows(
        "Filter by GraphQL field and given value"
        filter: Flow_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: FlowSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Flow]
    "The flows that belong to this user"
    ownedFlowsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Flow_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: FlowSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): FlowsConnection
    "The Lenses that belong to this user"
    ownedLenses(
        "Filter by GraphQL field and given value"
        filter: Lens_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: LensSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Lens]
    "The Lenses that belong to this user"
    ownedLensesConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Lens_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: LensSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): LensesConnection
    "The Metrics that belong to this user"
    ownedMetrics(
        "Filter by GraphQL field and given value"
        filter: Metric_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: MetricSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Metric]
    "The Metrics that belong to this user"
    ownedMetricsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Metric_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: MetricSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): MetricsConnection
    "The virtual connection tables that belong to this user"
    ownedVirtualConnectionTables(
        "Filter by GraphQL field and given value"
        filter: VirtualConnectionTable_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: VirtualConnectionTableSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [VirtualConnectionTable]
    "The virtual connection tables that belong to this user"
    ownedVirtualConnectionTablesConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: VirtualConnectionTable_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: VirtualConnectionTableSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): VirtualConnectionTablesConnection
    "The virtual connections that belong to this user"
    ownedVirtualConnections(
        "Filter by GraphQL field and given value"
        filter: VirtualConnection_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: VirtualConnectionSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [VirtualConnection]
    "The virtual connections that belong to this user"
    ownedVirtualConnectionsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: VirtualConnection_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: VirtualConnectionSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): VirtualConnectionsConnection
    "The workbooks that belong to this user"
    ownedWorkbooks(
        "Filter by GraphQL field and given value"
        filter: Workbook_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: WorkbookSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Workbook]
    "The workbooks that belong to this user"
    ownedWorkbooksConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Workbook_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: WorkbookSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): WorkbooksConnection
    "URI of this user, e.g., 'sites/1/users/1396'"
    uri: String!
    "Username of this user"
    username: String
    "Vizportal ID of this user, for use in client-to-server communications"
    vizportalId: String!
}

"Connection Type for TableauUser"
type TableauUsersConnection {
    "List of nodes"
    nodes: [TableauUser!]!
    "Information for pagination"
    pageInfo: PageInfo!
    "Total number of objects in connection"
    totalCount: Int!
}

"Connection Type for Table"
type TablesConnection {
    "List of nodes"
    nodes: [Table!]!
    "Information for pagination"
    pageInfo: PageInfo!
    "Total number of objects in connection"
    totalCount: Int!
}

" tag associated with content items"
type Tag {
    "The assets that are associated with this tag"
    assets(
        "Filter by GraphQL field and given value"
        filter: Taggable_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: TaggableSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Taggable]
    "The assets that are associated with this tag"
    assetsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Taggable_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: TaggableSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): TaggablesConnection
    "The columns that are associated with this tag"
    columns(
        "Filter by GraphQL field and given value"
        filter: Column_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: ColumnSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Column]
    "The columns that are associated with this tag"
    columnsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Column_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: ColumnSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): ColumnsConnection
    "The tables that are associated with this tag"
    databaseTables(
        "Filter by GraphQL field and given value"
        filter: DatabaseTable_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DatabaseTableSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [DatabaseTable]
    "The tables that are associated with this tag"
    databaseTablesConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: DatabaseTable_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DatabaseTableSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): DatabaseTablesConnection
    "The databases that are associated with this tag"
    databases(
        "Filter by GraphQL field and given value"
        filter: Database_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DatabaseSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Database]
    "The databases that are associated with this tag"
    databasesConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Database_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DatabaseSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): DatabasesConnection
    "The flows that are associated with this tag"
    flows(
        "Filter by GraphQL field and given value"
        filter: Flow_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: FlowSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Flow]
    "The flows that are associated with this tag"
    flowsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Flow_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: FlowSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): FlowsConnection
    "Unique identifier used by the metadata API."
    id: ID!
    "The Metrics that are associated with this tag"
    metrics(
        "Filter by GraphQL field and given value"
        filter: Metric_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: MetricSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Metric]
    "The Metrics that are associated with this tag"
    metricsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Metric_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: MetricSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): MetricsConnection
    "The name of the tag"
    name: String
    "The published datasources that are associated with this tag"
    publishedDatasources(
        "Filter by GraphQL field and given value"
        filter: PublishedDatasource_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: PublishedDatasourceSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [PublishedDatasource]
    "The published datasources that are associated with this tag"
    publishedDatasourcesConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: PublishedDatasource_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: PublishedDatasourceSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): PublishedDatasourcesConnection
    "The views that are associated with this tag"
    views(
        "Filter by GraphQL field and given value"
        filter: View_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: ViewSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [View]
    "The views that are associated with this tag"
    viewsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: View_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: ViewSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): ViewsConnection
    "The virtual connection tables that are associated with this tag"
    virtualConnectionTables(
        "Filter by GraphQL field and given value"
        filter: VirtualConnectionTable_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: VirtualConnectionTableSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [VirtualConnectionTable]
    "The virtual connection tables that are associated with this tag"
    virtualConnectionTablesConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: VirtualConnectionTable_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: VirtualConnectionTableSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): VirtualConnectionTablesConnection
    "The virtual connections that are associated with this tag"
    virtualConnections(
        "Filter by GraphQL field and given value"
        filter: VirtualConnection_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: VirtualConnectionSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [VirtualConnection]
    "The virtual connections that are associated with this tag"
    virtualConnectionsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: VirtualConnection_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: VirtualConnectionSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): VirtualConnectionsConnection
    "The workbooks that are associated with this tag"
    workbooks(
        "Filter by GraphQL field and given value"
        filter: Workbook_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: WorkbookSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Workbook]
    "The workbooks that are associated with this tag"
    workbooksConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Workbook_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: WorkbookSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): WorkbooksConnection
}

"Connection Type for Taggable"
type TaggablesConnection {
    "List of nodes"
    nodes: [Taggable!]!
    "Information for pagination"
    pageInfo: PageInfo!
    "Total number of objects in connection"
    totalCount: Int!
}

"Connection Type for Tag"
type TagsConnection {
    "List of nodes"
    nodes: [Tag!]!
    "Information for pagination"
    pageInfo: PageInfo!
    "Total number of objects in connection"
    totalCount: Int!
}

"Connection Type for View"
type ViewsConnection {
    "List of nodes"
    nodes: [View!]!
    "Information for pagination"
    pageInfo: PageInfo!
    "Total number of objects in connection"
    totalCount: Int!
}

"""

Virtual connections are sharable central access points to data.
*Available in Tableau Cloud March 2022 / Server 2022.1 and later.*
"""
type VirtualConnection implements Certifiable & Taggable & Warnable {
    "Connection type of this virtual connection"
    connectionType: String @deprecated(reason: "Returns 'null' in Tableau Cloud December 2022 and later, and may be removed in a future release. Use 'connectionType' of 'upstreamDatabases' instead.")
    "The name of the container in which the virtual connection is visible and usable. Either a personal space or project."
    containerName: String
    "The type of the container in which the virtual connection is visible and usable. Either personal space or project."
    containerType: String!
    "Time the Virtual Connection was created. Available in Tableau Cloud June 2022 / Server 2022.3 and later."
    createdAt: DateTime
    "The data quality certifications on a virtual connection"
    dataQualityCertifications(
        "Filter by GraphQL field and given value"
        filter: DataQualityCertification_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DataQualityCertificationSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [DataQualityCertification!]!
    "The data quality certifications on a virtual connection"
    dataQualityCertificationsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: DataQualityCertification_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DataQualityCertificationSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): DataQualityCertificationsConnection
    "Singular data quality warning, deprecated but required to implement @warnable"
    dataQualityWarning: DataQualityWarning @deprecated(reason: "Use 'dataQualityWarnings'")
    "The data quality warnings on a virtual connection"
    dataQualityWarnings(
        "Filter by GraphQL field and given value"
        filter: DataQualityWarning_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DataQualityWarningSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [DataQualityWarning!]!
    "The data quality warnings on a virtual connection"
    dataQualityWarningsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: DataQualityWarning_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DataQualityWarningSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): DataQualityWarningsConnection
    "User modifiable description of this virtual connection"
    description: String
    "Dashboards downstream of this virtual connection"
    downstreamDashboards(
        "Filter by GraphQL field and given value"
        filter: Dashboard_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DashboardSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Dashboard!]!
    "Dashboards downstream of this virtual connection"
    downstreamDashboardsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Dashboard_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DashboardSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): DashboardsConnection
    "Published Data Sources downstream of this virtual connection"
    downstreamDatasources(
        "Filter by GraphQL field and given value"
        filter: PublishedDatasource_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: PublishedDatasourceSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [PublishedDatasource!]!
    "Published Data Sources downstream of this virtual connection"
    downstreamDatasourcesConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: PublishedDatasource_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: PublishedDatasourceSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): PublishedDatasourcesConnection
    "Flows downstream of this virtual connection"
    downstreamFlows(
        "Filter by GraphQL field and given value"
        filter: Flow_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: FlowSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Flow!]!
    "Flows downstream of this virtual connection"
    downstreamFlowsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Flow_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: FlowSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): FlowsConnection
    "Lenses downstream of this published connection"
    downstreamLenses(
        "Filter by GraphQL field and given value"
        filter: Lens_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: LensSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Lens!]!
    "Lenses downstream of this published connection"
    downstreamLensesConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Lens_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: LensSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): LensesConnection
    "Metrics downstream of this virtual connection"
    downstreamMetrics(
        "Filter by GraphQL field and given value"
        filter: Metric_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: MetricSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Metric!]!
    "Metrics downstream of this virtual connection"
    downstreamMetricsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Metric_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: MetricSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): MetricsConnection
    "Owners connected to the database"
    downstreamOwners(
        "Filter by GraphQL field and given value"
        filter: TableauUser_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: TableauUserSortOrder
    ): [TableauUser!]!
    "Owners connected to the database"
    downstreamOwnersConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: TableauUser_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: TableauUserSortOrder
    ): TableauUsersConnection
    "Sheets downstream of this virtual connection"
    downstreamSheets(
        "Filter by GraphQL field and given value"
        filter: Sheet_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: SheetSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Sheet!]!
    "Sheets downstream of this virtual connection"
    downstreamSheetsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Sheet_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: SheetSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): SheetsConnection
    "VirtualConnectionTables downstream of this virtual connection"
    downstreamVirtualConnectionTables(
        "Filter by GraphQL field and given value"
        filter: VirtualConnectionTable_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: VirtualConnectionTableSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [VirtualConnectionTable!]!
    "VirtualConnectionTables downstream of this virtual connection"
    downstreamVirtualConnectionTablesConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: VirtualConnectionTable_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: VirtualConnectionTableSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): VirtualConnectionTablesConnection
    "Workbooks downstream of this virtual connection"
    downstreamWorkbooks(
        "Filter by GraphQL field and given value"
        filter: Workbook_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: WorkbookSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Workbook!]!
    "Workbooks downstream of this virtual connection"
    downstreamWorkbooksConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Workbook_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: WorkbookSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): WorkbooksConnection
    "True if the virtual connection has an active data quality warning"
    hasActiveWarning: Boolean!
    "Unique identifier used by the metadata API.  Not the same as the numeric ID used on server"
    id: ID!
    "True if this virtual connection contains an active data quality certification"
    isCertified: Boolean!
    "Locally unique identifier used for the REST API on the Tableau Server"
    luid: String!
    "Name shown in server and desktop clients"
    name: String
    "User who owns this virtual connection"
    owner: TableauUser!
    "The name of the project that contains this virtual connection."
    projectName: String
    "The ID of the project in which the virtual connection is visible and usable. Will return null if the published virtual connection is not in a project."
    projectVizportalUrlId: String
    "The site which contains this virtual connection"
    site: TableauSite!
    "The tables exposed by this virtual connection"
    tables(
        "Filter by GraphQL field and given value"
        filter: VirtualConnectionTable_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: VirtualConnectionTableSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [VirtualConnectionTable!]!
    "The tables exposed by this virtual connection"
    tablesConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: VirtualConnectionTable_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: VirtualConnectionTableSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): VirtualConnectionTablesConnection
    "Tags associated with the virtual connection"
    tags(
        "Filter by GraphQL field and given value"
        filter: Tag_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: TagSortOrder
    ): [Tag!]!
    "Tags associated with the virtual connection"
    tagsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Tag_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: TagSortOrder
    ): TagsConnection
    "Time the Virtual Connection was last updated. Available in Tableau Cloud June 2022 / Server 2022.3 and later."
    updatedAt: DateTime
    "Data quality warnings upstream from this virtual connection"
    upstreamDataQualityWarnings(
        "Filter by GraphQL field and given value"
        filter: DataQualityWarning_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DataQualityWarningSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [DataQualityWarning!]!
    "Data quality warnings upstream from this virtual connection"
    upstreamDataQualityWarningsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: DataQualityWarning_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DataQualityWarningSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): DataQualityWarningsConnection
    "Databases upstream of this virtual connection"
    upstreamDatabases(
        "Filter by GraphQL field and given value"
        filter: Database_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DatabaseSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Database!]!
    "Databases upstream of this virtual connection"
    upstreamDatabasesConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Database_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DatabaseSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): DatabasesConnection
    "Datasources upstream of this virtual connection"
    upstreamDatasources(
        "Filter by GraphQL field and given value"
        filter: PublishedDatasource_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: PublishedDatasourceSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [PublishedDatasource!]!
    "Datasources upstream of this virtual connection"
    upstreamDatasourcesConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: PublishedDatasource_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: PublishedDatasourceSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): PublishedDatasourcesConnection
    "Flows upstream of this virtual connection"
    upstreamFlows(
        "Filter by GraphQL field and given value"
        filter: Flow_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: FlowSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Flow!]!
    "Flows upstream of this virtual connection"
    upstreamFlowsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Flow_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: FlowSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): FlowsConnection
    "Tables upstream of this virtual connection"
    upstreamTables(
        "Filter by GraphQL field and given value"
        filter: DatabaseTable_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DatabaseTableSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [DatabaseTable!]!
    "Tables upstream of this virtual connection"
    upstreamTablesConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: DatabaseTable_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DatabaseTableSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): DatabaseTablesConnection
    "The virtual connection tables that are upstream to this virtual connection"
    upstreamVirtualConnectionTables(
        "Filter by GraphQL field and given value"
        filter: VirtualConnectionTable_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: VirtualConnectionTableSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [VirtualConnectionTable!]!
    "The virtual connection tables that are upstream to this virtual connection"
    upstreamVirtualConnectionTablesConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: VirtualConnectionTable_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: VirtualConnectionTableSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): VirtualConnectionTablesConnection
    "Uri of the virtual connection"
    uri: String
    "Vizportal ID of this table, for use in client-to-server communications"
    vizportalId: String!
    "Vizportal URL ID; used for URL generation"
    vizportalUrlId: String!
}

"""

A table in a virtual connection.
*Available in Tableau Cloud March 2022 / Server 2022.1 and later.*
"""
type VirtualConnectionTable implements Certifiable & Table & Taggable & Warnable {
    "Columns contained by this table"
    columns(
        "Filter by GraphQL field and given value"
        filter: Column_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: ColumnSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Column!]!
    "Columns contained by this table"
    columnsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Column_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: ColumnSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): ColumnsConnection
    "True if the datasource contains unsupported custom SQL, in which case lineage may be incomplete"
    containsUnsupportedCustomSql: Boolean
    "The data quality certifications on a virtual connection table"
    dataQualityCertifications(
        "Filter by GraphQL field and given value"
        filter: DataQualityCertification_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DataQualityCertificationSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [DataQualityCertification!]!
    "The data quality certifications on a virtual connection table"
    dataQualityCertificationsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: DataQualityCertification_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DataQualityCertificationSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): DataQualityCertificationsConnection
    "Singular data quality warning, deprecated but required to implement @warnable"
    dataQualityWarning: DataQualityWarning @deprecated(reason: "Use 'dataQualityWarnings'")
    "The data quality warnings on a virtual connection table"
    dataQualityWarnings(
        "Filter by GraphQL field and given value"
        filter: DataQualityWarning_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DataQualityWarningSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [DataQualityWarning!]!
    "The data quality warnings on a virtual connection table"
    dataQualityWarningsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: DataQualityWarning_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DataQualityWarningSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): DataQualityWarningsConnection
    "User modifiable description of this table"
    description: String
    "Dashboards connected to the table"
    downstreamDashboards(
        "Filter by GraphQL field and given value"
        filter: Dashboard_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DashboardSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Dashboard!]!
    "Dashboards connected to the table"
    downstreamDashboardsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Dashboard_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DashboardSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): DashboardsConnection
    "Databases downstream of this table"
    downstreamDatabases(
        "Filter by GraphQL field and given value"
        filter: Database_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DatabaseSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Database!]!
    "Databases downstream of this table"
    downstreamDatabasesConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Database_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DatabaseSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): DatabasesConnection
    "Published datasources connected to the table"
    downstreamDatasources(
        "Filter by GraphQL field and given value"
        filter: PublishedDatasource_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: PublishedDatasourceSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [PublishedDatasource!]!
    "Published datasources connected to the table"
    downstreamDatasourcesConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: PublishedDatasource_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: PublishedDatasourceSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): PublishedDatasourcesConnection
    "Flows downstream of this table"
    downstreamFlows(
        "Filter by GraphQL field and given value"
        filter: Flow_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: FlowSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Flow!]!
    "Flows downstream of this table"
    downstreamFlowsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Flow_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: FlowSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): FlowsConnection
    "Lenses connected to the table"
    downstreamLenses(
        "Filter by GraphQL field and given value"
        filter: Lens_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: LensSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Lens!]!
    "Lenses connected to the table"
    downstreamLensesConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Lens_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: LensSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): LensesConnection
    "Metrics downstream of this table"
    downstreamMetrics(
        "Filter by GraphQL field and given value"
        filter: Metric_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: MetricSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Metric!]!
    "Metrics downstream of this table"
    downstreamMetricsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Metric_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: MetricSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): MetricsConnection
    "Owners of workbooks and published datasources connected to the table"
    downstreamOwners(
        "Filter by GraphQL field and given value"
        filter: TableauUser_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: TableauUserSortOrder
    ): [TableauUser!]!
    "Owners of workbooks and published datasources connected to the table"
    downstreamOwnersConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: TableauUser_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: TableauUserSortOrder
    ): TableauUsersConnection
    "Sheets connected to the table"
    downstreamSheets(
        "Filter by GraphQL field and given value"
        filter: Sheet_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: SheetSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Sheet!]!
    "Sheets connected to the table"
    downstreamSheetsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Sheet_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: SheetSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): SheetsConnection
    "Tables downstream of this table"
    downstreamTables(
        "Filter by GraphQL field and given value"
        filter: DatabaseTable_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DatabaseTableSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [DatabaseTable!]!
    "Tables downstream of this table"
    downstreamTablesConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: DatabaseTable_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DatabaseTableSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): DatabaseTablesConnection
    "Virtual connection tables downstream of this table"
    downstreamVirtualConnectionTables(
        "Filter by GraphQL field and given value"
        filter: VirtualConnectionTable_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: VirtualConnectionTableSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [VirtualConnectionTable!]!
    "Virtual connection tables downstream of this table"
    downstreamVirtualConnectionTablesConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: VirtualConnectionTable_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: VirtualConnectionTableSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): VirtualConnectionTablesConnection
    "Virtual connections downstream of this table"
    downstreamVirtualConnections(
        "Filter by GraphQL field and given value"
        filter: VirtualConnection_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: VirtualConnectionSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [VirtualConnection!]!
    "Virtual connections downstream of this table"
    downstreamVirtualConnectionsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: VirtualConnection_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: VirtualConnectionSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): VirtualConnectionsConnection
    "Workbooks connected to the table"
    downstreamWorkbooks(
        "Filter by GraphQL field and given value"
        filter: Workbook_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: WorkbookSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Workbook!]!
    "Workbooks connected to the table"
    downstreamWorkbooksConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Workbook_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: WorkbookSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): WorkbooksConnection
    "The type of this table's last extract refresh (incremental or full)."
    extractLastRefreshType: ExtractType
    "The time the data for this table's extract was refreshed."
    extractLastRefreshedAt: DateTime
    "True if the table has an active data quality warning"
    hasActiveWarning: Boolean!
    "Unique identifier used by the metadata API.  Not the same as the numeric ID used on server"
    id: ID!
    "True if this virtual connection table contains an active data quality certification"
    isCertified: Boolean!
    "True if this table is embedded in Tableau content, e.g., a packaged workbook"
    isEmbedded: Boolean
    "Whether or not queries to this table are using an extract."
    isExtracted: Boolean
    "Locally unique identifier used for the REST API on the Tableau Server"
    luid: String!
    "Name shown in server and desktop clients"
    name: String
    "User who owns this virtual connection table"
    owner: TableauUser!
    "Tags associated with this table"
    tags(
        "Filter by GraphQL field and given value"
        filter: Tag_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: TagSortOrder
    ): [Tag!]!
    "Tags associated with this table"
    tagsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Tag_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: TagSortOrder
    ): TagsConnection
    "Data quality warnings upstream from this virtual connection"
    upstreamDataQualityWarnings(
        "Filter by GraphQL field and given value"
        filter: DataQualityWarning_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DataQualityWarningSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [DataQualityWarning!]!
    "Data quality warnings upstream from this virtual connection"
    upstreamDataQualityWarningsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: DataQualityWarning_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DataQualityWarningSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): DataQualityWarningsConnection
    "Databases upstream of this table"
    upstreamDatabases(
        "Filter by GraphQL field and given value"
        filter: Database_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DatabaseSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Database!]!
    "Databases upstream of this table"
    upstreamDatabasesConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Database_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DatabaseSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): DatabasesConnection
    "Datasources upstream of this table"
    upstreamDatasources(
        "Filter by GraphQL field and given value"
        filter: PublishedDatasource_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: PublishedDatasourceSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [PublishedDatasource!]!
    "Datasources upstream of this table"
    upstreamDatasourcesConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: PublishedDatasource_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: PublishedDatasourceSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): PublishedDatasourcesConnection
    "Flows upstream of this table"
    upstreamFlows(
        "Filter by GraphQL field and given value"
        filter: Flow_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: FlowSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Flow!]!
    "Flows upstream of this table"
    upstreamFlowsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Flow_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: FlowSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): FlowsConnection
    "Tables upstream of this table"
    upstreamTables(
        "Filter by GraphQL field and given value"
        filter: DatabaseTable_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DatabaseTableSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [DatabaseTable!]!
    "Tables upstream of this table"
    upstreamTablesConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: DatabaseTable_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DatabaseTableSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): DatabaseTablesConnection
    "Virtual connection tables upstream of this table"
    upstreamVirtualConnectionTables(
        "Filter by GraphQL field and given value"
        filter: VirtualConnectionTable_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: VirtualConnectionTableSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [VirtualConnectionTable!]!
    "Virtual connection tables upstream of this table"
    upstreamVirtualConnectionTablesConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: VirtualConnectionTable_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: VirtualConnectionTableSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): VirtualConnectionTablesConnection
    "Virtual connections upstream of this table"
    upstreamVirtualConnections(
        "Filter by GraphQL field and given value"
        filter: VirtualConnection_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: VirtualConnectionSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [VirtualConnection!]!
    "Virtual connections upstream of this table"
    upstreamVirtualConnectionsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: VirtualConnection_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: VirtualConnectionSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): VirtualConnectionsConnection
    "Uri of the virtual connection table"
    uri: String
    "The parent virtual connection for this table"
    virtualConnection: VirtualConnection
    "Vizportal ID of this column, for use in client-to-server communications"
    vizportalId: String
    "VizPortal URL ID; used for URL generation"
    vizportalUrlId: String!
}

"Connection Type for VirtualConnectionTable"
type VirtualConnectionTablesConnection {
    "List of nodes"
    nodes: [VirtualConnectionTable!]!
    "Information for pagination"
    pageInfo: PageInfo!
    "Total number of objects in connection"
    totalCount: Int!
}

"Connection Type for VirtualConnection"
type VirtualConnectionsConnection {
    "List of nodes"
    nodes: [VirtualConnection!]!
    "Information for pagination"
    pageInfo: PageInfo!
    "Total number of objects in connection"
    totalCount: Int!
}

"Connection Type for Warnable"
type WarnablesConnection {
    "List of nodes"
    nodes: [Warnable!]!
    "Information for pagination"
    pageInfo: PageInfo!
    "Total number of objects in connection"
    totalCount: Int!
}

" web data connector"
type WebDataConnector implements Certifiable & Database & Taggable & Warnable {
    "Notes related to the web data connector table being marked as certified"
    certificationNote: String @deprecated(reason: "No longer supported. Use 'dataQualityCertifications'")
    "User who marked this database as certified"
    certifier: TableauUser @deprecated(reason: "No longer supported. Use 'dataQualityCertifications'")
    "The type of web data connector"
    connectionType: String
    "The url for the sign-in page of the web data connector"
    connectorUrl: String
    "Contact for this database"
    contact: TableauUser
    "The data quality certifications on a database"
    dataQualityCertifications(
        "Filter by GraphQL field and given value"
        filter: DataQualityCertification_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DataQualityCertificationSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [DataQualityCertification!]!
    "The data quality certifications on a database"
    dataQualityCertificationsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: DataQualityCertification_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DataQualityCertificationSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): DataQualityCertificationsConnection
    "The optional data quality warning on a database"
    dataQualityWarning: DataQualityWarning @deprecated(reason: "Use 'dataQualityWarnings'")
    "The data quality warnings on a database"
    dataQualityWarnings(
        "Filter by GraphQL field and given value"
        filter: DataQualityWarning_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DataQualityWarningSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [DataQualityWarning!]!
    "The data quality warnings on a database"
    dataQualityWarningsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: DataQualityWarning_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DataQualityWarningSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): DataQualityWarningsConnection
    "User modifiable description of this database"
    description: String
    "Dashboards connected to the database"
    downstreamDashboards(
        "Filter by GraphQL field and given value"
        filter: Dashboard_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DashboardSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Dashboard!]!
    "Dashboards connected to the database"
    downstreamDashboardsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Dashboard_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DashboardSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): DashboardsConnection
    "Databases downstream of this database"
    downstreamDatabases(
        "Filter by GraphQL field and given value"
        filter: Database_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DatabaseSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Database!]!
    "Databases downstream of this database"
    downstreamDatabasesConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Database_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DatabaseSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): DatabasesConnection
    "Published datasources connected to the database"
    downstreamDatasources(
        "Filter by GraphQL field and given value"
        filter: PublishedDatasource_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: PublishedDatasourceSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [PublishedDatasource!]!
    "Published datasources connected to the database"
    downstreamDatasourcesConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: PublishedDatasource_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: PublishedDatasourceSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): PublishedDatasourcesConnection
    "Flows downstream of this database"
    downstreamFlows(
        "Filter by GraphQL field and given value"
        filter: Flow_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: FlowSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Flow!]!
    "Flows downstream of this database"
    downstreamFlowsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Flow_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: FlowSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): FlowsConnection
    "Lenses connected to the database"
    downstreamLenses(
        "Filter by GraphQL field and given value"
        filter: Lens_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: LensSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Lens!]!
    "Lenses connected to the database"
    downstreamLensesConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Lens_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: LensSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): LensesConnection
    "Metrics connected to the database"
    downstreamMetrics(
        "Filter by GraphQL field and given value"
        filter: Metric_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: MetricSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Metric!]!
    "Metrics connected to the database"
    downstreamMetricsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Metric_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: MetricSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): MetricsConnection
    "Owners connected to the database"
    downstreamOwners(
        "Filter by GraphQL field and given value"
        filter: TableauUser_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: TableauUserSortOrder
    ): [TableauUser!]!
    "Owners connected to the database"
    downstreamOwnersConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: TableauUser_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: TableauUserSortOrder
    ): TableauUsersConnection
    "Sheets connected to the database"
    downstreamSheets(
        "Filter by GraphQL field and given value"
        filter: Sheet_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: SheetSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Sheet!]!
    "Sheets connected to the database"
    downstreamSheetsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Sheet_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: SheetSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): SheetsConnection
    "Tables downstream of this database"
    downstreamTables(
        "Filter by GraphQL field and given value"
        filter: DatabaseTable_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DatabaseTableSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [DatabaseTable!]!
    "Tables downstream of this database"
    downstreamTablesConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: DatabaseTable_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DatabaseTableSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): DatabaseTablesConnection
    "Virtual connection tables downstream of this database"
    downstreamVirtualConnectionTables(
        "Filter by GraphQL field and given value"
        filter: VirtualConnectionTable_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: VirtualConnectionTableSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [VirtualConnectionTable!]!
    "Virtual connection tables downstream of this database"
    downstreamVirtualConnectionTablesConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: VirtualConnectionTable_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: VirtualConnectionTableSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): VirtualConnectionTablesConnection
    "Virtual connection tables downstream of this database"
    downstreamVirtualConnections(
        "Filter by GraphQL field and given value"
        filter: VirtualConnection_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: VirtualConnectionSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [VirtualConnection!]!
    "Virtual connection tables downstream of this database"
    downstreamVirtualConnectionsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: VirtualConnection_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: VirtualConnectionSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): VirtualConnectionsConnection
    "Workbooks connected to the database"
    downstreamWorkbooks(
        "Filter by GraphQL field and given value"
        filter: Workbook_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: WorkbookSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Workbook!]!
    "Workbooks connected to the database"
    downstreamWorkbooksConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Workbook_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: WorkbookSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): WorkbooksConnection
    "True if the database has an active data quality warning"
    hasActiveWarning: Boolean!
    "Unique identifier used by the metadata API. Not the same as the numeric ID used on server"
    id: ID!
    "True if this database contains an active data quality certification"
    isCertified: Boolean!
    "True if this database has its permission locked"
    isControlledPermissionsEnabled: Boolean
    "A web data connector is always embedded in Tableau content"
    isEmbedded: Boolean
    "True if this database has been grouped with other databases"
    isGrouped: Boolean
    "Locally unique identifier used for the REST API on the Tableau Server"
    luid: String!
    "Name shown in server and desktop clients"
    name: String
    "The name of the project in which the table is visible. Will be empty if the table is not in a project."
    projectName: String
    "The ID of the project in which the table is visible. Will be empty if the table is not in a project."
    projectVizportalUrlId: String
    "The custom SQL queries that reference this database"
    referencedByQueries(
        "Filter by GraphQL field and given value"
        filter: CustomSQLTable_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: CustomSQLTableSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [CustomSQLTable]
    "The custom SQL queries that reference this database"
    referencedByQueriesConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: CustomSQLTable_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: CustomSQLTableSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): CustomSQLTablesConnection
    "Tables belonging to this database"
    tables(
        "Filter by GraphQL field and given value"
        filter: DatabaseTable_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DatabaseTableSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [DatabaseTable]
    "Tables belonging to this database"
    tablesConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: DatabaseTable_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DatabaseTableSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): DatabaseTablesConnection
    "Tags associated with the database"
    tags(
        "Filter by GraphQL field and given value"
        filter: Tag_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: TagSortOrder
    ): [Tag!]!
    "Tags associated with the database"
    tagsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Tag_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: TagSortOrder
    ): TagsConnection
    "Data quality warnings upstream from this database"
    upstreamDataQualityWarnings(
        "Filter by GraphQL field and given value"
        filter: DataQualityWarning_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DataQualityWarningSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [DataQualityWarning!]!
    "Data quality warnings upstream from this database"
    upstreamDataQualityWarningsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: DataQualityWarning_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DataQualityWarningSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): DataQualityWarningsConnection
    "Databases upstream of this database"
    upstreamDatabases(
        "Filter by GraphQL field and given value"
        filter: Database_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DatabaseSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Database!]!
    "Databases upstream of this database"
    upstreamDatabasesConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Database_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DatabaseSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): DatabasesConnection
    "Datasources upstream of this database"
    upstreamDatasources(
        "Filter by GraphQL field and given value"
        filter: PublishedDatasource_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: PublishedDatasourceSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [PublishedDatasource!]!
    "Datasources upstream of this database"
    upstreamDatasourcesConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: PublishedDatasource_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: PublishedDatasourceSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): PublishedDatasourcesConnection
    "Flows upstream of this database"
    upstreamFlows(
        "Filter by GraphQL field and given value"
        filter: Flow_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: FlowSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Flow!]!
    "Flows upstream of this database"
    upstreamFlowsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Flow_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: FlowSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): FlowsConnection
    "Tables upstream of this database"
    upstreamTables(
        "Filter by GraphQL field and given value"
        filter: DatabaseTable_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DatabaseTableSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [DatabaseTable!]!
    "Tables upstream of this database"
    upstreamTablesConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: DatabaseTable_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DatabaseTableSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): DatabaseTablesConnection
    "Virtual connection tables upstream of this database"
    upstreamVirtualConnectionTables(
        "Filter by GraphQL field and given value"
        filter: VirtualConnectionTable_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: VirtualConnectionTableSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [VirtualConnectionTable!]!
    "Virtual connection tables upstream of this database"
    upstreamVirtualConnectionTablesConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: VirtualConnectionTable_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: VirtualConnectionTableSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): VirtualConnectionTablesConnection
    "Virtual connection tables upstream of this database"
    upstreamVirtualConnections(
        "Filter by GraphQL field and given value"
        filter: VirtualConnection_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: VirtualConnectionSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [VirtualConnection!]!
    "Virtual connection tables upstream of this database"
    upstreamVirtualConnectionsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: VirtualConnection_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: VirtualConnectionSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): VirtualConnectionsConnection
    "Vizportal ID of this database, for use in client-to-server communications"
    vizportalId: String!
}

"Connection Type for WebDataConnector"
type WebDataConnectorsConnection {
    "List of nodes"
    nodes: [WebDataConnector!]!
    "Information for pagination"
    pageInfo: PageInfo!
    "Total number of objects in connection"
    totalCount: Int!
}

"Workbooks are used to package up Tableau visualizations (which are called \"sheets\" in the Metadata API) and data models (which are called \"embedded data sources\" when they are owned by a workbook)."
type Workbook implements Taggable {
    "The name of the container in which the workbook is visible and usable. Either a personal space or project."
    containerName: String
    "The type of the container in which the workbook is visible and usable. Either personal space or project."
    containerType: String!
    "True if the workbook contains unsupported custom SQL, in which case lineage may be incomplete"
    containsUnsupportedCustomSql: Boolean
    "Time the workbook was created"
    createdAt: DateTime!
    "Dashboards that are contained in this workbook"
    dashboards(
        "Filter by GraphQL field and given value"
        filter: Dashboard_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DashboardSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Dashboard!]!
    "Dashboards that are contained in this workbook"
    dashboardsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Dashboard_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DashboardSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): DashboardsConnection
    "Description of the workbook"
    description: String
    "Metrics downstream from this workbook"
    downstreamMetrics(
        "Filter by GraphQL field and given value"
        filter: Metric_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: MetricSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Metric!]!
    "Metrics downstream from this workbook"
    downstreamMetricsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Metric_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: MetricSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): MetricsConnection
    "Metric owners downstream from this workbook"
    downstreamOwners(
        "Filter by GraphQL field and given value"
        filter: TableauUser_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: TableauUserSortOrder
    ): [TableauUser!]!
    "Metric owners downstream from this workbook"
    downstreamOwnersConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: TableauUser_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: TableauUserSortOrder
    ): TableauUsersConnection
    "Data sources that are embedded in this workbook"
    embeddedDatasources(
        "Filter by GraphQL field and given value"
        filter: EmbeddedDatasource_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: EmbeddedDatasourceSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [EmbeddedDatasource!]!
    "Data sources that are embedded in this workbook"
    embeddedDatasourcesConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: EmbeddedDatasource_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: EmbeddedDatasourceSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): EmbeddedDatasourcesConnection
    "Unique identifier used by the metadata API.  Not the same as the numeric ID used on server"
    id: ID!
    "Locally unique identifier used for the REST API on the Tableau Server"
    luid: String!
    "Name shown in server and desktop clients"
    name: String
    "User who owns this workbook"
    owner: TableauUser!
    "Parameters that are contained in this workbook"
    parameters(
        "Filter by GraphQL field and given value"
        filter: Parameter_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: ParameterSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Parameter!]!
    "Parameters that are contained in this workbook"
    parametersConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Parameter_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: ParameterSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): ParametersConnection
    "The luid of the project in which the workbook is visible and usable. Available in Tableau Cloud June 2022 / Server 2022.3 and later."
    projectLuid: String
    "The name of the project in which the workbook is visible and usable."
    projectName: String
    "The ID of the project in which the workbook is visible and usable. Will be null if the workbook is not in a project."
    projectVizportalUrlId: String
    "Worksheets that are contained in this workbook"
    sheets(
        "Filter by GraphQL field and given value"
        filter: Sheet_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: SheetSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Sheet!]!
    "Worksheets that are contained in this workbook"
    sheetsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Sheet_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: SheetSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): SheetsConnection
    "The site in which the workbook is visible and usable"
    site: TableauSite!
    "Tags associated with the workbook"
    tags(
        "Filter by GraphQL field and given value"
        filter: Tag_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: TagSortOrder
    ): [Tag!]!
    "Tags associated with the workbook"
    tagsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Tag_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: TagSortOrder
    ): TagsConnection
    "Time the workbook was updated"
    updatedAt: DateTime!
    "Data quality warnings upstream from this workbook"
    upstreamDataQualityWarnings(
        "Filter by GraphQL field and given value"
        filter: DataQualityWarning_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DataQualityWarningSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [DataQualityWarning!]!
    "Data quality warnings upstream from this workbook"
    upstreamDataQualityWarningsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: DataQualityWarning_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DataQualityWarningSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): DataQualityWarningsConnection
    "The Databases that are upstream to this Workbook"
    upstreamDatabases(
        "Filter by GraphQL field and given value"
        filter: Database_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DatabaseSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [Database]!
    "The Databases that are upstream to this Workbook"
    upstreamDatabasesConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Database_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DatabaseSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): DatabasesConnection
    "The Published Datasources that are upstream to this Workbook"
    upstreamDatasources(
        "Filter by GraphQL field and given value"
        filter: PublishedDatasource_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: PublishedDatasourceSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [PublishedDatasource]!
    "The Published Datasources that are upstream to this Workbook"
    upstreamDatasourcesConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: PublishedDatasource_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: PublishedDatasourceSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): PublishedDatasourcesConnection
    "The flows that are upstream of this workbook"
    upstreamFlows(
        "Filter by GraphQL field and given value"
        filter: Flow_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: FlowSortOrder
    ): [Flow]
    "The flows that are upstream of this workbook"
    upstreamFlowsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Flow_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: FlowSortOrder
    ): FlowsConnection
    "The Lenses that are upstream of this workbook"
    upstreamLenses(
        "Filter by GraphQL field and given value"
        filter: Lens_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: LensSortOrder
    ): [Lens]
    "The Lenses that are upstream of this workbook"
    upstreamLensesConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: Lens_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: LensSortOrder
    ): LensesConnection
    "The tables upstream to this Workbook"
    upstreamTables(
        "Filter by GraphQL field and given value"
        filter: DatabaseTable_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DatabaseTableSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [DatabaseTable]!
    "The tables upstream to this Workbook"
    upstreamTablesConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: DatabaseTable_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: DatabaseTableSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): DatabaseTablesConnection
    "The virtual connection table upstream to this Workbook"
    upstreamVirtualConnectionTables(
        "Filter by GraphQL field and given value"
        filter: VirtualConnectionTable_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: VirtualConnectionTableSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [VirtualConnectionTable]!
    "The virtual connection table upstream to this Workbook"
    upstreamVirtualConnectionTablesConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: VirtualConnectionTable_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: VirtualConnectionTableSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): VirtualConnectionTablesConnection
    "The virtual connection upstream to this Workbook"
    upstreamVirtualConnections(
        "Filter by GraphQL field and given value"
        filter: VirtualConnection_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: VirtualConnectionSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [VirtualConnection]!
    "The virtual connection upstream to this Workbook"
    upstreamVirtualConnectionsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: VirtualConnection_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: VirtualConnectionSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): VirtualConnectionsConnection
    "Uri of the workbook"
    uri: String
    "Views that are contained in this workbook"
    views(
        "Filter by GraphQL field and given value"
        filter: View_Filter,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: ViewSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): [View!]!
    "Views that are contained in this workbook"
    viewsConnection(
        "The cursor to receive the next page of objects. If no cursor is supplied it will start at the beginning of the list. Offset can not be set at the same time. This is the preferred API to use if possible as it is faster."
        after: String,
        "Filter by GraphQL field and given value"
        filter: View_Filter,
        "Maximum number of objects to be returned in a page. The default is 100"
        first: Int,
        "The number of entries to offset the start of the page by. If no offset is supplied it will start at the beginning of the list. After can not be set at the same time."
        offset: Int,
        "Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
        orderBy: ViewSortOrder,
        "Results filtering mode."
        permissionMode: PermissionMode = OBFUSCATE_RESULTS
    ): ViewsConnection
    "VizPortal URL ID; used for URL generation"
    vizportalUrlId: String!
}

"Connection Type for Workbook"
type WorkbooksConnection {
    "List of nodes"
    nodes: [Workbook!]!
    "Information for pagination"
    pageInfo: PageInfo!
    "Total number of objects in connection"
    totalCount: Int!
}

"Enum for fields that can be used for sorting"
enum AnalyticsFieldOrderField {
    "Sort by id"
    ID
}

"Enum for fields that can be used for sorting"
enum AskDataExtensionOrderField {
    "Sort by id"
    ID
}

"Enum for fields that can be used for sorting"
enum BinFieldOrderField {
    "Sort by dataCategory"
    DATA_CATEGORY
    "Sort by dataType"
    DATA_TYPE
    "Sort by fields count"
    FIELDS_COUNT
    "Sort by id"
    ID
    "Sort by isHidden"
    IS_HIDDEN
    "Sort by name"
    NAME
    "Sort by role"
    ROLE
}

"Enum for fields that can be used for sorting"
enum CalculatedFieldOrderField {
    "Sort by dataCategory"
    DATA_CATEGORY
    "Sort by dataType"
    DATA_TYPE
    "Sort by fields count"
    FIELDS_COUNT
    "Sort by id"
    ID
    "Sort by isHidden"
    IS_HIDDEN
    "Sort by name"
    NAME
    "Sort by role"
    ROLE
}

"Enum for fields that can be used for sorting"
enum CertifiableOrderField {
    "Sort by id"
    ID
    "Sort by isCertified"
    IS_CERTIFIED
    "Sort by luid"
    LUID
}

"Enum for fields that can be used for sorting"
enum CloudFileOrderField {
    "Sort by connectionType"
    CONNECTION_TYPE
    "Sort by downstreamDatasources count"
    DOWNSTREAM_DATASOURCES_COUNT
    "Sort by downstreamVirtualConnections count"
    DOWNSTREAM_VIRTUAL_CONNECTIONS_COUNT
    "Sort by downstreamWorkbooks count"
    DOWNSTREAM_WORKBOOKS_COUNT
    "Sort by hasActiveWarning"
    HAS_ACTIVE_WARNING
    "Sort by id"
    ID
    "Sort by isCertified"
    IS_CERTIFIED
    "Sort by isEmbedded"
    IS_EMBEDDED
    "Sort by luid"
    LUID
    "Sort by name"
    NAME
    "Sort by projectName"
    PROJECT_NAME
}

"Enum for fields that can be used for sorting"
enum ColumnFieldOrderField {
    "Sort by dataCategory"
    DATA_CATEGORY
    "Sort by dataType"
    DATA_TYPE
    "Sort by id"
    ID
    "Sort by isHidden"
    IS_HIDDEN
    "Sort by name"
    NAME
    "Sort by role"
    ROLE
}

"Enum for fields that can be used for sorting"
enum ColumnOrderField {
    "Sort by hasActiveWarning"
    HAS_ACTIVE_WARNING
    "Sort by id"
    ID
    "Sort by luid"
    LUID
    "Sort by name"
    NAME
}

"Enum for fields that can be used for sorting"
enum CombinedFieldOrderField {
    "Sort by fields count"
    FIELDS_COUNT
    "Sort by id"
    ID
    "Sort by isHidden"
    IS_HIDDEN
    "Sort by name"
    NAME
}

"Enum for fields that can be used for sorting"
enum CombinedSetFieldOrderField {
    "Sort by fields count"
    FIELDS_COUNT
    "Sort by id"
    ID
    "Sort by isHidden"
    IS_HIDDEN
    "Sort by name"
    NAME
}

"Enum for fields that can be used for sorting"
enum CustomSQLTableOrderField {
    "Sort by columns count"
    COLUMNS_COUNT
    "Sort by downstreamDashboards count"
    DOWNSTREAM_DASHBOARDS_COUNT
    "Sort by downstreamDatasources count"
    DOWNSTREAM_DATASOURCES_COUNT
    "Sort by downstreamWorkbooks count"
    DOWNSTREAM_WORKBOOKS_COUNT
    "Sort by id"
    ID
    "Sort by isUnsupportedCustomSql"
    IS_UNSUPPORTED_CUSTOM_SQL
    "Sort by name"
    NAME
}

"Enum for fields that can be used for sorting"
enum DashboardOrderField {
    "Sort by documentViewId"
    DOCUMENT_VIEW_ID
    "Sort by id"
    ID
    "Sort by luid"
    LUID
    "Sort by name"
    NAME
    "Sort by path"
    PATH
}

"Enum for fields that can be used for sorting"
enum DataFieldOrderField {
    "Sort by dataCategory"
    DATA_CATEGORY
    "Sort by dataType"
    DATA_TYPE
    "Sort by id"
    ID
    "Sort by role"
    ROLE
}

"Enum for fields that can be used for sorting"
enum DataQualityCertificationOrderField {
    "Sort by id"
    ID
    "Sort by isActive"
    IS_ACTIVE
    "Sort by luid"
    LUID
}

"Enum for fields that can be used for sorting"
enum DataQualityWarningOrderField {
    "Sort by id"
    ID
    "Sort by isActive"
    IS_ACTIVE
    "Sort by isSevere"
    IS_SEVERE
    "Sort by luid"
    LUID
    "Sort by warningType"
    WARNING_TYPE
}

"Enum for fields that can be used for sorting"
enum DatabaseOrderField {
    "Sort by connectionType"
    CONNECTION_TYPE
    "Sort by downstreamDatasources count"
    DOWNSTREAM_DATASOURCES_COUNT
    "Sort by downstreamVirtualConnections count"
    DOWNSTREAM_VIRTUAL_CONNECTIONS_COUNT
    "Sort by downstreamWorkbooks count"
    DOWNSTREAM_WORKBOOKS_COUNT
    "Sort by hasActiveWarning"
    HAS_ACTIVE_WARNING
    "Sort by id"
    ID
    "Sort by isCertified"
    IS_CERTIFIED
    "Sort by isEmbedded"
    IS_EMBEDDED
    "Sort by luid"
    LUID
    "Sort by name"
    NAME
    "Sort by projectName"
    PROJECT_NAME
}

"Enum for fields that can be used for sorting"
enum DatabaseServerOrderField {
    "Sort by connectionType"
    CONNECTION_TYPE
    "Sort by downstreamDatasources count"
    DOWNSTREAM_DATASOURCES_COUNT
    "Sort by downstreamVirtualConnections count"
    DOWNSTREAM_VIRTUAL_CONNECTIONS_COUNT
    "Sort by downstreamWorkbooks count"
    DOWNSTREAM_WORKBOOKS_COUNT
    "Sort by hasActiveWarning"
    HAS_ACTIVE_WARNING
    "Sort by hostName"
    HOST_NAME
    "Sort by id"
    ID
    "Sort by isCertified"
    IS_CERTIFIED
    "Sort by isEmbedded"
    IS_EMBEDDED
    "Sort by luid"
    LUID
    "Sort by name"
    NAME
    "Sort by projectName"
    PROJECT_NAME
}

"Enum for fields that can be used for sorting"
enum DatabaseTableOrderField {
    "Sort by columns count"
    COLUMNS_COUNT
    "Sort by connectionType"
    CONNECTION_TYPE
    "Sort by downstreamDashboards count"
    DOWNSTREAM_DASHBOARDS_COUNT
    "Sort by downstreamDatasources count"
    DOWNSTREAM_DATASOURCES_COUNT
    "Sort by downstreamVirtualConnections count"
    DOWNSTREAM_VIRTUAL_CONNECTIONS_COUNT
    "Sort by downstreamWorkbooks count"
    DOWNSTREAM_WORKBOOKS_COUNT
    "Sort by fullName"
    FULL_NAME
    "Sort by hasActiveWarning"
    HAS_ACTIVE_WARNING
    "Sort by id"
    ID
    "Sort by isCertified"
    IS_CERTIFIED
    "Sort by isEmbedded"
    IS_EMBEDDED
    "Sort by luid"
    LUID
    "Sort by name"
    NAME
    "Sort by projectName"
    PROJECT_NAME
    "Sort by schema"
    SCHEMA
}

"Enum for fields that can be used for sorting"
enum DatasourceFieldOrderField {
    "Sort by id"
    ID
    "Sort by isHidden"
    IS_HIDDEN
    "Sort by name"
    NAME
}

"Enum for fields that can be used for sorting"
enum DatasourceFilterOrderField {
    "Sort by id"
    ID
}

"Enum for fields that can be used for sorting"
enum DatasourceOrderField {
    "Sort by containsUnsupportedCustomSql"
    CONTAINS_UNSUPPORTED_CUSTOM_SQL
    "Sort by downstreamOwners count"
    DOWNSTREAM_OWNERS_COUNT
    "Sort by downstreamWorkbooks count"
    DOWNSTREAM_WORKBOOKS_COUNT
    "Sort by fields count"
    FIELDS_COUNT
    "Sort by id"
    ID
    "Sort by name"
    NAME
}

"Enum for fields that can be used for sorting"
enum EmbeddedDatasourceOrderField {
    "Sort by containsUnsupportedCustomSql"
    CONTAINS_UNSUPPORTED_CUSTOM_SQL
    "Sort by downstreamOwners count"
    DOWNSTREAM_OWNERS_COUNT
    "Sort by downstreamWorkbooks count"
    DOWNSTREAM_WORKBOOKS_COUNT
    "Sort by fields count"
    FIELDS_COUNT
    "Sort by id"
    ID
    "Sort by name"
    NAME
}

"Possible types of extract"
enum ExtractType {
    FULL
    INCREMENTAL
}

"Possible data types for a field."
enum FieldDataType {
    BOOLEAN
    DATE
    DATETIME
    INTEGER
    REAL
    SPATIAL
    STRING
    TABLE
    TUPLE
    UNKNOWN
}

"Enum for fields that can be used for sorting"
enum FieldOrderField {
    "Sort by id"
    ID
    "Sort by isHidden"
    IS_HIDDEN
    "Sort by name"
    NAME
}

"Enum for fields that can be used for sorting"
enum FieldReferencingFieldOrderField {
    "Sort by fields count"
    FIELDS_COUNT
    "Sort by id"
    ID
}

"Possible roles of a field."
enum FieldRole {
    DIMENSION
    MEASURE
    UNKNOWN
}

"Possible categories of a field role."
enum FieldRoleCategory {
    NOMINAL
    ORDINAL
    QUANTITATIVE
    UNKNOWN
}

"Enum for fields that can be used for sorting"
enum FileOrderField {
    "Sort by connectionType"
    CONNECTION_TYPE
    "Sort by downstreamDatasources count"
    DOWNSTREAM_DATASOURCES_COUNT
    "Sort by downstreamVirtualConnections count"
    DOWNSTREAM_VIRTUAL_CONNECTIONS_COUNT
    "Sort by downstreamWorkbooks count"
    DOWNSTREAM_WORKBOOKS_COUNT
    "Sort by hasActiveWarning"
    HAS_ACTIVE_WARNING
    "Sort by id"
    ID
    "Sort by isCertified"
    IS_CERTIFIED
    "Sort by isEmbedded"
    IS_EMBEDDED
    "Sort by luid"
    LUID
    "Sort by name"
    NAME
    "Sort by projectName"
    PROJECT_NAME
}

"Enum for fields that can be used for sorting"
enum FlowColumnInputFieldOrderField {
    "Sort by id"
    ID
    "Sort by name"
    NAME
}

"Enum for fields that can be used for sorting"
enum FlowColumnOutputFieldOrderField {
    "Sort by id"
    ID
    "Sort by name"
    NAME
}

"Enum for fields that can be used for sorting"
enum FlowFieldInputFieldOrderField {
    "Sort by id"
    ID
    "Sort by name"
    NAME
}

"Enum for fields that can be used for sorting"
enum FlowFieldOutputFieldOrderField {
    "Sort by id"
    ID
    "Sort by name"
    NAME
}

"Enum for fields that can be used for sorting"
enum FlowInputFieldOrderField {
    "Sort by id"
    ID
    "Sort by name"
    NAME
}

"Enum for fields that can be used for sorting"
enum FlowOrderField {
    "Sort by containerName"
    CONTAINER_NAME
    "Sort by containsUnsupportedCustomSql"
    CONTAINS_UNSUPPORTED_CUSTOM_SQL
    "Sort by hasActiveWarning"
    HAS_ACTIVE_WARNING
    "Sort by id"
    ID
    "Sort by luid"
    LUID
    "Sort by name"
    NAME
    "Sort by projectName"
    PROJECT_NAME
    "Sort by vizportalUrlId"
    VIZPORTAL_URL_ID
}

"Enum for fields that can be used for sorting"
enum FlowOutputFieldOrderField {
    "Sort by id"
    ID
    "Sort by name"
    NAME
}

"Enum for fields that can be used for sorting"
enum FlowOutputStepOrderField {
    "Sort by id"
    ID
    "Sort by name"
    NAME
}

"Enum for fields that can be used for sorting"
enum GroupFieldOrderField {
    "Sort by dataCategory"
    DATA_CATEGORY
    "Sort by dataType"
    DATA_TYPE
    "Sort by fields count"
    FIELDS_COUNT
    "Sort by id"
    ID
    "Sort by isHidden"
    IS_HIDDEN
    "Sort by name"
    NAME
    "Sort by role"
    ROLE
}

"Enum for fields that can be used for sorting"
enum HierarchyFieldOrderField {
    "Sort by fields count"
    FIELDS_COUNT
    "Sort by id"
    ID
    "Sort by isHidden"
    IS_HIDDEN
    "Sort by name"
    NAME
}

"Method of selecting the objects (i.e., inheritance sources) to inherit from"
enum InheritanceType {
    "Inherit from the closest unambiguous upstream object"
    FIRST
}

"Enum for fields that can be used for sorting"
enum LensFieldOrderField {
    "Sort by id"
    ID
    "Sort by name"
    NAME
}

"Enum for fields that can be used for sorting"
enum LensOrderField {
    "Sort by fields count"
    FIELDS_COUNT
    "Sort by id"
    ID
    "Sort by luid"
    LUID
    "Sort by name"
    NAME
    "Sort by owner count"
    OWNER_COUNT
    "Sort by vizportalUrlId"
    VIZPORTAL_URL_ID
}

"Enum for fields that can be used for sorting"
enum LinkedFlowOrderField {
    "Sort by id"
    ID
}

"Enum for fields that can be used for sorting"
enum MetricOrderField {
    "Sort by containerName"
    CONTAINER_NAME
    "Sort by id"
    ID
    "Sort by luid"
    LUID
    "Sort by name"
    NAME
    "Sort by owner count"
    OWNER_COUNT
    "Sort by projectName"
    PROJECT_NAME
    "Sort by vizportalUrlId"
    VIZPORTAL_URL_ID
}

"Enum for fields that can be used for sorting"
enum NodeOrderField {
    "Sort by id"
    ID
}

"General object for sorting"
enum OrderDirection {
    "Sort in an ascending order."
    ASC
    "Sort in a descending order."
    DESC
}

"Enum for fields that can be used for sorting"
enum ParameterOrderField {
    "Sort by id"
    ID
    "Sort by name"
    NAME
    "Sort by parentName"
    PARENT_NAME
}

"Enum of the different ways to apply permissions."
enum PermissionMode {
    "Filter out results user is not authorized on."
    FILTER_RESULTS
    "Include results that user is not authorized to view with sensitive information obfuscated."
    OBFUSCATE_RESULTS
}

"Enum for fields that can be used for sorting"
enum PublishedDatasourceOrderField {
    "Sort by containerName"
    CONTAINER_NAME
    "Sort by containsUnsupportedCustomSql"
    CONTAINS_UNSUPPORTED_CUSTOM_SQL
    "Sort by downstreamOwners count"
    DOWNSTREAM_OWNERS_COUNT
    "Sort by downstreamSheets count"
    DOWNSTREAM_SHEETS_COUNT
    "Sort by downstreamWorkbooks count"
    DOWNSTREAM_WORKBOOKS_COUNT
    "Sort by fields count"
    FIELDS_COUNT
    "Sort by hasActiveWarning"
    HAS_ACTIVE_WARNING
    "Sort by id"
    ID
    "Sort by isCertified"
    IS_CERTIFIED
    "Sort by luid"
    LUID
    "Sort by name"
    NAME
    "Sort by owner count"
    OWNER_COUNT
    "Sort by projectName"
    PROJECT_NAME
    "Sort by vizportalUrlId"
    VIZPORTAL_URL_ID
}

"""

Possible types of remote types

Types correspond to OLEDB types here: https://referencesource.microsoft.com/#system.data/System/Data/OleDb/OLEDB_Enum.cs,364"

Types prefixed with 'WDC' correspond to Tableau's Web Data Connector types:
https://tableau.github.io/webdataconnector/docs/api_ref.html#webdataconnectorapi.datatypeenum
"""
enum RemoteType {
    ARRAY
    BOOL
    BSTR
    BYREF
    BYTES
    CY
    DATE
    DBDATE
    DBTIME
    DBTIMESTAMP
    DECIMAL
    EMPTY
    ERROR
    FILETIME
    GUID
    HCHAPTER
    I1
    I2
    I4
    I8
    IDISPATCH
    IUNKNOWN
    NULL
    NUMERIC
    PROPVARIANT
    R4
    R8
    RESERVED
    STR
    UDT
    UI1
    UI2
    UI4
    UI8
    VARIANT
    VARNUMERIC
    VECTOR
    WDC_BOOL
    WDC_DATE
    WDC_DATETIME
    WDC_FLOAT
    WDC_GEOMETRY
    WDC_INT
    WDC_STRING
    WSTR
}

"Enum for fields that can be used for sorting"
enum SetFieldOrderField {
    "Sort by fields count"
    FIELDS_COUNT
    "Sort by id"
    ID
    "Sort by isHidden"
    IS_HIDDEN
    "Sort by name"
    NAME
}

"Enum for fields that can be used for sorting"
enum SheetOrderField {
    "Sort by datasourceFields count"
    DATASOURCE_FIELDS_COUNT
    "Sort by documentViewId"
    DOCUMENT_VIEW_ID
    "Sort by id"
    ID
    "Sort by luid"
    LUID
    "Sort by name"
    NAME
    "Sort by path"
    PATH
    "Sort by sheetFieldInstances count"
    SHEET_FIELD_INSTANCES_COUNT
    "Sort by worksheetFields count"
    WORKSHEET_FIELDS_COUNT
}

"Enum for fields that can be used for sorting"
enum TableOrderField {
    "Sort by columns count"
    COLUMNS_COUNT
    "Sort by downstreamDashboards count"
    DOWNSTREAM_DASHBOARDS_COUNT
    "Sort by downstreamDatasources count"
    DOWNSTREAM_DATASOURCES_COUNT
    "Sort by downstreamWorkbooks count"
    DOWNSTREAM_WORKBOOKS_COUNT
    "Sort by id"
    ID
    "Sort by name"
    NAME
}

"Enum for fields that can be used for sorting"
enum TableauSiteOrderField {
    "Sort by id"
    ID
    "Sort by luid"
    LUID
    "Sort by name"
    NAME
}

"Enum for fields that can be used for sorting"
enum TableauUserOrderField {
    "Sort by domain"
    DOMAIN
    "Sort by email"
    EMAIL
    "Sort by id"
    ID
    "Sort by luid"
    LUID
    "Sort by name"
    NAME
    "Sort by username"
    USERNAME
}

"Enum for fields that can be used for sorting"
enum TagOrderField {
    "Sort by id"
    ID
    "Sort by name"
    NAME
}

"Enum for fields that can be used for sorting"
enum TaggableOrderField {
    "Sort by id"
    ID
    "Sort by luid"
    LUID
}

"Enum for fields that can be used for sorting"
enum ViewOrderField {
    "Sort by documentViewId"
    DOCUMENT_VIEW_ID
    "Sort by id"
    ID
    "Sort by luid"
    LUID
    "Sort by name"
    NAME
    "Sort by path"
    PATH
}

"Enum for fields that can be used for sorting"
enum VirtualConnectionOrderField {
    "Sort by connectionType"
    CONNECTION_TYPE
    "Sort by containerName"
    CONTAINER_NAME
    "Sort by downstreamDatasources count"
    DOWNSTREAM_DATASOURCES_COUNT
    "Sort by downstreamWorkbooks count"
    DOWNSTREAM_WORKBOOKS_COUNT
    "Sort by hasActiveWarning"
    HAS_ACTIVE_WARNING
    "Sort by id"
    ID
    "Sort by isCertified"
    IS_CERTIFIED
    "Sort by luid"
    LUID
    "Sort by name"
    NAME
    "Sort by owner count"
    OWNER_COUNT
    "Sort by projectName"
    PROJECT_NAME
    "Sort by vizportalUrlId"
    VIZPORTAL_URL_ID
}

"Enum for fields that can be used for sorting"
enum VirtualConnectionTableOrderField {
    "Sort by columns count"
    COLUMNS_COUNT
    "Sort by containsUnsupportedCustomSql"
    CONTAINS_UNSUPPORTED_CUSTOM_SQL
    "Sort by downstreamDashboards count"
    DOWNSTREAM_DASHBOARDS_COUNT
    "Sort by downstreamDatasources count"
    DOWNSTREAM_DATASOURCES_COUNT
    "Sort by downstreamWorkbooks count"
    DOWNSTREAM_WORKBOOKS_COUNT
    "Sort by extractLastRefreshedAt"
    EXTRACT_LAST_REFRESHED_AT
    "Sort by extractLastRefreshType"
    EXTRACT_LAST_REFRESH_TYPE
    "Sort by hasActiveWarning"
    HAS_ACTIVE_WARNING
    "Sort by id"
    ID
    "Sort by isCertified"
    IS_CERTIFIED
    "Sort by isExtracted"
    IS_EXTRACTED
    "Sort by luid"
    LUID
    "Sort by name"
    NAME
    "Sort by owner count"
    OWNER_COUNT
    "Sort by vizportalUrlId"
    VIZPORTAL_URL_ID
}

"Enum for fields that can be used for sorting"
enum WarnableOrderField {
    "Sort by hasActiveWarning"
    HAS_ACTIVE_WARNING
    "Sort by id"
    ID
    "Sort by luid"
    LUID
}

"Enum for fields that can be used for sorting"
enum WebDataConnectorOrderField {
    "Sort by connectionType"
    CONNECTION_TYPE
    "Sort by downstreamDatasources count"
    DOWNSTREAM_DATASOURCES_COUNT
    "Sort by downstreamVirtualConnections count"
    DOWNSTREAM_VIRTUAL_CONNECTIONS_COUNT
    "Sort by downstreamWorkbooks count"
    DOWNSTREAM_WORKBOOKS_COUNT
    "Sort by hasActiveWarning"
    HAS_ACTIVE_WARNING
    "Sort by id"
    ID
    "Sort by isCertified"
    IS_CERTIFIED
    "Sort by isEmbedded"
    IS_EMBEDDED
    "Sort by luid"
    LUID
    "Sort by name"
    NAME
    "Sort by projectName"
    PROJECT_NAME
}

"Enum for fields that can be used for sorting"
enum WorkbookOrderField {
    "Sort by containerName"
    CONTAINER_NAME
    "Sort by containsUnsupportedCustomSql"
    CONTAINS_UNSUPPORTED_CUSTOM_SQL
    "Sort by dashboards count"
    DASHBOARDS_COUNT
    "Sort by embeddedDatasources count"
    EMBEDDED_DATASOURCES_COUNT
    "Sort by id"
    ID
    "Sort by luid"
    LUID
    "Sort by name"
    NAME
    "Sort by owner count"
    OWNER_COUNT
    "Sort by projectLuid"
    PROJECT_LUID
    "Sort by projectName"
    PROJECT_NAME
    "Sort by sheets count"
    SHEETS_COUNT
    "Sort by views count"
    VIEWS_COUNT
    "Sort by vizportalUrlId"
    VIZPORTAL_URL_ID
}

"An RFC-3339 compliant DateTime Scalar"
scalar DateTime

"Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
input AnalyticsFieldSortOrder {
    "Order direction to sort output"
    direction: OrderDirection!
    "GraphQL field to sort on"
    field: AnalyticsFieldOrderField!
}

"Filter by GraphQL field and given value"
input AnalyticsField_Filter {
    "Unique Identifier of object to retrieve"
    id: ID
    "Unique Identifier of object to retrieve"
    idWithin: [ID]
}

"Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
input AskDataExtensionSortOrder {
    "Order direction to sort output"
    direction: OrderDirection!
    "GraphQL field to sort on"
    field: AskDataExtensionOrderField!
}

"Filter by GraphQL field and given value"
input AskDataExtension_Filter {
    "Unique identifier used by the metadata API"
    id: ID
    "Unique identifier used by the metadata API"
    idWithin: [ID]
}

"Filter by GraphQL field and given value"
input AskDataExtension_Required_Filter {
    "Unique identifier used by the metadata API"
    id: ID
    "Unique identifier used by the metadata API"
    idWithin: [ID]
}

"Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
input BinFieldSortOrder {
    "Order direction to sort output"
    direction: OrderDirection!
    "GraphQL field to sort on"
    field: BinFieldOrderField!
}

"Filter by GraphQL field and given value"
input BinField_Filter {
    "Unique identifier used by the metadata API.  Not the same as the numeric ID used on server"
    id: ID
    "Unique identifier used by the metadata API.  Not the same as the numeric ID used on server"
    idWithin: [ID]
    "True if the field is hidden"
    isHidden: Boolean
    "True if the field is hidden"
    isHiddenWithin: [Boolean]
    "Name shown in server and desktop clients"
    name: String
    "Name shown in server and desktop clients"
    nameWithin: [String]
}

"Filter by GraphQL field and given value"
input BinField_Required_Filter {
    "Unique identifier used by the metadata API.  Not the same as the numeric ID used on server"
    id: ID
    "Unique identifier used by the metadata API.  Not the same as the numeric ID used on server"
    idWithin: [ID]
    "Name shown in server and desktop clients"
    name: String
    "Name shown in server and desktop clients"
    nameWithin: [String]
}

"Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
input CalculatedFieldSortOrder {
    "Order direction to sort output"
    direction: OrderDirection!
    "GraphQL field to sort on"
    field: CalculatedFieldOrderField!
}

"Filter by GraphQL field and given value"
input CalculatedField_Filter {
    "Unique identifier used by the metadata API.  Not the same as the numeric ID used on server"
    id: ID
    "Unique identifier used by the metadata API.  Not the same as the numeric ID used on server"
    idWithin: [ID]
    "True if the field is hidden"
    isHidden: Boolean
    "True if the field is hidden"
    isHiddenWithin: [Boolean]
    "Name shown in server and desktop clients"
    name: String
    "Name shown in server and desktop clients"
    nameWithin: [String]
}

"Filter by GraphQL field and given value"
input CalculatedField_Required_Filter {
    "Unique identifier used by the metadata API.  Not the same as the numeric ID used on server"
    id: ID
    "Unique identifier used by the metadata API.  Not the same as the numeric ID used on server"
    idWithin: [ID]
    "Name shown in server and desktop clients"
    name: String
    "Name shown in server and desktop clients"
    nameWithin: [String]
}

"Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
input CertifiableSortOrder {
    "Order direction to sort output"
    direction: OrderDirection!
    "GraphQL field to sort on"
    field: CertifiableOrderField!
}

"Filter by GraphQL field and given value"
input Certifiable_Filter {
    "Unique identifier used by the metadata API. Not the same as the numeric ID used on server"
    id: ID
    "Unique identifier used by the metadata API. Not the same as the numeric ID used on server"
    idWithin: [ID]
    "True if this content item contains an active data quality certification"
    isCertified: Boolean
    "True if this content item contains an active data quality certification"
    isCertifiedWithin: [Boolean]
    "Locally unique identifier used for the REST API on the Tableau Server"
    luid: String
    "Locally unique identifier used for the REST API on the Tableau Server"
    luidWithin: [String]
}

"Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
input CloudFileSortOrder {
    "Order direction to sort output"
    direction: OrderDirection!
    "GraphQL field to sort on"
    field: CloudFileOrderField!
}

"Filter by GraphQL field and given value"
input CloudFile_Filter {
    "Connection type shortname"
    connectionType: String
    "Connection type shortname"
    connectionTypeWithin: [String]
    "True if the database has an active data quality warning"
    hasActiveWarning: Boolean
    "True if the database has an active data quality warning"
    hasActiveWarningWithin: [Boolean]
    "Unique identifier used by the metadata API.  Not the same as the numeric ID used on server"
    id: ID
    "Unique identifier used by the metadata API.  Not the same as the numeric ID used on server"
    idWithin: [ID]
    "True if this database contains an active data quality certification"
    isCertified: Boolean
    "True if this database contains an active data quality certification"
    isCertifiedWithin: [Boolean]
    "True if this file is embedded in Tableau content, e.g., a packaged workbook"
    isEmbedded: Boolean
    "True if this file is embedded in Tableau content, e.g., a packaged workbook"
    isEmbeddedWithin: [Boolean]
    "Locally unique identifier used for the REST API on the Tableau Server"
    luid: String
    "Locally unique identifier used for the REST API on the Tableau Server"
    luidWithin: [String]
    "Name shown in server and desktop clients"
    name: String
    "Name shown in server and desktop clients"
    nameWithin: [String]
    "The name of the project in which the table is visible. Will be empty if the table is not in a project."
    projectName: String
    "The name of the project in which the table is visible. Will be empty if the table is not in a project."
    projectNameWithin: [String]
    "Filter the output based on text query."
    text: String
}

"Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
input ColumnFieldSortOrder {
    "Order direction to sort output"
    direction: OrderDirection!
    "GraphQL field to sort on"
    field: ColumnFieldOrderField!
}

"Filter by GraphQL field and given value"
input ColumnField_Filter {
    "Unique identifier used by the metadata API.  Not the same as the numeric ID used on server"
    id: ID
    "Unique identifier used by the metadata API.  Not the same as the numeric ID used on server"
    idWithin: [ID]
    "True if the field is hidden"
    isHidden: Boolean
    "True if the field is hidden"
    isHiddenWithin: [Boolean]
    "Name shown in server and desktop clients"
    name: String
    "Name shown in server and desktop clients"
    nameWithin: [String]
}

"Filter by GraphQL field and given value"
input ColumnField_Required_Filter {
    "Unique identifier used by the metadata API.  Not the same as the numeric ID used on server"
    id: ID
    "Unique identifier used by the metadata API.  Not the same as the numeric ID used on server"
    idWithin: [ID]
    "Name shown in server and desktop clients"
    name: String
    "Name shown in server and desktop clients"
    nameWithin: [String]
}

"Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
input ColumnSortOrder {
    "Order direction to sort output"
    direction: OrderDirection!
    "GraphQL field to sort on"
    field: ColumnOrderField!
}

"Filter by GraphQL field and given value"
input Column_Filter {
    "True if this column has an active data quality warning. Available in Tableau Cloud October 2022 / Server 2022.3 and later."
    hasActiveWarning: Boolean
    "True if this column has an active data quality warning. Available in Tableau Cloud October 2022 / Server 2022.3 and later."
    hasActiveWarningWithin: [Boolean]
    "Unique identifier used by the metadata API.  Not the same as the numeric ID used on server"
    id: ID
    "Unique identifier used by the metadata API.  Not the same as the numeric ID used on server"
    idWithin: [ID]
    "Locally unique identifier used for the REST API on the Tableau Server"
    luid: String
    "Locally unique identifier used for the REST API on the Tableau Server"
    luidWithin: [String]
    "Name of column"
    name: String
    "Name of column"
    nameWithin: [String]
}

"Filter by GraphQL field and given value"
input Column_Required_Filter {
    "Unique identifier used by the metadata API.  Not the same as the numeric ID used on server"
    id: ID
    "Unique identifier used by the metadata API.  Not the same as the numeric ID used on server"
    idWithin: [ID]
    "Name of column"
    name: String
    "Name of column"
    nameWithin: [String]
}

"Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
input CombinedFieldSortOrder {
    "Order direction to sort output"
    direction: OrderDirection!
    "GraphQL field to sort on"
    field: CombinedFieldOrderField!
}

"Filter by GraphQL field and given value"
input CombinedField_Filter {
    "Unique identifier used by the metadata API.  Not the same as the numeric ID used on server"
    id: ID
    "Unique identifier used by the metadata API.  Not the same as the numeric ID used on server"
    idWithin: [ID]
    "True if the field is hidden"
    isHidden: Boolean
    "True if the field is hidden"
    isHiddenWithin: [Boolean]
    "Name shown in server and desktop clients"
    name: String
    "Name shown in server and desktop clients"
    nameWithin: [String]
}

"Filter by GraphQL field and given value"
input CombinedField_Required_Filter {
    "Unique identifier used by the metadata API.  Not the same as the numeric ID used on server"
    id: ID
    "Unique identifier used by the metadata API.  Not the same as the numeric ID used on server"
    idWithin: [ID]
    "Name shown in server and desktop clients"
    name: String
    "Name shown in server and desktop clients"
    nameWithin: [String]
}

"Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
input CombinedSetFieldSortOrder {
    "Order direction to sort output"
    direction: OrderDirection!
    "GraphQL field to sort on"
    field: CombinedSetFieldOrderField!
}

"Filter by GraphQL field and given value"
input CombinedSetField_Filter {
    "Unique identifier used by the metadata API.  Not the same as the numeric ID used on server"
    id: ID
    "Unique identifier used by the metadata API.  Not the same as the numeric ID used on server"
    idWithin: [ID]
    "True if the field is hidden"
    isHidden: Boolean
    "True if the field is hidden"
    isHiddenWithin: [Boolean]
    "Name shown in server and desktop clients"
    name: String
    "Name shown in server and desktop clients"
    nameWithin: [String]
}

"Filter by GraphQL field and given value"
input CombinedSetField_Required_Filter {
    "Unique identifier used by the metadata API.  Not the same as the numeric ID used on server"
    id: ID
    "Unique identifier used by the metadata API.  Not the same as the numeric ID used on server"
    idWithin: [ID]
    "Name shown in server and desktop clients"
    name: String
    "Name shown in server and desktop clients"
    nameWithin: [String]
}

"Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
input CustomSQLTableSortOrder {
    "Order direction to sort output"
    direction: OrderDirection!
    "GraphQL field to sort on"
    field: CustomSQLTableOrderField!
}

"Filter by GraphQL field and given value"
input CustomSQLTable_Filter {
    "Unique identifier used by the metadata API.  Not the same as the numeric ID used on server"
    id: ID
    "Unique identifier used by the metadata API.  Not the same as the numeric ID used on server"
    idWithin: [ID]
    "True if the query is unsupported by Tableau Catalog, in which case lineage may be incomplete"
    isUnsupportedCustomSql: Boolean
    "True if the query is unsupported by Tableau Catalog, in which case lineage may be incomplete"
    isUnsupportedCustomSqlWithin: [Boolean]
    "Name shown in server and desktop clients"
    name: String
    "Name shown in server and desktop clients"
    nameWithin: [String]
    "Filter the output based on text query."
    text: String
}

"Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
input DashboardSortOrder {
    "Order direction to sort output"
    direction: OrderDirection!
    "GraphQL field to sort on"
    field: DashboardOrderField!
}

"Filter by GraphQL field and given value"
input Dashboard_Filter {
    "Unique ID for the dashboard generated for and stored within the workbook, survives renames, and is used for internal processes"
    documentViewId: String
    "Unique ID for the dashboard generated for and stored within the workbook, survives renames, and is used for internal processes"
    documentViewIdWithin: [String]
    "Unique identifier used by the metadata API.  Not the same as the numeric ID used on server"
    id: ID
    "Unique identifier used by the metadata API.  Not the same as the numeric ID used on server"
    idWithin: [ID]
    "Locally unique identifier used for the REST API on the Tableau Server (Blank if worksheet is hidden in Workbook)"
    luid: String
    "Locally unique identifier used for the REST API on the Tableau Server (Blank if worksheet is hidden in Workbook)"
    luidWithin: [String]
    "Name shown in server and desktop clients"
    name: String
    "Name shown in server and desktop clients"
    nameWithin: [String]
    "Server path to dashboard"
    path: String
    "Server path to dashboard"
    pathWithin: [String]
}

"Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
input DataFieldSortOrder {
    "Order direction to sort output"
    direction: OrderDirection!
    "GraphQL field to sort on"
    field: DataFieldOrderField!
}

"Filter by GraphQL field and given value"
input DataField_Filter {
    "Unique Identifier of object to retrieve"
    id: ID
    "Unique Identifier of object to retrieve"
    idWithin: [ID]
}

"Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
input DataQualityCertificationSortOrder {
    "Order direction to sort output"
    direction: OrderDirection!
    "GraphQL field to sort on"
    field: DataQualityCertificationOrderField!
}

"Filter by GraphQL field and given value"
input DataQualityCertification_Filter {
    "Unique identifier used by the metadata API. Not the same as the numeric ID used on server"
    id: ID
    "Unique identifier used by the metadata API. Not the same as the numeric ID used on server"
    idWithin: [ID]
    "True if the data quality certification is active"
    isActive: Boolean
    "True if the data quality certification is active"
    isActiveWithin: [Boolean]
    "Locally unique identifier used for the REST API on the Tableau Server"
    luid: String
    "Locally unique identifier used for the REST API on the Tableau Server"
    luidWithin: [String]
}

"Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
input DataQualityWarningSortOrder {
    "Order direction to sort output"
    direction: OrderDirection!
    "GraphQL field to sort on"
    field: DataQualityWarningOrderField!
}

"Filter by GraphQL field and given value"
input DataQualityWarning_Filter {
    "Unique identifier used by the metadata API. Not the same as the numeric ID used on server"
    id: ID
    "Unique identifier used by the metadata API. Not the same as the numeric ID used on server"
    idWithin: [ID]
    "True if the data quality warning is active"
    isActive: Boolean
    "True if the data quality warning is active"
    isActiveWithin: [Boolean]
    "True if the data quality warning is severe"
    isSevere: Boolean
    "True if the data quality warning is severe"
    isSevereWithin: [Boolean]
    "Locally unique identifier used for the REST API on the Tableau Server"
    luid: String
    "Locally unique identifier used for the REST API on the Tableau Server"
    luidWithin: [String]
    "Type of the data quality warning"
    warningType: String
    "Type of the data quality warning"
    warningTypeWithin: [String]
}

"Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
input DatabaseServerSortOrder {
    "Order direction to sort output"
    direction: OrderDirection!
    "GraphQL field to sort on"
    field: DatabaseServerOrderField!
}

"Filter by GraphQL field and given value"
input DatabaseServer_Filter {
    "Connection type shortname"
    connectionType: String
    "Connection type shortname"
    connectionTypeWithin: [String]
    "True if the database has an active data quality warning"
    hasActiveWarning: Boolean
    "True if the database has an active data quality warning"
    hasActiveWarningWithin: [Boolean]
    "Hostname of the database"
    hostName: String
    "Hostname of the database"
    hostNameWithin: [String]
    "Unique identifier used by the metadata API.  Not the same as the numeric ID used on server"
    id: ID
    "Unique identifier used by the metadata API.  Not the same as the numeric ID used on server"
    idWithin: [ID]
    "True if this database contains an active data quality certification"
    isCertified: Boolean
    "True if this database contains an active data quality certification"
    isCertifiedWithin: [Boolean]
    "A database server is never embedded in Tableau content"
    isEmbedded: Boolean
    "A database server is never embedded in Tableau content"
    isEmbeddedWithin: [Boolean]
    "Locally unique identifier used for the REST API on the Tableau Server"
    luid: String
    "Locally unique identifier used for the REST API on the Tableau Server"
    luidWithin: [String]
    "Name shown in server and desktop clients"
    name: String
    "Name shown in server and desktop clients"
    nameWithin: [String]
    "The name of the project in which the table is visible. Will be empty if the table is not in a project."
    projectName: String
    "The name of the project in which the table is visible. Will be empty if the table is not in a project."
    projectNameWithin: [String]
    "Filter the output based on text query."
    text: String
}

"Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
input DatabaseSortOrder {
    "Order direction to sort output"
    direction: OrderDirection!
    "GraphQL field to sort on"
    field: DatabaseOrderField!
}

"Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
input DatabaseTableSortOrder {
    "Order direction to sort output"
    direction: OrderDirection!
    "GraphQL field to sort on"
    field: DatabaseTableOrderField!
}

"Filter by GraphQL field and given value"
input DatabaseTable_Filter {
    "Connection type of parent database"
    connectionType: String
    "Connection type of parent database"
    connectionTypeWithin: [String]
    "Fully qualified table name"
    fullName: String
    "Fully qualified table name"
    fullNameWithin: [String]
    "True if the table has an active data quality warning"
    hasActiveWarning: Boolean
    "True if the table has an active data quality warning"
    hasActiveWarningWithin: [Boolean]
    "Unique identifier used by the metadata API.  Not the same as the numeric ID used on server"
    id: ID
    "Unique identifier used by the metadata API.  Not the same as the numeric ID used on server"
    idWithin: [ID]
    "True if this table contains an active data quality certification"
    isCertified: Boolean
    "True if this table contains an active data quality certification"
    isCertifiedWithin: [Boolean]
    "True if this table is embedded in Tableau content"
    isEmbedded: Boolean
    "True if this table is embedded in Tableau content"
    isEmbeddedWithin: [Boolean]
    "Locally unique identifier used for the REST API on the Tableau Server"
    luid: String
    "Locally unique identifier used for the REST API on the Tableau Server"
    luidWithin: [String]
    "Name shown in server and desktop clients"
    name: String
    "Name shown in server and desktop clients"
    nameWithin: [String]
    "The name of the project in which the table is visible. Will be empty if the table is not in a project."
    projectName: String
    "The name of the project in which the table is visible. Will be empty if the table is not in a project."
    projectNameWithin: [String]
    """

    Name of table schema.

    Note: For some databases, such as Amazon Athena and Exasol, the schema attribute may not return the correct schema name for the table. For more information, see https://help.tableau.com/current/api/metadata_api/en-us/docs/meta_api_model.html#schema_attribute.
    """
    schema: String
    """

    Name of table schema.

    Note: For some databases, such as Amazon Athena and Exasol, the schema attribute may not return the correct schema name for the table. For more information, see https://help.tableau.com/current/api/metadata_api/en-us/docs/meta_api_model.html#schema_attribute.
    """
    schemaWithin: [String]
    "Filter the output based on text query."
    text: String
}

"Filter by GraphQL field and given value"
input Database_Filter {
    "Connection type shortname"
    connectionType: String
    "Connection type shortname"
    connectionTypeWithin: [String]
    "True if the database has an active data quality warning"
    hasActiveWarning: Boolean
    "True if the database has an active data quality warning"
    hasActiveWarningWithin: [Boolean]
    "Unique identifier used by the metadata API.  Not the same as the numeric ID used on server"
    id: ID
    "Unique identifier used by the metadata API.  Not the same as the numeric ID used on server"
    idWithin: [ID]
    "True if this database contains an active data quality certification"
    isCertified: Boolean
    "True if this database contains an active data quality certification"
    isCertifiedWithin: [Boolean]
    "True if this database is embedded in Tableau content, e.g., a packaged workbook"
    isEmbedded: Boolean
    "True if this database is embedded in Tableau content, e.g., a packaged workbook"
    isEmbeddedWithin: [Boolean]
    "Locally unique identifier used for the REST API on the Tableau Server"
    luid: String
    "Locally unique identifier used for the REST API on the Tableau Server"
    luidWithin: [String]
    "Name shown in server and desktop clients"
    name: String
    "Name shown in server and desktop clients"
    nameWithin: [String]
    "The name of the project in which the table is visible. Will be empty if the table is not in a project."
    projectName: String
    "The name of the project in which the table is visible. Will be empty if the table is not in a project."
    projectNameWithin: [String]
    "Filter the output based on text query."
    text: String
}

"Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
input DatasourceFieldSortOrder {
    "Order direction to sort output"
    direction: OrderDirection!
    "GraphQL field to sort on"
    field: DatasourceFieldOrderField!
}

"Filter by GraphQL field and given value"
input DatasourceField_Filter {
    "Unique identifier used by the metadata API.  Not the same as the numeric ID used on server"
    id: ID
    "Unique identifier used by the metadata API.  Not the same as the numeric ID used on server"
    idWithin: [ID]
    "True if the field is hidden"
    isHidden: Boolean
    "True if the field is hidden"
    isHiddenWithin: [Boolean]
    "Name shown in server and desktop clients"
    name: String
    "Name shown in server and desktop clients"
    nameWithin: [String]
}

"Filter by GraphQL field and given value"
input DatasourceField_Required_Filter {
    "Unique identifier used by the metadata API.  Not the same as the numeric ID used on server"
    id: ID
    "Unique identifier used by the metadata API.  Not the same as the numeric ID used on server"
    idWithin: [ID]
    "Name shown in server and desktop clients"
    name: String
    "Name shown in server and desktop clients"
    nameWithin: [String]
}

"Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
input DatasourceFilterSortOrder {
    "Order direction to sort output"
    direction: OrderDirection!
    "GraphQL field to sort on"
    field: DatasourceFilterOrderField!
}

"Filter by GraphQL field and given value"
input DatasourceFilter_Filter {
    "Unique identifier used by the metadata API.  Not the same as the numeric ID used on server"
    id: ID
    "Unique identifier used by the metadata API.  Not the same as the numeric ID used on server"
    idWithin: [ID]
}

"Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
input DatasourceSortOrder {
    "Order direction to sort output"
    direction: OrderDirection!
    "GraphQL field to sort on"
    field: DatasourceOrderField!
}

"Filter by GraphQL field and given value"
input Datasource_Filter {
    "True if the datasource contains unsupported custom SQL, in which case lineage may be incomplete"
    containsUnsupportedCustomSql: Boolean
    "True if the datasource contains unsupported custom SQL, in which case lineage may be incomplete"
    containsUnsupportedCustomSqlWithin: [Boolean]
    "Unique identifier used by the metadata API. Not the same as the numeric ID used on server"
    id: ID
    "Unique identifier used by the metadata API. Not the same as the numeric ID used on server"
    idWithin: [ID]
    "Name shown in server and desktop clients"
    name: String
    "Name shown in server and desktop clients"
    nameWithin: [String]
}

"Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
input EmbeddedDatasourceSortOrder {
    "Order direction to sort output"
    direction: OrderDirection!
    "GraphQL field to sort on"
    field: EmbeddedDatasourceOrderField!
}

"Filter by GraphQL field and given value"
input EmbeddedDatasource_Filter {
    "True if the datasource contains unsupported custom SQL, in which case lineage may be incomplete"
    containsUnsupportedCustomSql: Boolean
    "True if the datasource contains unsupported custom SQL, in which case lineage may be incomplete"
    containsUnsupportedCustomSqlWithin: [Boolean]
    "Unique identifier used by the metadata API.  Not the same as the numeric ID used on server"
    id: ID
    "Unique identifier used by the metadata API.  Not the same as the numeric ID used on server"
    idWithin: [ID]
    "Name shown in server and desktop clients"
    name: String
    "Name shown in server and desktop clients"
    nameWithin: [String]
}

"Filter by GraphQL field and given value"
input ExtractType_Filter {
    "Unique Identifier of object to retrieve"
    id: ID
    "Unique Identifier of object to retrieve"
    idWithin: [ID]
}

"Filter by GraphQL field and given value"
input FieldDataType_Filter {
    "Unique Identifier of object to retrieve"
    id: ID
    "Unique Identifier of object to retrieve"
    idWithin: [ID]
}

"Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
input FieldReferencingFieldSortOrder {
    "Order direction to sort output"
    direction: OrderDirection!
    "GraphQL field to sort on"
    field: FieldReferencingFieldOrderField!
}

"Filter by GraphQL field and given value"
input FieldReferencingField_Filter {
    "Unique Identifier of object to retrieve"
    id: ID
    "Unique Identifier of object to retrieve"
    idWithin: [ID]
}

"Filter by GraphQL field and given value"
input FieldRoleCategory_Filter {
    "Unique Identifier of object to retrieve"
    id: ID
    "Unique Identifier of object to retrieve"
    idWithin: [ID]
}

"Filter by GraphQL field and given value"
input FieldRole_Filter {
    "Unique Identifier of object to retrieve"
    id: ID
    "Unique Identifier of object to retrieve"
    idWithin: [ID]
}

"Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
input FieldSortOrder {
    "Order direction to sort output"
    direction: OrderDirection!
    "GraphQL field to sort on"
    field: FieldOrderField!
}

"Filter by GraphQL field and given value"
input Field_Filter {
    "Unique identifier used by the metadata API.  Not the same as the numeric ID used on server"
    id: ID
    "Unique identifier used by the metadata API.  Not the same as the numeric ID used on server"
    idWithin: [ID]
    "True if the field is hidden"
    isHidden: Boolean
    "True if the field is hidden"
    isHiddenWithin: [Boolean]
    "Name shown in server"
    name: String
    "Name shown in server"
    nameWithin: [String]
}

"Filter by GraphQL field and given value"
input Field_Required_Filter {
    "Unique identifier used by the metadata API.  Not the same as the numeric ID used on server"
    id: ID
    "Unique identifier used by the metadata API.  Not the same as the numeric ID used on server"
    idWithin: [ID]
    "Name shown in server"
    name: String
    "Name shown in server"
    nameWithin: [String]
}

"Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
input FileSortOrder {
    "Order direction to sort output"
    direction: OrderDirection!
    "GraphQL field to sort on"
    field: FileOrderField!
}

"Filter by GraphQL field and given value"
input File_Filter {
    "Connection type shortname"
    connectionType: String
    "Connection type shortname"
    connectionTypeWithin: [String]
    "True if the database has an active data quality warning"
    hasActiveWarning: Boolean
    "True if the database has an active data quality warning"
    hasActiveWarningWithin: [Boolean]
    "Unique identifier used by the metadata API.  Not the same as the numeric ID used on server"
    id: ID
    "Unique identifier used by the metadata API.  Not the same as the numeric ID used on server"
    idWithin: [ID]
    "True if this database contains an active data quality certification"
    isCertified: Boolean
    "True if this database contains an active data quality certification"
    isCertifiedWithin: [Boolean]
    "True if this file is embedded in Tableau content, e.g., a packaged workbook"
    isEmbedded: Boolean
    "True if this file is embedded in Tableau content, e.g., a packaged workbook"
    isEmbeddedWithin: [Boolean]
    "Locally unique identifier used for the REST API on the Tableau Server"
    luid: String
    "Locally unique identifier used for the REST API on the Tableau Server"
    luidWithin: [String]
    "Name shown in server and desktop clients"
    name: String
    "Name shown in server and desktop clients"
    nameWithin: [String]
    "The name of the project in which the table is visible. Will be empty if the table is not in a project."
    projectName: String
    "The name of the project in which the table is visible. Will be empty if the table is not in a project."
    projectNameWithin: [String]
    "Filter the output based on text query."
    text: String
}

"Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
input FlowColumnInputFieldSortOrder {
    "Order direction to sort output"
    direction: OrderDirection!
    "GraphQL field to sort on"
    field: FlowColumnInputFieldOrderField!
}

"Filter by GraphQL field and given value"
input FlowColumnInputField_Filter {
    "Unique identifier used by the metadata API"
    id: ID
    "Unique identifier used by the metadata API"
    idWithin: [ID]
    "Name shown in server and desktop clients"
    name: String
    "Name shown in server and desktop clients"
    nameWithin: [String]
}

"Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
input FlowColumnOutputFieldSortOrder {
    "Order direction to sort output"
    direction: OrderDirection!
    "GraphQL field to sort on"
    field: FlowColumnOutputFieldOrderField!
}

"Filter by GraphQL field and given value"
input FlowColumnOutputField_Filter {
    "Unique identifier used by the metadata API"
    id: ID
    "Unique identifier used by the metadata API"
    idWithin: [ID]
    "Name shown in server and desktop clients"
    name: String
    "Name shown in server and desktop clients"
    nameWithin: [String]
}

"Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
input FlowFieldInputFieldSortOrder {
    "Order direction to sort output"
    direction: OrderDirection!
    "GraphQL field to sort on"
    field: FlowFieldInputFieldOrderField!
}

"Filter by GraphQL field and given value"
input FlowFieldInputField_Filter {
    "Unique identifier used by the metadata API"
    id: ID
    "Unique identifier used by the metadata API"
    idWithin: [ID]
    "Name shown in server and desktop clients"
    name: String
    "Name shown in server and desktop clients"
    nameWithin: [String]
}

"Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
input FlowFieldOutputFieldSortOrder {
    "Order direction to sort output"
    direction: OrderDirection!
    "GraphQL field to sort on"
    field: FlowFieldOutputFieldOrderField!
}

"Filter by GraphQL field and given value"
input FlowFieldOutputField_Filter {
    "Unique identifier used by the metadata API"
    id: ID
    "Unique identifier used by the metadata API"
    idWithin: [ID]
    "Name shown in server and desktop clients"
    name: String
    "Name shown in server and desktop clients"
    nameWithin: [String]
}

"Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
input FlowInputFieldSortOrder {
    "Order direction to sort output"
    direction: OrderDirection!
    "GraphQL field to sort on"
    field: FlowInputFieldOrderField!
}

"Filter by GraphQL field and given value"
input FlowInputField_Filter {
    "Unique identifier used by the metadata API"
    id: ID
    "Unique identifier used by the metadata API"
    idWithin: [ID]
    "Name shown in server and desktop clients"
    name: String
    "Name shown in server and desktop clients"
    nameWithin: [String]
}

"Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
input FlowOutputFieldSortOrder {
    "Order direction to sort output"
    direction: OrderDirection!
    "GraphQL field to sort on"
    field: FlowOutputFieldOrderField!
}

"Filter by GraphQL field and given value"
input FlowOutputField_Filter {
    "Unique identifier used by the metadata API"
    id: ID
    "Unique identifier used by the metadata API"
    idWithin: [ID]
    "Name shown in server and desktop clients"
    name: String
    "Name shown in server and desktop clients"
    nameWithin: [String]
}

"Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
input FlowOutputStepSortOrder {
    "Order direction to sort output"
    direction: OrderDirection!
    "GraphQL field to sort on"
    field: FlowOutputStepOrderField!
}

"Filter by GraphQL field and given value"
input FlowOutputStep_Filter {
    "Unique identifier used by the metadata API"
    id: ID
    "Unique identifier used by the metadata API"
    idWithin: [ID]
    "Name shown in server and desktop clients"
    name: String
    "Name shown in server and desktop clients"
    nameWithin: [String]
}

"Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
input FlowSortOrder {
    "Order direction to sort output"
    direction: OrderDirection!
    "GraphQL field to sort on"
    field: FlowOrderField!
}

"Filter by GraphQL field and given value"
input Flow_Filter {
    "The name of the container in which the flow is visible and usable. Either a personal space or project."
    containerName: String
    "The name of the container in which the flow is visible and usable. Either a personal space or project."
    containerNameWithin: [String]
    "True if the flow contains unsupported custom SQL, in which case lineage may be incomplete"
    containsUnsupportedCustomSql: Boolean
    "True if the flow contains unsupported custom SQL, in which case lineage may be incomplete"
    containsUnsupportedCustomSqlWithin: [Boolean]
    "True if the flow has an active data quality warning"
    hasActiveWarning: Boolean
    "True if the flow has an active data quality warning"
    hasActiveWarningWithin: [Boolean]
    "Unique identifier used by the metadata API.  Not the same as the numeric ID used on server"
    id: ID
    "Unique identifier used by the metadata API.  Not the same as the numeric ID used on server"
    idWithin: [ID]
    "Locally unique identifier used for the REST API on the Tableau Server"
    luid: String
    "Locally unique identifier used for the REST API on the Tableau Server"
    luidWithin: [String]
    "Name shown in server and desktop clients"
    name: String
    "Name shown in server and desktop clients"
    nameWithin: [String]
    "The name of the project in which the flow is visible and usable"
    projectName: String
    "The name of the project in which the flow is visible and usable"
    projectNameWithin: [String]
    "VizPortal URL ID; used for URL generation"
    vizportalUrlId: String
    "VizPortal URL ID; used for URL generation"
    vizportalUrlIdWithin: [String]
}

"Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
input GroupFieldSortOrder {
    "Order direction to sort output"
    direction: OrderDirection!
    "GraphQL field to sort on"
    field: GroupFieldOrderField!
}

"Filter by GraphQL field and given value"
input GroupField_Filter {
    "Unique identifier used by the metadata API.  Not the same as the numeric ID used on server"
    id: ID
    "Unique identifier used by the metadata API.  Not the same as the numeric ID used on server"
    idWithin: [ID]
    "True if the field is hidden"
    isHidden: Boolean
    "True if the field is hidden"
    isHiddenWithin: [Boolean]
    "Name shown in server and desktop clients"
    name: String
    "Name shown in server and desktop clients"
    nameWithin: [String]
}

"Filter by GraphQL field and given value"
input GroupField_Required_Filter {
    "Unique identifier used by the metadata API.  Not the same as the numeric ID used on server"
    id: ID
    "Unique identifier used by the metadata API.  Not the same as the numeric ID used on server"
    idWithin: [ID]
    "Name shown in server and desktop clients"
    name: String
    "Name shown in server and desktop clients"
    nameWithin: [String]
}

"Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
input HierarchyFieldSortOrder {
    "Order direction to sort output"
    direction: OrderDirection!
    "GraphQL field to sort on"
    field: HierarchyFieldOrderField!
}

"Filter by GraphQL field and given value"
input HierarchyField_Filter {
    "Unique identifier used by the metadata API.  Not the same as the numeric ID used on server"
    id: ID
    "Unique identifier used by the metadata API.  Not the same as the numeric ID used on server"
    idWithin: [ID]
    "True if the field is hidden"
    isHidden: Boolean
    "True if the field is hidden"
    isHiddenWithin: [Boolean]
    "Name shown in server and desktop clients"
    name: String
    "Name shown in server and desktop clients"
    nameWithin: [String]
}

"Filter by GraphQL field and given value"
input HierarchyField_Required_Filter {
    "Unique identifier used by the metadata API.  Not the same as the numeric ID used on server"
    id: ID
    "Unique identifier used by the metadata API.  Not the same as the numeric ID used on server"
    idWithin: [ID]
    "Name shown in server and desktop clients"
    name: String
    "Name shown in server and desktop clients"
    nameWithin: [String]
}

"Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
input LensFieldSortOrder {
    "Order direction to sort output"
    direction: OrderDirection!
    "GraphQL field to sort on"
    field: LensFieldOrderField!
}

"Filter by GraphQL field and given value"
input LensField_Filter {
    "Unique identifier used by the metadata API.  Not the same as the numeric ID used on server"
    id: ID
    "Unique identifier used by the metadata API.  Not the same as the numeric ID used on server"
    idWithin: [ID]
    "Name of field shown locally in Ask Data. If null or empty, use name inherited from datasource field."
    name: String
    "Name of field shown locally in Ask Data. If null or empty, use name inherited from datasource field."
    nameWithin: [String]
}

"Filter by GraphQL field and given value"
input LensField_Required_Filter {
    "Unique identifier used by the metadata API.  Not the same as the numeric ID used on server"
    id: ID
    "Unique identifier used by the metadata API.  Not the same as the numeric ID used on server"
    idWithin: [ID]
}

"Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
input LensSortOrder {
    "Order direction to sort output"
    direction: OrderDirection!
    "GraphQL field to sort on"
    field: LensOrderField!
}

"Filter by GraphQL field and given value"
input Lens_Filter {
    "Unique identifier used by the metadata API.  Not the same as the numeric ID used on server"
    id: ID
    "Unique identifier used by the metadata API.  Not the same as the numeric ID used on server"
    idWithin: [ID]
    "Locally unique identifier used for the REST API on the Tableau Server"
    luid: String
    "Locally unique identifier used for the REST API on the Tableau Server"
    luidWithin: [String]
    "Name shown in server"
    name: String
    "Name shown in server"
    nameWithin: [String]
    "VizPortal URL ID; used for URL generation"
    vizportalUrlId: String
    "VizPortal URL ID; used for URL generation"
    vizportalUrlIdWithin: [String]
}

"Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
input LinkedFlowSortOrder {
    "Order direction to sort output"
    direction: OrderDirection!
    "GraphQL field to sort on"
    field: LinkedFlowOrderField!
}

"Filter by GraphQL field and given value"
input LinkedFlow_Filter {
    "Unique Identifier of object to retrieve"
    id: ID
    "Unique Identifier of object to retrieve"
    idWithin: [ID]
}

"Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
input MetricSortOrder {
    "Order direction to sort output"
    direction: OrderDirection!
    "GraphQL field to sort on"
    field: MetricOrderField!
}

"Filter by GraphQL field and given value"
input Metric_Filter {
    "The name of the container in which the metric is visible and usable. This is always a project."
    containerName: String
    "The name of the container in which the metric is visible and usable. This is always a project."
    containerNameWithin: [String]
    "Unique identifier used by the metadata API.  Not the same as the numeric ID used on server"
    id: ID
    "Unique identifier used by the metadata API.  Not the same as the numeric ID used on server"
    idWithin: [ID]
    "Locally unique identifier used for the REST API on the Tableau Server"
    luid: String
    "Locally unique identifier used for the REST API on the Tableau Server"
    luidWithin: [String]
    "Name shown in server and desktop clients"
    name: String
    "Name shown in server and desktop clients"
    nameWithin: [String]
    "The name of the project in which the Metric is visible and usable."
    projectName: String
    "The name of the project in which the Metric is visible and usable."
    projectNameWithin: [String]
    "VizPortal URL ID; used for URL generation"
    vizportalUrlId: String
    "VizPortal URL ID; used for URL generation"
    vizportalUrlIdWithin: [String]
}

"Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
input NodeSortOrder {
    "Order direction to sort output"
    direction: OrderDirection!
    "GraphQL field to sort on"
    field: NodeOrderField!
}

"Filter by GraphQL field and given value"
input Node_Filter {
    "Unique identifier used by the metadata API. Not the same as the numeric ID used on server"
    id: ID
    "Unique identifier used by the metadata API. Not the same as the numeric ID used on server"
    idWithin: [ID]
}

"Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
input ParameterSortOrder {
    "Order direction to sort output"
    direction: OrderDirection!
    "GraphQL field to sort on"
    field: ParameterOrderField!
}

"Filter by GraphQL field and given value"
input Parameter_Filter {
    "Unique identifier used by the metadata API.  Not the same as the numeric ID used on server"
    id: ID
    "Unique identifier used by the metadata API.  Not the same as the numeric ID used on server"
    idWithin: [ID]
    "Name of parameter"
    name: String
    "Name of parameter"
    nameWithin: [String]
    "Name of the parameter's parent"
    parentName: String
    "Name of the parameter's parent"
    parentNameWithin: [String]
}

"Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
input PublishedDatasourceSortOrder {
    "Order direction to sort output"
    direction: OrderDirection!
    "GraphQL field to sort on"
    field: PublishedDatasourceOrderField!
}

"Filter by GraphQL field and given value"
input PublishedDatasource_Filter {
    "The name of the container in which the published data source is visible and usable. Either a personal space or project."
    containerName: String
    "The name of the container in which the published data source is visible and usable. Either a personal space or project."
    containerNameWithin: [String]
    "True if the datasource contains unsupported custom SQL, in which case lineage may be incomplete"
    containsUnsupportedCustomSql: Boolean
    "True if the datasource contains unsupported custom SQL, in which case lineage may be incomplete"
    containsUnsupportedCustomSqlWithin: [Boolean]
    "True if the data source has an active data quality warning"
    hasActiveWarning: Boolean
    "True if the data source has an active data quality warning"
    hasActiveWarningWithin: [Boolean]
    "Unique identifier used by the metadata API.  Not the same as the numeric ID used on server"
    id: ID
    "Unique identifier used by the metadata API.  Not the same as the numeric ID used on server"
    idWithin: [ID]
    "True if this data source contains an active data quality certification"
    isCertified: Boolean
    "True if this data source contains an active data quality certification"
    isCertifiedWithin: [Boolean]
    "Locally unique identifier used for the REST API on the Tableau Server"
    luid: String
    "Locally unique identifier used for the REST API on the Tableau Server"
    luidWithin: [String]
    "Name shown in server and desktop clients"
    name: String
    "Name shown in server and desktop clients"
    nameWithin: [String]
    "The name of the project that contains this published data source."
    projectName: String
    "The name of the project that contains this published data source."
    projectNameWithin: [String]
    "VizPortal URL ID; used for URL generation"
    vizportalUrlId: String
    "VizPortal URL ID; used for URL generation"
    vizportalUrlIdWithin: [String]
}

"Filter by GraphQL field and given value"
input RemoteType_Filter {
    "Unique Identifier of object to retrieve"
    id: ID
    "Unique Identifier of object to retrieve"
    idWithin: [ID]
}

"Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
input SetFieldSortOrder {
    "Order direction to sort output"
    direction: OrderDirection!
    "GraphQL field to sort on"
    field: SetFieldOrderField!
}

"Filter by GraphQL field and given value"
input SetField_Filter {
    "Unique identifier used by the metadata API.  Not the same as the numeric ID used on server"
    id: ID
    "Unique identifier used by the metadata API.  Not the same as the numeric ID used on server"
    idWithin: [ID]
    "True if the field is hidden"
    isHidden: Boolean
    "True if the field is hidden"
    isHiddenWithin: [Boolean]
    "Name shown in server and desktop clients"
    name: String
    "Name shown in server and desktop clients"
    nameWithin: [String]
}

"Filter by GraphQL field and given value"
input SetField_Required_Filter {
    "Unique identifier used by the metadata API.  Not the same as the numeric ID used on server"
    id: ID
    "Unique identifier used by the metadata API.  Not the same as the numeric ID used on server"
    idWithin: [ID]
    "Name shown in server and desktop clients"
    name: String
    "Name shown in server and desktop clients"
    nameWithin: [String]
}

"Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
input SheetSortOrder {
    "Order direction to sort output"
    direction: OrderDirection!
    "GraphQL field to sort on"
    field: SheetOrderField!
}

"Filter by GraphQL field and given value"
input Sheet_Filter {
    "Unique ID for the sheet generated for and stored within the workbook, survives renames, and is used for internal processes"
    documentViewId: String
    "Unique ID for the sheet generated for and stored within the workbook, survives renames, and is used for internal processes"
    documentViewIdWithin: [String]
    "Unique identifier used by the metadata API.  Not the same as the numeric ID used on server"
    id: ID
    "Unique identifier used by the metadata API.  Not the same as the numeric ID used on server"
    idWithin: [ID]
    "Locally unique identifier used for the REST API on the Tableau Server (Blank if worksheet is hidden in Workbook)"
    luid: String
    "Locally unique identifier used for the REST API on the Tableau Server (Blank if worksheet is hidden in Workbook)"
    luidWithin: [String]
    "Name shown in server and desktop clients"
    name: String
    "Name shown in server and desktop clients"
    nameWithin: [String]
    "Server path to sheet"
    path: String
    "Server path to sheet"
    pathWithin: [String]
}

"Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
input TableSortOrder {
    "Order direction to sort output"
    direction: OrderDirection!
    "GraphQL field to sort on"
    field: TableOrderField!
}

"Filter by GraphQL field and given value"
input Table_Filter {
    "Unique identifier used by the metadata API.  Not the same as the numeric ID used on server"
    id: ID
    "Unique identifier used by the metadata API.  Not the same as the numeric ID used on server"
    idWithin: [ID]
    "Name shown in server and desktop clients"
    name: String
    "Name shown in server and desktop clients"
    nameWithin: [String]
    "Filter the output based on text query."
    text: String
}

"Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
input TableauSiteSortOrder {
    "Order direction to sort output"
    direction: OrderDirection!
    "GraphQL field to sort on"
    field: TableauSiteOrderField!
}

"Filter by GraphQL field and given value"
input TableauSite_Filter {
    "Unique identifier used by the metadata API. Not the same as the numeric ID used on server"
    id: ID
    "Unique identifier used by the metadata API. Not the same as the numeric ID used on server"
    idWithin: [ID]
    "Locally unique identifier used for the REST API on the Tableau Server"
    luid: String
    "Locally unique identifier used for the REST API on the Tableau Server"
    luidWithin: [String]
    "Name shown in server"
    name: String
    "Name shown in server"
    nameWithin: [String]
}

"Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
input TableauUserSortOrder {
    "Order direction to sort output"
    direction: OrderDirection!
    "GraphQL field to sort on"
    field: TableauUserOrderField!
}

"Filter by GraphQL field and given value"
input TableauUser_Filter {
    "Domain this user belongs to"
    domain: String
    "Domain this user belongs to"
    domainWithin: [String]
    "Email address of this user"
    email: String
    "Email address of this user"
    emailWithin: [String]
    "Unique identifier used by the metadata API. Not the same as the numeric ID used on server"
    id: ID
    "Unique identifier used by the metadata API. Not the same as the numeric ID used on server"
    idWithin: [ID]
    "Locally unique identifier used for the REST API on the Tableau Server"
    luid: String
    "Locally unique identifier used for the REST API on the Tableau Server"
    luidWithin: [String]
    "Display name of this user"
    name: String
    "Display name of this user"
    nameWithin: [String]
    "Username of this user"
    username: String
    "Username of this user"
    usernameWithin: [String]
}

"Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
input TagSortOrder {
    "Order direction to sort output"
    direction: OrderDirection!
    "GraphQL field to sort on"
    field: TagOrderField!
}

"Filter by GraphQL field and given value"
input Tag_Filter {
    "Unique identifier used by the metadata API."
    id: ID
    "Unique identifier used by the metadata API."
    idWithin: [ID]
    "The name of the tag"
    name: String
    "The name of the tag"
    nameWithin: [String]
    "Filter the output based on text query."
    text: String
}

"Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
input TaggableSortOrder {
    "Order direction to sort output"
    direction: OrderDirection!
    "GraphQL field to sort on"
    field: TaggableOrderField!
}

"Filter by GraphQL field and given value"
input Taggable_Filter {
    "Unique identifier used by the metadata API. Not the same as the numeric ID used on server"
    id: ID
    "Unique identifier used by the metadata API. Not the same as the numeric ID used on server"
    idWithin: [ID]
    "Locally unique identifier used for the REST API on the Tableau Server"
    luid: String
    "Locally unique identifier used for the REST API on the Tableau Server"
    luidWithin: [String]
}

"Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
input ViewSortOrder {
    "Order direction to sort output"
    direction: OrderDirection!
    "GraphQL field to sort on"
    field: ViewOrderField!
}

"Filter by GraphQL field and given value"
input View_Filter {
    "Unique ID for the view generated for and stored within the workbook, survives renames, and is used for internal processes"
    documentViewId: String
    "Unique ID for the view generated for and stored within the workbook, survives renames, and is used for internal processes"
    documentViewIdWithin: [String]
    "Unique identifier used by the metadata API.  Not the same as the numeric ID used on server"
    id: ID
    "Unique identifier used by the metadata API.  Not the same as the numeric ID used on server"
    idWithin: [ID]
    "Locally unique identifier used for the REST API on the Tableau Server (Blank if sheet is hidden in Workbook)"
    luid: String
    "Locally unique identifier used for the REST API on the Tableau Server (Blank if sheet is hidden in Workbook)"
    luidWithin: [String]
    "Name shown in server and desktop clients"
    name: String
    "Name shown in server and desktop clients"
    nameWithin: [String]
    "Server path to view"
    path: String
    "Server path to view"
    pathWithin: [String]
}

"Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
input VirtualConnectionSortOrder {
    "Order direction to sort output"
    direction: OrderDirection!
    "GraphQL field to sort on"
    field: VirtualConnectionOrderField!
}

"Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
input VirtualConnectionTableSortOrder {
    "Order direction to sort output"
    direction: OrderDirection!
    "GraphQL field to sort on"
    field: VirtualConnectionTableOrderField!
}

"Filter by GraphQL field and given value"
input VirtualConnectionTable_Filter {
    "True if the datasource contains unsupported custom SQL, in which case lineage may be incomplete"
    containsUnsupportedCustomSql: Boolean
    "True if the datasource contains unsupported custom SQL, in which case lineage may be incomplete"
    containsUnsupportedCustomSqlWithin: [Boolean]
    "The time the data for this table's extract was refreshed."
    extractLastRefreshedAt: DateTime
    "The time the data for this table's extract was refreshed."
    extractLastRefreshedAtWithin: [DateTime]
    "True if the table has an active data quality warning"
    hasActiveWarning: Boolean
    "True if the table has an active data quality warning"
    hasActiveWarningWithin: [Boolean]
    "Unique identifier used by the metadata API.  Not the same as the numeric ID used on server"
    id: ID
    "Unique identifier used by the metadata API.  Not the same as the numeric ID used on server"
    idWithin: [ID]
    "True if this virtual connection table contains an active data quality certification"
    isCertified: Boolean
    "True if this virtual connection table contains an active data quality certification"
    isCertifiedWithin: [Boolean]
    "Whether or not queries to this table are using an extract."
    isExtracted: Boolean
    "Whether or not queries to this table are using an extract."
    isExtractedWithin: [Boolean]
    "Locally unique identifier used for the REST API on the Tableau Server"
    luid: String
    "Locally unique identifier used for the REST API on the Tableau Server"
    luidWithin: [String]
    "Name shown in server and desktop clients"
    name: String
    "Name shown in server and desktop clients"
    nameWithin: [String]
    "VizPortal URL ID; used for URL generation"
    vizportalUrlId: String
    "VizPortal URL ID; used for URL generation"
    vizportalUrlIdWithin: [String]
}

"Filter by GraphQL field and given value"
input VirtualConnection_Filter {
    "Connection type of this virtual connection"
    connectionType: String
    "Connection type of this virtual connection"
    connectionTypeWithin: [String]
    "The name of the container in which the virtual connection is visible and usable. Either a personal space or project."
    containerName: String
    "The name of the container in which the virtual connection is visible and usable. Either a personal space or project."
    containerNameWithin: [String]
    "True if the virtual connection has an active data quality warning"
    hasActiveWarning: Boolean
    "True if the virtual connection has an active data quality warning"
    hasActiveWarningWithin: [Boolean]
    "Unique identifier used by the metadata API.  Not the same as the numeric ID used on server"
    id: ID
    "Unique identifier used by the metadata API.  Not the same as the numeric ID used on server"
    idWithin: [ID]
    "True if this virtual connection contains an active data quality certification"
    isCertified: Boolean
    "True if this virtual connection contains an active data quality certification"
    isCertifiedWithin: [Boolean]
    "Locally unique identifier used for the REST API on the Tableau Server"
    luid: String
    "Locally unique identifier used for the REST API on the Tableau Server"
    luidWithin: [String]
    "Name shown in server and desktop clients"
    name: String
    "Name shown in server and desktop clients"
    nameWithin: [String]
    "The name of the project that contains this virtual connection."
    projectName: String
    "The name of the project that contains this virtual connection."
    projectNameWithin: [String]
    "Vizportal URL ID; used for URL generation"
    vizportalUrlId: String
    "Vizportal URL ID; used for URL generation"
    vizportalUrlIdWithin: [String]
}

"Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
input WarnableSortOrder {
    "Order direction to sort output"
    direction: OrderDirection!
    "GraphQL field to sort on"
    field: WarnableOrderField!
}

"Filter by GraphQL field and given value"
input Warnable_Filter {
    "True if the content has an active data quality warning"
    hasActiveWarning: Boolean
    "True if the content has an active data quality warning"
    hasActiveWarningWithin: [Boolean]
    "Unique identifier used by the metadata API. Not the same as the numeric ID used on server"
    id: ID
    "Unique identifier used by the metadata API. Not the same as the numeric ID used on server"
    idWithin: [ID]
    "Locally unique identifier used for the REST API on the Tableau Server"
    luid: String
    "Locally unique identifier used for the REST API on the Tableau Server"
    luidWithin: [String]
}

"Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
input WebDataConnectorSortOrder {
    "Order direction to sort output"
    direction: OrderDirection!
    "GraphQL field to sort on"
    field: WebDataConnectorOrderField!
}

"Filter by GraphQL field and given value"
input WebDataConnector_Filter {
    "The type of web data connector"
    connectionType: String
    "The type of web data connector"
    connectionTypeWithin: [String]
    "True if the database has an active data quality warning"
    hasActiveWarning: Boolean
    "True if the database has an active data quality warning"
    hasActiveWarningWithin: [Boolean]
    "Unique identifier used by the metadata API. Not the same as the numeric ID used on server"
    id: ID
    "Unique identifier used by the metadata API. Not the same as the numeric ID used on server"
    idWithin: [ID]
    "True if this database contains an active data quality certification"
    isCertified: Boolean
    "True if this database contains an active data quality certification"
    isCertifiedWithin: [Boolean]
    "A web data connector is always embedded in Tableau content"
    isEmbedded: Boolean
    "A web data connector is always embedded in Tableau content"
    isEmbeddedWithin: [Boolean]
    "Locally unique identifier used for the REST API on the Tableau Server"
    luid: String
    "Locally unique identifier used for the REST API on the Tableau Server"
    luidWithin: [String]
    "Name shown in server and desktop clients"
    name: String
    "Name shown in server and desktop clients"
    nameWithin: [String]
    "The name of the project in which the table is visible. Will be empty if the table is not in a project."
    projectName: String
    "The name of the project in which the table is visible. Will be empty if the table is not in a project."
    projectNameWithin: [String]
    "Filter the output based on text query."
    text: String
}

"Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order."
input WorkbookSortOrder {
    "Order direction to sort output"
    direction: OrderDirection!
    "GraphQL field to sort on"
    field: WorkbookOrderField!
}

"Filter by GraphQL field and given value"
input Workbook_Filter {
    "The name of the container in which the workbook is visible and usable. Either a personal space or project."
    containerName: String
    "The name of the container in which the workbook is visible and usable. Either a personal space or project."
    containerNameWithin: [String]
    "True if the workbook contains unsupported custom SQL, in which case lineage may be incomplete"
    containsUnsupportedCustomSql: Boolean
    "True if the workbook contains unsupported custom SQL, in which case lineage may be incomplete"
    containsUnsupportedCustomSqlWithin: [Boolean]
    "Unique identifier used by the metadata API.  Not the same as the numeric ID used on server"
    id: ID
    "Unique identifier used by the metadata API.  Not the same as the numeric ID used on server"
    idWithin: [ID]
    "Locally unique identifier used for the REST API on the Tableau Server"
    luid: String
    "Locally unique identifier used for the REST API on the Tableau Server"
    luidWithin: [String]
    "Name shown in server and desktop clients"
    name: String
    "Name shown in server and desktop clients"
    nameWithin: [String]
    "The luid of the project in which the workbook is visible and usable. Available in Tableau Cloud June 2022 / Server 2022.3 and later."
    projectLuid: String
    "The luid of the project in which the workbook is visible and usable. Available in Tableau Cloud June 2022 / Server 2022.3 and later."
    projectLuidWithin: [String]
    "The name of the project in which the workbook is visible and usable."
    projectName: String
    "The name of the project in which the workbook is visible and usable."
    projectNameWithin: [String]
    "VizPortal URL ID; used for URL generation"
    vizportalUrlId: String
    "VizPortal URL ID; used for URL generation"
    vizportalUrlIdWithin: [String]
}
