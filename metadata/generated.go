// Code generated by github.com/Khan/genqlient, DO NOT EDIT.

package metadata

import (
	"context"
	"encoding/json"
	"fmt"

	"github.com/Khan/genqlient/graphql"
)

// GetCustomSQLTablesDefinitionsCustomSQLTablesConnection includes the requested fields of the GraphQL type CustomSQLTablesConnection.
// The GraphQL type's documentation follows.
//
// Connection Type for CustomSQLTable
type GetCustomSQLTablesDefinitionsCustomSQLTablesConnection struct {
	// List of nodes
	Nodes []GetCustomSQLTablesDefinitionsCustomSQLTablesConnectionNodesCustomSQLTable `json:"nodes"`
	// Information for pagination
	PageInfo GetCustomSQLTablesDefinitionsCustomSQLTablesConnectionPageInfo `json:"pageInfo"`
	// Total number of objects in connection
	TotalCount int `json:"totalCount"`
}

// GetNodes returns GetCustomSQLTablesDefinitionsCustomSQLTablesConnection.Nodes, and is useful for accessing the field via an interface.
func (v *GetCustomSQLTablesDefinitionsCustomSQLTablesConnection) GetNodes() []GetCustomSQLTablesDefinitionsCustomSQLTablesConnectionNodesCustomSQLTable {
	return v.Nodes
}

// GetPageInfo returns GetCustomSQLTablesDefinitionsCustomSQLTablesConnection.PageInfo, and is useful for accessing the field via an interface.
func (v *GetCustomSQLTablesDefinitionsCustomSQLTablesConnection) GetPageInfo() GetCustomSQLTablesDefinitionsCustomSQLTablesConnectionPageInfo {
	return v.PageInfo
}

// GetTotalCount returns GetCustomSQLTablesDefinitionsCustomSQLTablesConnection.TotalCount, and is useful for accessing the field via an interface.
func (v *GetCustomSQLTablesDefinitionsCustomSQLTablesConnection) GetTotalCount() int {
	return v.TotalCount
}

// GetCustomSQLTablesDefinitionsCustomSQLTablesConnectionNodesCustomSQLTable includes the requested fields of the GraphQL type CustomSQLTable.
// The GraphQL type's documentation follows.
//
// table that represents the result of evaluating a custom SQL query. These "tables" are owned by the Tableau data source (embedded or published) which contains the SQL query, so they only exist within that data source.
type GetCustomSQLTablesDefinitionsCustomSQLTablesConnectionNodesCustomSQLTable struct {
	Typename string `json:"__typename"`
	// Unique identifier used by the metadata API.  Not the same as the numeric ID used on server
	Id string `json:"id"`
	// Name shown in server and desktop clients
	Name string `json:"name"`
	// A custom SQL tables is always embedded in Tableau content
	IsEmbedded bool `json:"isEmbedded"`
	// Database this query is executed on
	Database GetCustomSQLTablesDefinitionsCustomSQLTablesConnectionNodesCustomSQLTableDatabase `json:"-"`
	// Connection type shortname
	ConnectionType string `json:"connectionType"`
	// User modifiable description of this table
	Description string `json:"description"`
}

// GetTypename returns GetCustomSQLTablesDefinitionsCustomSQLTablesConnectionNodesCustomSQLTable.Typename, and is useful for accessing the field via an interface.
func (v *GetCustomSQLTablesDefinitionsCustomSQLTablesConnectionNodesCustomSQLTable) GetTypename() string {
	return v.Typename
}

// GetId returns GetCustomSQLTablesDefinitionsCustomSQLTablesConnectionNodesCustomSQLTable.Id, and is useful for accessing the field via an interface.
func (v *GetCustomSQLTablesDefinitionsCustomSQLTablesConnectionNodesCustomSQLTable) GetId() string {
	return v.Id
}

// GetName returns GetCustomSQLTablesDefinitionsCustomSQLTablesConnectionNodesCustomSQLTable.Name, and is useful for accessing the field via an interface.
func (v *GetCustomSQLTablesDefinitionsCustomSQLTablesConnectionNodesCustomSQLTable) GetName() string {
	return v.Name
}

// GetIsEmbedded returns GetCustomSQLTablesDefinitionsCustomSQLTablesConnectionNodesCustomSQLTable.IsEmbedded, and is useful for accessing the field via an interface.
func (v *GetCustomSQLTablesDefinitionsCustomSQLTablesConnectionNodesCustomSQLTable) GetIsEmbedded() bool {
	return v.IsEmbedded
}

// GetDatabase returns GetCustomSQLTablesDefinitionsCustomSQLTablesConnectionNodesCustomSQLTable.Database, and is useful for accessing the field via an interface.
func (v *GetCustomSQLTablesDefinitionsCustomSQLTablesConnectionNodesCustomSQLTable) GetDatabase() GetCustomSQLTablesDefinitionsCustomSQLTablesConnectionNodesCustomSQLTableDatabase {
	return v.Database
}

// GetConnectionType returns GetCustomSQLTablesDefinitionsCustomSQLTablesConnectionNodesCustomSQLTable.ConnectionType, and is useful for accessing the field via an interface.
func (v *GetCustomSQLTablesDefinitionsCustomSQLTablesConnectionNodesCustomSQLTable) GetConnectionType() string {
	return v.ConnectionType
}

// GetDescription returns GetCustomSQLTablesDefinitionsCustomSQLTablesConnectionNodesCustomSQLTable.Description, and is useful for accessing the field via an interface.
func (v *GetCustomSQLTablesDefinitionsCustomSQLTablesConnectionNodesCustomSQLTable) GetDescription() string {
	return v.Description
}

func (v *GetCustomSQLTablesDefinitionsCustomSQLTablesConnectionNodesCustomSQLTable) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*GetCustomSQLTablesDefinitionsCustomSQLTablesConnectionNodesCustomSQLTable
		Database json.RawMessage `json:"database"`
		graphql.NoUnmarshalJSON
	}
	firstPass.GetCustomSQLTablesDefinitionsCustomSQLTablesConnectionNodesCustomSQLTable = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.Database
		src := firstPass.Database
		if len(src) != 0 && string(src) != "null" {
			err = __unmarshalGetCustomSQLTablesDefinitionsCustomSQLTablesConnectionNodesCustomSQLTableDatabase(
				src, dst)
			if err != nil {
				return fmt.Errorf(
					"Unable to unmarshal GetCustomSQLTablesDefinitionsCustomSQLTablesConnectionNodesCustomSQLTable.Database: %w", err)
			}
		}
	}
	return nil
}

type __premarshalGetCustomSQLTablesDefinitionsCustomSQLTablesConnectionNodesCustomSQLTable struct {
	Typename string `json:"__typename"`

	Id string `json:"id"`

	Name string `json:"name"`

	IsEmbedded bool `json:"isEmbedded"`

	Database json.RawMessage `json:"database"`

	ConnectionType string `json:"connectionType"`

	Description string `json:"description"`
}

func (v *GetCustomSQLTablesDefinitionsCustomSQLTablesConnectionNodesCustomSQLTable) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *GetCustomSQLTablesDefinitionsCustomSQLTablesConnectionNodesCustomSQLTable) __premarshalJSON() (*__premarshalGetCustomSQLTablesDefinitionsCustomSQLTablesConnectionNodesCustomSQLTable, error) {
	var retval __premarshalGetCustomSQLTablesDefinitionsCustomSQLTablesConnectionNodesCustomSQLTable

	retval.Typename = v.Typename
	retval.Id = v.Id
	retval.Name = v.Name
	retval.IsEmbedded = v.IsEmbedded
	{

		dst := &retval.Database
		src := v.Database
		var err error
		*dst, err = __marshalGetCustomSQLTablesDefinitionsCustomSQLTablesConnectionNodesCustomSQLTableDatabase(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"Unable to marshal GetCustomSQLTablesDefinitionsCustomSQLTablesConnectionNodesCustomSQLTable.Database: %w", err)
		}
	}
	retval.ConnectionType = v.ConnectionType
	retval.Description = v.Description
	return &retval, nil
}

// GetCustomSQLTablesDefinitionsCustomSQLTablesConnectionNodesCustomSQLTableDatabase includes the requested fields of the GraphQL interface Database.
//
// GetCustomSQLTablesDefinitionsCustomSQLTablesConnectionNodesCustomSQLTableDatabase is implemented by the following types:
// GetCustomSQLTablesDefinitionsCustomSQLTablesConnectionNodesCustomSQLTableDatabaseCloudFile
// GetCustomSQLTablesDefinitionsCustomSQLTablesConnectionNodesCustomSQLTableDatabaseDatabaseServer
// GetCustomSQLTablesDefinitionsCustomSQLTablesConnectionNodesCustomSQLTableDatabaseFile
// GetCustomSQLTablesDefinitionsCustomSQLTablesConnectionNodesCustomSQLTableDatabaseWebDataConnector
// The GraphQL type's documentation follows.
//
// database containing tables
type GetCustomSQLTablesDefinitionsCustomSQLTablesConnectionNodesCustomSQLTableDatabase interface {
	implementsGraphQLInterfaceGetCustomSQLTablesDefinitionsCustomSQLTablesConnectionNodesCustomSQLTableDatabase()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() string
	// GetId returns the interface-field "id" from its implementation.
	// The GraphQL interface field's documentation follows.
	//
	// Unique identifier used by the metadata API.  Not the same as the numeric ID used on server
	GetId() string
	// GetConnectionType returns the interface-field "connectionType" from its implementation.
	// The GraphQL interface field's documentation follows.
	//
	// Connection type shortname
	GetConnectionType() string
	// GetName returns the interface-field "name" from its implementation.
	// The GraphQL interface field's documentation follows.
	//
	// Name shown in server and desktop clients
	GetName() string
	// GetDescription returns the interface-field "description" from its implementation.
	// The GraphQL interface field's documentation follows.
	//
	// User modifiable description of this database
	GetDescription() string
}

func (v *GetCustomSQLTablesDefinitionsCustomSQLTablesConnectionNodesCustomSQLTableDatabaseCloudFile) implementsGraphQLInterfaceGetCustomSQLTablesDefinitionsCustomSQLTablesConnectionNodesCustomSQLTableDatabase() {
}
func (v *GetCustomSQLTablesDefinitionsCustomSQLTablesConnectionNodesCustomSQLTableDatabaseDatabaseServer) implementsGraphQLInterfaceGetCustomSQLTablesDefinitionsCustomSQLTablesConnectionNodesCustomSQLTableDatabase() {
}
func (v *GetCustomSQLTablesDefinitionsCustomSQLTablesConnectionNodesCustomSQLTableDatabaseFile) implementsGraphQLInterfaceGetCustomSQLTablesDefinitionsCustomSQLTablesConnectionNodesCustomSQLTableDatabase() {
}
func (v *GetCustomSQLTablesDefinitionsCustomSQLTablesConnectionNodesCustomSQLTableDatabaseWebDataConnector) implementsGraphQLInterfaceGetCustomSQLTablesDefinitionsCustomSQLTablesConnectionNodesCustomSQLTableDatabase() {
}

func __unmarshalGetCustomSQLTablesDefinitionsCustomSQLTablesConnectionNodesCustomSQLTableDatabase(b []byte, v *GetCustomSQLTablesDefinitionsCustomSQLTablesConnectionNodesCustomSQLTableDatabase) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "CloudFile":
		*v = new(GetCustomSQLTablesDefinitionsCustomSQLTablesConnectionNodesCustomSQLTableDatabaseCloudFile)
		return json.Unmarshal(b, *v)
	case "DatabaseServer":
		*v = new(GetCustomSQLTablesDefinitionsCustomSQLTablesConnectionNodesCustomSQLTableDatabaseDatabaseServer)
		return json.Unmarshal(b, *v)
	case "File":
		*v = new(GetCustomSQLTablesDefinitionsCustomSQLTablesConnectionNodesCustomSQLTableDatabaseFile)
		return json.Unmarshal(b, *v)
	case "WebDataConnector":
		*v = new(GetCustomSQLTablesDefinitionsCustomSQLTablesConnectionNodesCustomSQLTableDatabaseWebDataConnector)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing Database.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for GetCustomSQLTablesDefinitionsCustomSQLTablesConnectionNodesCustomSQLTableDatabase: "%v"`, tn.TypeName)
	}
}

func __marshalGetCustomSQLTablesDefinitionsCustomSQLTablesConnectionNodesCustomSQLTableDatabase(v *GetCustomSQLTablesDefinitionsCustomSQLTablesConnectionNodesCustomSQLTableDatabase) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *GetCustomSQLTablesDefinitionsCustomSQLTablesConnectionNodesCustomSQLTableDatabaseCloudFile:
		typename = "CloudFile"

		result := struct {
			TypeName string `json:"__typename"`
			*GetCustomSQLTablesDefinitionsCustomSQLTablesConnectionNodesCustomSQLTableDatabaseCloudFile
		}{typename, v}
		return json.Marshal(result)
	case *GetCustomSQLTablesDefinitionsCustomSQLTablesConnectionNodesCustomSQLTableDatabaseDatabaseServer:
		typename = "DatabaseServer"

		result := struct {
			TypeName string `json:"__typename"`
			*GetCustomSQLTablesDefinitionsCustomSQLTablesConnectionNodesCustomSQLTableDatabaseDatabaseServer
		}{typename, v}
		return json.Marshal(result)
	case *GetCustomSQLTablesDefinitionsCustomSQLTablesConnectionNodesCustomSQLTableDatabaseFile:
		typename = "File"

		result := struct {
			TypeName string `json:"__typename"`
			*GetCustomSQLTablesDefinitionsCustomSQLTablesConnectionNodesCustomSQLTableDatabaseFile
		}{typename, v}
		return json.Marshal(result)
	case *GetCustomSQLTablesDefinitionsCustomSQLTablesConnectionNodesCustomSQLTableDatabaseWebDataConnector:
		typename = "WebDataConnector"

		result := struct {
			TypeName string `json:"__typename"`
			*GetCustomSQLTablesDefinitionsCustomSQLTablesConnectionNodesCustomSQLTableDatabaseWebDataConnector
		}{typename, v}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for GetCustomSQLTablesDefinitionsCustomSQLTablesConnectionNodesCustomSQLTableDatabase: "%T"`, v)
	}
}

// GetCustomSQLTablesDefinitionsCustomSQLTablesConnectionNodesCustomSQLTableDatabaseCloudFile includes the requested fields of the GraphQL type CloudFile.
// The GraphQL type's documentation follows.
//
// cloud file connection
type GetCustomSQLTablesDefinitionsCustomSQLTablesConnectionNodesCustomSQLTableDatabaseCloudFile struct {
	Typename string `json:"__typename"`
	// Unique identifier used by the metadata API.  Not the same as the numeric ID used on server
	Id string `json:"id"`
	// Connection type shortname
	ConnectionType string `json:"connectionType"`
	// Name shown in server and desktop clients
	Name string `json:"name"`
	// User modifiable description of this database
	Description string `json:"description"`
}

// GetTypename returns GetCustomSQLTablesDefinitionsCustomSQLTablesConnectionNodesCustomSQLTableDatabaseCloudFile.Typename, and is useful for accessing the field via an interface.
func (v *GetCustomSQLTablesDefinitionsCustomSQLTablesConnectionNodesCustomSQLTableDatabaseCloudFile) GetTypename() string {
	return v.Typename
}

// GetId returns GetCustomSQLTablesDefinitionsCustomSQLTablesConnectionNodesCustomSQLTableDatabaseCloudFile.Id, and is useful for accessing the field via an interface.
func (v *GetCustomSQLTablesDefinitionsCustomSQLTablesConnectionNodesCustomSQLTableDatabaseCloudFile) GetId() string {
	return v.Id
}

// GetConnectionType returns GetCustomSQLTablesDefinitionsCustomSQLTablesConnectionNodesCustomSQLTableDatabaseCloudFile.ConnectionType, and is useful for accessing the field via an interface.
func (v *GetCustomSQLTablesDefinitionsCustomSQLTablesConnectionNodesCustomSQLTableDatabaseCloudFile) GetConnectionType() string {
	return v.ConnectionType
}

// GetName returns GetCustomSQLTablesDefinitionsCustomSQLTablesConnectionNodesCustomSQLTableDatabaseCloudFile.Name, and is useful for accessing the field via an interface.
func (v *GetCustomSQLTablesDefinitionsCustomSQLTablesConnectionNodesCustomSQLTableDatabaseCloudFile) GetName() string {
	return v.Name
}

// GetDescription returns GetCustomSQLTablesDefinitionsCustomSQLTablesConnectionNodesCustomSQLTableDatabaseCloudFile.Description, and is useful for accessing the field via an interface.
func (v *GetCustomSQLTablesDefinitionsCustomSQLTablesConnectionNodesCustomSQLTableDatabaseCloudFile) GetDescription() string {
	return v.Description
}

// GetCustomSQLTablesDefinitionsCustomSQLTablesConnectionNodesCustomSQLTableDatabaseDatabaseServer includes the requested fields of the GraphQL type DatabaseServer.
// The GraphQL type's documentation follows.
//
// database server connection
type GetCustomSQLTablesDefinitionsCustomSQLTablesConnectionNodesCustomSQLTableDatabaseDatabaseServer struct {
	Typename string `json:"__typename"`
	// Unique identifier used by the metadata API.  Not the same as the numeric ID used on server
	Id string `json:"id"`
	// Connection type shortname
	ConnectionType string `json:"connectionType"`
	// Name shown in server and desktop clients
	Name string `json:"name"`
	// User modifiable description of this database
	Description string `json:"description"`
}

// GetTypename returns GetCustomSQLTablesDefinitionsCustomSQLTablesConnectionNodesCustomSQLTableDatabaseDatabaseServer.Typename, and is useful for accessing the field via an interface.
func (v *GetCustomSQLTablesDefinitionsCustomSQLTablesConnectionNodesCustomSQLTableDatabaseDatabaseServer) GetTypename() string {
	return v.Typename
}

// GetId returns GetCustomSQLTablesDefinitionsCustomSQLTablesConnectionNodesCustomSQLTableDatabaseDatabaseServer.Id, and is useful for accessing the field via an interface.
func (v *GetCustomSQLTablesDefinitionsCustomSQLTablesConnectionNodesCustomSQLTableDatabaseDatabaseServer) GetId() string {
	return v.Id
}

// GetConnectionType returns GetCustomSQLTablesDefinitionsCustomSQLTablesConnectionNodesCustomSQLTableDatabaseDatabaseServer.ConnectionType, and is useful for accessing the field via an interface.
func (v *GetCustomSQLTablesDefinitionsCustomSQLTablesConnectionNodesCustomSQLTableDatabaseDatabaseServer) GetConnectionType() string {
	return v.ConnectionType
}

// GetName returns GetCustomSQLTablesDefinitionsCustomSQLTablesConnectionNodesCustomSQLTableDatabaseDatabaseServer.Name, and is useful for accessing the field via an interface.
func (v *GetCustomSQLTablesDefinitionsCustomSQLTablesConnectionNodesCustomSQLTableDatabaseDatabaseServer) GetName() string {
	return v.Name
}

// GetDescription returns GetCustomSQLTablesDefinitionsCustomSQLTablesConnectionNodesCustomSQLTableDatabaseDatabaseServer.Description, and is useful for accessing the field via an interface.
func (v *GetCustomSQLTablesDefinitionsCustomSQLTablesConnectionNodesCustomSQLTableDatabaseDatabaseServer) GetDescription() string {
	return v.Description
}

// GetCustomSQLTablesDefinitionsCustomSQLTablesConnectionNodesCustomSQLTableDatabaseFile includes the requested fields of the GraphQL type File.
// The GraphQL type's documentation follows.
//
// file connection
type GetCustomSQLTablesDefinitionsCustomSQLTablesConnectionNodesCustomSQLTableDatabaseFile struct {
	Typename string `json:"__typename"`
	// Unique identifier used by the metadata API.  Not the same as the numeric ID used on server
	Id string `json:"id"`
	// Connection type shortname
	ConnectionType string `json:"connectionType"`
	// Name shown in server and desktop clients
	Name string `json:"name"`
	// User modifiable description of this database
	Description string `json:"description"`
}

// GetTypename returns GetCustomSQLTablesDefinitionsCustomSQLTablesConnectionNodesCustomSQLTableDatabaseFile.Typename, and is useful for accessing the field via an interface.
func (v *GetCustomSQLTablesDefinitionsCustomSQLTablesConnectionNodesCustomSQLTableDatabaseFile) GetTypename() string {
	return v.Typename
}

// GetId returns GetCustomSQLTablesDefinitionsCustomSQLTablesConnectionNodesCustomSQLTableDatabaseFile.Id, and is useful for accessing the field via an interface.
func (v *GetCustomSQLTablesDefinitionsCustomSQLTablesConnectionNodesCustomSQLTableDatabaseFile) GetId() string {
	return v.Id
}

// GetConnectionType returns GetCustomSQLTablesDefinitionsCustomSQLTablesConnectionNodesCustomSQLTableDatabaseFile.ConnectionType, and is useful for accessing the field via an interface.
func (v *GetCustomSQLTablesDefinitionsCustomSQLTablesConnectionNodesCustomSQLTableDatabaseFile) GetConnectionType() string {
	return v.ConnectionType
}

// GetName returns GetCustomSQLTablesDefinitionsCustomSQLTablesConnectionNodesCustomSQLTableDatabaseFile.Name, and is useful for accessing the field via an interface.
func (v *GetCustomSQLTablesDefinitionsCustomSQLTablesConnectionNodesCustomSQLTableDatabaseFile) GetName() string {
	return v.Name
}

// GetDescription returns GetCustomSQLTablesDefinitionsCustomSQLTablesConnectionNodesCustomSQLTableDatabaseFile.Description, and is useful for accessing the field via an interface.
func (v *GetCustomSQLTablesDefinitionsCustomSQLTablesConnectionNodesCustomSQLTableDatabaseFile) GetDescription() string {
	return v.Description
}

// GetCustomSQLTablesDefinitionsCustomSQLTablesConnectionNodesCustomSQLTableDatabaseWebDataConnector includes the requested fields of the GraphQL type WebDataConnector.
// The GraphQL type's documentation follows.
//
// web data connector
type GetCustomSQLTablesDefinitionsCustomSQLTablesConnectionNodesCustomSQLTableDatabaseWebDataConnector struct {
	Typename string `json:"__typename"`
	// Unique identifier used by the metadata API.  Not the same as the numeric ID used on server
	Id string `json:"id"`
	// Connection type shortname
	ConnectionType string `json:"connectionType"`
	// Name shown in server and desktop clients
	Name string `json:"name"`
	// User modifiable description of this database
	Description string `json:"description"`
}

// GetTypename returns GetCustomSQLTablesDefinitionsCustomSQLTablesConnectionNodesCustomSQLTableDatabaseWebDataConnector.Typename, and is useful for accessing the field via an interface.
func (v *GetCustomSQLTablesDefinitionsCustomSQLTablesConnectionNodesCustomSQLTableDatabaseWebDataConnector) GetTypename() string {
	return v.Typename
}

// GetId returns GetCustomSQLTablesDefinitionsCustomSQLTablesConnectionNodesCustomSQLTableDatabaseWebDataConnector.Id, and is useful for accessing the field via an interface.
func (v *GetCustomSQLTablesDefinitionsCustomSQLTablesConnectionNodesCustomSQLTableDatabaseWebDataConnector) GetId() string {
	return v.Id
}

// GetConnectionType returns GetCustomSQLTablesDefinitionsCustomSQLTablesConnectionNodesCustomSQLTableDatabaseWebDataConnector.ConnectionType, and is useful for accessing the field via an interface.
func (v *GetCustomSQLTablesDefinitionsCustomSQLTablesConnectionNodesCustomSQLTableDatabaseWebDataConnector) GetConnectionType() string {
	return v.ConnectionType
}

// GetName returns GetCustomSQLTablesDefinitionsCustomSQLTablesConnectionNodesCustomSQLTableDatabaseWebDataConnector.Name, and is useful for accessing the field via an interface.
func (v *GetCustomSQLTablesDefinitionsCustomSQLTablesConnectionNodesCustomSQLTableDatabaseWebDataConnector) GetName() string {
	return v.Name
}

// GetDescription returns GetCustomSQLTablesDefinitionsCustomSQLTablesConnectionNodesCustomSQLTableDatabaseWebDataConnector.Description, and is useful for accessing the field via an interface.
func (v *GetCustomSQLTablesDefinitionsCustomSQLTablesConnectionNodesCustomSQLTableDatabaseWebDataConnector) GetDescription() string {
	return v.Description
}

// GetCustomSQLTablesDefinitionsCustomSQLTablesConnectionPageInfo includes the requested fields of the GraphQL type PageInfo.
// The GraphQL type's documentation follows.
//
// Information about pagination in a connection
type GetCustomSQLTablesDefinitionsCustomSQLTablesConnectionPageInfo struct {
	// Indicates if there are more objects to fetch
	HasNextPage bool `json:"hasNextPage"`
	// Cursor to use in subsequent query to fetch next page of objects
	EndCursor string `json:"endCursor"`
}

// GetHasNextPage returns GetCustomSQLTablesDefinitionsCustomSQLTablesConnectionPageInfo.HasNextPage, and is useful for accessing the field via an interface.
func (v *GetCustomSQLTablesDefinitionsCustomSQLTablesConnectionPageInfo) GetHasNextPage() bool {
	return v.HasNextPage
}

// GetEndCursor returns GetCustomSQLTablesDefinitionsCustomSQLTablesConnectionPageInfo.EndCursor, and is useful for accessing the field via an interface.
func (v *GetCustomSQLTablesDefinitionsCustomSQLTablesConnectionPageInfo) GetEndCursor() string {
	return v.EndCursor
}

// GetCustomSQLTablesDefinitionsResponse is returned by GetCustomSQLTablesDefinitions on success.
type GetCustomSQLTablesDefinitionsResponse struct {
	// Fetch CustomSQLTables with support for pagination
	CustomSQLTablesConnection GetCustomSQLTablesDefinitionsCustomSQLTablesConnection `json:"customSQLTablesConnection"`
}

// GetCustomSQLTablesConnection returns GetCustomSQLTablesDefinitionsResponse.CustomSQLTablesConnection, and is useful for accessing the field via an interface.
func (v *GetCustomSQLTablesDefinitionsResponse) GetCustomSQLTablesConnection() GetCustomSQLTablesDefinitionsCustomSQLTablesConnection {
	return v.CustomSQLTablesConnection
}

// GetDatabaseTablesDefinitionsDatabaseTablesConnection includes the requested fields of the GraphQL type DatabaseTablesConnection.
// The GraphQL type's documentation follows.
//
// Connection Type for DatabaseTable
type GetDatabaseTablesDefinitionsDatabaseTablesConnection struct {
	// List of nodes
	Nodes []GetDatabaseTablesDefinitionsDatabaseTablesConnectionNodesDatabaseTable `json:"nodes"`
	// Information for pagination
	PageInfo GetDatabaseTablesDefinitionsDatabaseTablesConnectionPageInfo `json:"pageInfo"`
	// Total number of objects in connection
	TotalCount int `json:"totalCount"`
}

// GetNodes returns GetDatabaseTablesDefinitionsDatabaseTablesConnection.Nodes, and is useful for accessing the field via an interface.
func (v *GetDatabaseTablesDefinitionsDatabaseTablesConnection) GetNodes() []GetDatabaseTablesDefinitionsDatabaseTablesConnectionNodesDatabaseTable {
	return v.Nodes
}

// GetPageInfo returns GetDatabaseTablesDefinitionsDatabaseTablesConnection.PageInfo, and is useful for accessing the field via an interface.
func (v *GetDatabaseTablesDefinitionsDatabaseTablesConnection) GetPageInfo() GetDatabaseTablesDefinitionsDatabaseTablesConnectionPageInfo {
	return v.PageInfo
}

// GetTotalCount returns GetDatabaseTablesDefinitionsDatabaseTablesConnection.TotalCount, and is useful for accessing the field via an interface.
func (v *GetDatabaseTablesDefinitionsDatabaseTablesConnection) GetTotalCount() int {
	return v.TotalCount
}

// GetDatabaseTablesDefinitionsDatabaseTablesConnectionNodesDatabaseTable includes the requested fields of the GraphQL type DatabaseTable.
// The GraphQL type's documentation follows.
//
// table that is contained in a database
type GetDatabaseTablesDefinitionsDatabaseTablesConnectionNodesDatabaseTable struct {
	Typename string `json:"__typename"`
	// Unique identifier used by the metadata API.  Not the same as the numeric ID used on server
	Id string `json:"id"`
	// Name shown in server and desktop clients
	Name string `json:"name"`
	// True if this table is embedded in Tableau content
	IsEmbedded bool `json:"isEmbedded"`
	// The database to which this table belongs
	Database GetDatabaseTablesDefinitionsDatabaseTablesConnectionNodesDatabaseTableDatabase `json:"-"`
	// Name of table schema.
	//
	// Note: For some databases, such as Amazon Athena and Exasol, the schema attribute may not return the correct schema name for the table. For more information, see https://help.tableau.com/current/api/metadata_api/en-us/docs/meta_api_model.html#schema_attribute.
	Schema string `json:"schema"`
	// Fully qualified table name
	FullName string `json:"fullName"`
	// Connection type of parent database
	ConnectionType string `json:"connectionType"`
	// User modifiable description of this table
	Description string `json:"description"`
}

// GetTypename returns GetDatabaseTablesDefinitionsDatabaseTablesConnectionNodesDatabaseTable.Typename, and is useful for accessing the field via an interface.
func (v *GetDatabaseTablesDefinitionsDatabaseTablesConnectionNodesDatabaseTable) GetTypename() string {
	return v.Typename
}

// GetId returns GetDatabaseTablesDefinitionsDatabaseTablesConnectionNodesDatabaseTable.Id, and is useful for accessing the field via an interface.
func (v *GetDatabaseTablesDefinitionsDatabaseTablesConnectionNodesDatabaseTable) GetId() string {
	return v.Id
}

// GetName returns GetDatabaseTablesDefinitionsDatabaseTablesConnectionNodesDatabaseTable.Name, and is useful for accessing the field via an interface.
func (v *GetDatabaseTablesDefinitionsDatabaseTablesConnectionNodesDatabaseTable) GetName() string {
	return v.Name
}

// GetIsEmbedded returns GetDatabaseTablesDefinitionsDatabaseTablesConnectionNodesDatabaseTable.IsEmbedded, and is useful for accessing the field via an interface.
func (v *GetDatabaseTablesDefinitionsDatabaseTablesConnectionNodesDatabaseTable) GetIsEmbedded() bool {
	return v.IsEmbedded
}

// GetDatabase returns GetDatabaseTablesDefinitionsDatabaseTablesConnectionNodesDatabaseTable.Database, and is useful for accessing the field via an interface.
func (v *GetDatabaseTablesDefinitionsDatabaseTablesConnectionNodesDatabaseTable) GetDatabase() GetDatabaseTablesDefinitionsDatabaseTablesConnectionNodesDatabaseTableDatabase {
	return v.Database
}

// GetSchema returns GetDatabaseTablesDefinitionsDatabaseTablesConnectionNodesDatabaseTable.Schema, and is useful for accessing the field via an interface.
func (v *GetDatabaseTablesDefinitionsDatabaseTablesConnectionNodesDatabaseTable) GetSchema() string {
	return v.Schema
}

// GetFullName returns GetDatabaseTablesDefinitionsDatabaseTablesConnectionNodesDatabaseTable.FullName, and is useful for accessing the field via an interface.
func (v *GetDatabaseTablesDefinitionsDatabaseTablesConnectionNodesDatabaseTable) GetFullName() string {
	return v.FullName
}

// GetConnectionType returns GetDatabaseTablesDefinitionsDatabaseTablesConnectionNodesDatabaseTable.ConnectionType, and is useful for accessing the field via an interface.
func (v *GetDatabaseTablesDefinitionsDatabaseTablesConnectionNodesDatabaseTable) GetConnectionType() string {
	return v.ConnectionType
}

// GetDescription returns GetDatabaseTablesDefinitionsDatabaseTablesConnectionNodesDatabaseTable.Description, and is useful for accessing the field via an interface.
func (v *GetDatabaseTablesDefinitionsDatabaseTablesConnectionNodesDatabaseTable) GetDescription() string {
	return v.Description
}

func (v *GetDatabaseTablesDefinitionsDatabaseTablesConnectionNodesDatabaseTable) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*GetDatabaseTablesDefinitionsDatabaseTablesConnectionNodesDatabaseTable
		Database json.RawMessage `json:"database"`
		graphql.NoUnmarshalJSON
	}
	firstPass.GetDatabaseTablesDefinitionsDatabaseTablesConnectionNodesDatabaseTable = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.Database
		src := firstPass.Database
		if len(src) != 0 && string(src) != "null" {
			err = __unmarshalGetDatabaseTablesDefinitionsDatabaseTablesConnectionNodesDatabaseTableDatabase(
				src, dst)
			if err != nil {
				return fmt.Errorf(
					"Unable to unmarshal GetDatabaseTablesDefinitionsDatabaseTablesConnectionNodesDatabaseTable.Database: %w", err)
			}
		}
	}
	return nil
}

type __premarshalGetDatabaseTablesDefinitionsDatabaseTablesConnectionNodesDatabaseTable struct {
	Typename string `json:"__typename"`

	Id string `json:"id"`

	Name string `json:"name"`

	IsEmbedded bool `json:"isEmbedded"`

	Database json.RawMessage `json:"database"`

	Schema string `json:"schema"`

	FullName string `json:"fullName"`

	ConnectionType string `json:"connectionType"`

	Description string `json:"description"`
}

func (v *GetDatabaseTablesDefinitionsDatabaseTablesConnectionNodesDatabaseTable) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *GetDatabaseTablesDefinitionsDatabaseTablesConnectionNodesDatabaseTable) __premarshalJSON() (*__premarshalGetDatabaseTablesDefinitionsDatabaseTablesConnectionNodesDatabaseTable, error) {
	var retval __premarshalGetDatabaseTablesDefinitionsDatabaseTablesConnectionNodesDatabaseTable

	retval.Typename = v.Typename
	retval.Id = v.Id
	retval.Name = v.Name
	retval.IsEmbedded = v.IsEmbedded
	{

		dst := &retval.Database
		src := v.Database
		var err error
		*dst, err = __marshalGetDatabaseTablesDefinitionsDatabaseTablesConnectionNodesDatabaseTableDatabase(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"Unable to marshal GetDatabaseTablesDefinitionsDatabaseTablesConnectionNodesDatabaseTable.Database: %w", err)
		}
	}
	retval.Schema = v.Schema
	retval.FullName = v.FullName
	retval.ConnectionType = v.ConnectionType
	retval.Description = v.Description
	return &retval, nil
}

// GetDatabaseTablesDefinitionsDatabaseTablesConnectionNodesDatabaseTableDatabase includes the requested fields of the GraphQL interface Database.
//
// GetDatabaseTablesDefinitionsDatabaseTablesConnectionNodesDatabaseTableDatabase is implemented by the following types:
// GetDatabaseTablesDefinitionsDatabaseTablesConnectionNodesDatabaseTableDatabaseCloudFile
// GetDatabaseTablesDefinitionsDatabaseTablesConnectionNodesDatabaseTableDatabaseDatabaseServer
// GetDatabaseTablesDefinitionsDatabaseTablesConnectionNodesDatabaseTableDatabaseFile
// GetDatabaseTablesDefinitionsDatabaseTablesConnectionNodesDatabaseTableDatabaseWebDataConnector
// The GraphQL type's documentation follows.
//
// database containing tables
type GetDatabaseTablesDefinitionsDatabaseTablesConnectionNodesDatabaseTableDatabase interface {
	implementsGraphQLInterfaceGetDatabaseTablesDefinitionsDatabaseTablesConnectionNodesDatabaseTableDatabase()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() string
	// GetId returns the interface-field "id" from its implementation.
	// The GraphQL interface field's documentation follows.
	//
	// Unique identifier used by the metadata API.  Not the same as the numeric ID used on server
	GetId() string
	// GetName returns the interface-field "name" from its implementation.
	// The GraphQL interface field's documentation follows.
	//
	// Name shown in server and desktop clients
	GetName() string
	// GetConnectionType returns the interface-field "connectionType" from its implementation.
	// The GraphQL interface field's documentation follows.
	//
	// Connection type shortname
	GetConnectionType() string
	// GetDescription returns the interface-field "description" from its implementation.
	// The GraphQL interface field's documentation follows.
	//
	// User modifiable description of this database
	GetDescription() string
}

func (v *GetDatabaseTablesDefinitionsDatabaseTablesConnectionNodesDatabaseTableDatabaseCloudFile) implementsGraphQLInterfaceGetDatabaseTablesDefinitionsDatabaseTablesConnectionNodesDatabaseTableDatabase() {
}
func (v *GetDatabaseTablesDefinitionsDatabaseTablesConnectionNodesDatabaseTableDatabaseDatabaseServer) implementsGraphQLInterfaceGetDatabaseTablesDefinitionsDatabaseTablesConnectionNodesDatabaseTableDatabase() {
}
func (v *GetDatabaseTablesDefinitionsDatabaseTablesConnectionNodesDatabaseTableDatabaseFile) implementsGraphQLInterfaceGetDatabaseTablesDefinitionsDatabaseTablesConnectionNodesDatabaseTableDatabase() {
}
func (v *GetDatabaseTablesDefinitionsDatabaseTablesConnectionNodesDatabaseTableDatabaseWebDataConnector) implementsGraphQLInterfaceGetDatabaseTablesDefinitionsDatabaseTablesConnectionNodesDatabaseTableDatabase() {
}

func __unmarshalGetDatabaseTablesDefinitionsDatabaseTablesConnectionNodesDatabaseTableDatabase(b []byte, v *GetDatabaseTablesDefinitionsDatabaseTablesConnectionNodesDatabaseTableDatabase) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "CloudFile":
		*v = new(GetDatabaseTablesDefinitionsDatabaseTablesConnectionNodesDatabaseTableDatabaseCloudFile)
		return json.Unmarshal(b, *v)
	case "DatabaseServer":
		*v = new(GetDatabaseTablesDefinitionsDatabaseTablesConnectionNodesDatabaseTableDatabaseDatabaseServer)
		return json.Unmarshal(b, *v)
	case "File":
		*v = new(GetDatabaseTablesDefinitionsDatabaseTablesConnectionNodesDatabaseTableDatabaseFile)
		return json.Unmarshal(b, *v)
	case "WebDataConnector":
		*v = new(GetDatabaseTablesDefinitionsDatabaseTablesConnectionNodesDatabaseTableDatabaseWebDataConnector)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing Database.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for GetDatabaseTablesDefinitionsDatabaseTablesConnectionNodesDatabaseTableDatabase: "%v"`, tn.TypeName)
	}
}

func __marshalGetDatabaseTablesDefinitionsDatabaseTablesConnectionNodesDatabaseTableDatabase(v *GetDatabaseTablesDefinitionsDatabaseTablesConnectionNodesDatabaseTableDatabase) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *GetDatabaseTablesDefinitionsDatabaseTablesConnectionNodesDatabaseTableDatabaseCloudFile:
		typename = "CloudFile"

		result := struct {
			TypeName string `json:"__typename"`
			*GetDatabaseTablesDefinitionsDatabaseTablesConnectionNodesDatabaseTableDatabaseCloudFile
		}{typename, v}
		return json.Marshal(result)
	case *GetDatabaseTablesDefinitionsDatabaseTablesConnectionNodesDatabaseTableDatabaseDatabaseServer:
		typename = "DatabaseServer"

		result := struct {
			TypeName string `json:"__typename"`
			*GetDatabaseTablesDefinitionsDatabaseTablesConnectionNodesDatabaseTableDatabaseDatabaseServer
		}{typename, v}
		return json.Marshal(result)
	case *GetDatabaseTablesDefinitionsDatabaseTablesConnectionNodesDatabaseTableDatabaseFile:
		typename = "File"

		result := struct {
			TypeName string `json:"__typename"`
			*GetDatabaseTablesDefinitionsDatabaseTablesConnectionNodesDatabaseTableDatabaseFile
		}{typename, v}
		return json.Marshal(result)
	case *GetDatabaseTablesDefinitionsDatabaseTablesConnectionNodesDatabaseTableDatabaseWebDataConnector:
		typename = "WebDataConnector"

		result := struct {
			TypeName string `json:"__typename"`
			*GetDatabaseTablesDefinitionsDatabaseTablesConnectionNodesDatabaseTableDatabaseWebDataConnector
		}{typename, v}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for GetDatabaseTablesDefinitionsDatabaseTablesConnectionNodesDatabaseTableDatabase: "%T"`, v)
	}
}

// GetDatabaseTablesDefinitionsDatabaseTablesConnectionNodesDatabaseTableDatabaseCloudFile includes the requested fields of the GraphQL type CloudFile.
// The GraphQL type's documentation follows.
//
// cloud file connection
type GetDatabaseTablesDefinitionsDatabaseTablesConnectionNodesDatabaseTableDatabaseCloudFile struct {
	Typename string `json:"__typename"`
	// Unique identifier used by the metadata API.  Not the same as the numeric ID used on server
	Id string `json:"id"`
	// Name shown in server and desktop clients
	Name string `json:"name"`
	// Connection type shortname
	ConnectionType string `json:"connectionType"`
	// User modifiable description of this database
	Description string `json:"description"`
}

// GetTypename returns GetDatabaseTablesDefinitionsDatabaseTablesConnectionNodesDatabaseTableDatabaseCloudFile.Typename, and is useful for accessing the field via an interface.
func (v *GetDatabaseTablesDefinitionsDatabaseTablesConnectionNodesDatabaseTableDatabaseCloudFile) GetTypename() string {
	return v.Typename
}

// GetId returns GetDatabaseTablesDefinitionsDatabaseTablesConnectionNodesDatabaseTableDatabaseCloudFile.Id, and is useful for accessing the field via an interface.
func (v *GetDatabaseTablesDefinitionsDatabaseTablesConnectionNodesDatabaseTableDatabaseCloudFile) GetId() string {
	return v.Id
}

// GetName returns GetDatabaseTablesDefinitionsDatabaseTablesConnectionNodesDatabaseTableDatabaseCloudFile.Name, and is useful for accessing the field via an interface.
func (v *GetDatabaseTablesDefinitionsDatabaseTablesConnectionNodesDatabaseTableDatabaseCloudFile) GetName() string {
	return v.Name
}

// GetConnectionType returns GetDatabaseTablesDefinitionsDatabaseTablesConnectionNodesDatabaseTableDatabaseCloudFile.ConnectionType, and is useful for accessing the field via an interface.
func (v *GetDatabaseTablesDefinitionsDatabaseTablesConnectionNodesDatabaseTableDatabaseCloudFile) GetConnectionType() string {
	return v.ConnectionType
}

// GetDescription returns GetDatabaseTablesDefinitionsDatabaseTablesConnectionNodesDatabaseTableDatabaseCloudFile.Description, and is useful for accessing the field via an interface.
func (v *GetDatabaseTablesDefinitionsDatabaseTablesConnectionNodesDatabaseTableDatabaseCloudFile) GetDescription() string {
	return v.Description
}

// GetDatabaseTablesDefinitionsDatabaseTablesConnectionNodesDatabaseTableDatabaseDatabaseServer includes the requested fields of the GraphQL type DatabaseServer.
// The GraphQL type's documentation follows.
//
// database server connection
type GetDatabaseTablesDefinitionsDatabaseTablesConnectionNodesDatabaseTableDatabaseDatabaseServer struct {
	Typename string `json:"__typename"`
	// Unique identifier used by the metadata API.  Not the same as the numeric ID used on server
	Id string `json:"id"`
	// Name shown in server and desktop clients
	Name string `json:"name"`
	// Connection type shortname
	ConnectionType string `json:"connectionType"`
	// User modifiable description of this database
	Description string `json:"description"`
}

// GetTypename returns GetDatabaseTablesDefinitionsDatabaseTablesConnectionNodesDatabaseTableDatabaseDatabaseServer.Typename, and is useful for accessing the field via an interface.
func (v *GetDatabaseTablesDefinitionsDatabaseTablesConnectionNodesDatabaseTableDatabaseDatabaseServer) GetTypename() string {
	return v.Typename
}

// GetId returns GetDatabaseTablesDefinitionsDatabaseTablesConnectionNodesDatabaseTableDatabaseDatabaseServer.Id, and is useful for accessing the field via an interface.
func (v *GetDatabaseTablesDefinitionsDatabaseTablesConnectionNodesDatabaseTableDatabaseDatabaseServer) GetId() string {
	return v.Id
}

// GetName returns GetDatabaseTablesDefinitionsDatabaseTablesConnectionNodesDatabaseTableDatabaseDatabaseServer.Name, and is useful for accessing the field via an interface.
func (v *GetDatabaseTablesDefinitionsDatabaseTablesConnectionNodesDatabaseTableDatabaseDatabaseServer) GetName() string {
	return v.Name
}

// GetConnectionType returns GetDatabaseTablesDefinitionsDatabaseTablesConnectionNodesDatabaseTableDatabaseDatabaseServer.ConnectionType, and is useful for accessing the field via an interface.
func (v *GetDatabaseTablesDefinitionsDatabaseTablesConnectionNodesDatabaseTableDatabaseDatabaseServer) GetConnectionType() string {
	return v.ConnectionType
}

// GetDescription returns GetDatabaseTablesDefinitionsDatabaseTablesConnectionNodesDatabaseTableDatabaseDatabaseServer.Description, and is useful for accessing the field via an interface.
func (v *GetDatabaseTablesDefinitionsDatabaseTablesConnectionNodesDatabaseTableDatabaseDatabaseServer) GetDescription() string {
	return v.Description
}

// GetDatabaseTablesDefinitionsDatabaseTablesConnectionNodesDatabaseTableDatabaseFile includes the requested fields of the GraphQL type File.
// The GraphQL type's documentation follows.
//
// file connection
type GetDatabaseTablesDefinitionsDatabaseTablesConnectionNodesDatabaseTableDatabaseFile struct {
	Typename string `json:"__typename"`
	// Unique identifier used by the metadata API.  Not the same as the numeric ID used on server
	Id string `json:"id"`
	// Name shown in server and desktop clients
	Name string `json:"name"`
	// Connection type shortname
	ConnectionType string `json:"connectionType"`
	// User modifiable description of this database
	Description string `json:"description"`
}

// GetTypename returns GetDatabaseTablesDefinitionsDatabaseTablesConnectionNodesDatabaseTableDatabaseFile.Typename, and is useful for accessing the field via an interface.
func (v *GetDatabaseTablesDefinitionsDatabaseTablesConnectionNodesDatabaseTableDatabaseFile) GetTypename() string {
	return v.Typename
}

// GetId returns GetDatabaseTablesDefinitionsDatabaseTablesConnectionNodesDatabaseTableDatabaseFile.Id, and is useful for accessing the field via an interface.
func (v *GetDatabaseTablesDefinitionsDatabaseTablesConnectionNodesDatabaseTableDatabaseFile) GetId() string {
	return v.Id
}

// GetName returns GetDatabaseTablesDefinitionsDatabaseTablesConnectionNodesDatabaseTableDatabaseFile.Name, and is useful for accessing the field via an interface.
func (v *GetDatabaseTablesDefinitionsDatabaseTablesConnectionNodesDatabaseTableDatabaseFile) GetName() string {
	return v.Name
}

// GetConnectionType returns GetDatabaseTablesDefinitionsDatabaseTablesConnectionNodesDatabaseTableDatabaseFile.ConnectionType, and is useful for accessing the field via an interface.
func (v *GetDatabaseTablesDefinitionsDatabaseTablesConnectionNodesDatabaseTableDatabaseFile) GetConnectionType() string {
	return v.ConnectionType
}

// GetDescription returns GetDatabaseTablesDefinitionsDatabaseTablesConnectionNodesDatabaseTableDatabaseFile.Description, and is useful for accessing the field via an interface.
func (v *GetDatabaseTablesDefinitionsDatabaseTablesConnectionNodesDatabaseTableDatabaseFile) GetDescription() string {
	return v.Description
}

// GetDatabaseTablesDefinitionsDatabaseTablesConnectionNodesDatabaseTableDatabaseWebDataConnector includes the requested fields of the GraphQL type WebDataConnector.
// The GraphQL type's documentation follows.
//
// web data connector
type GetDatabaseTablesDefinitionsDatabaseTablesConnectionNodesDatabaseTableDatabaseWebDataConnector struct {
	Typename string `json:"__typename"`
	// Unique identifier used by the metadata API.  Not the same as the numeric ID used on server
	Id string `json:"id"`
	// Name shown in server and desktop clients
	Name string `json:"name"`
	// Connection type shortname
	ConnectionType string `json:"connectionType"`
	// User modifiable description of this database
	Description string `json:"description"`
}

// GetTypename returns GetDatabaseTablesDefinitionsDatabaseTablesConnectionNodesDatabaseTableDatabaseWebDataConnector.Typename, and is useful for accessing the field via an interface.
func (v *GetDatabaseTablesDefinitionsDatabaseTablesConnectionNodesDatabaseTableDatabaseWebDataConnector) GetTypename() string {
	return v.Typename
}

// GetId returns GetDatabaseTablesDefinitionsDatabaseTablesConnectionNodesDatabaseTableDatabaseWebDataConnector.Id, and is useful for accessing the field via an interface.
func (v *GetDatabaseTablesDefinitionsDatabaseTablesConnectionNodesDatabaseTableDatabaseWebDataConnector) GetId() string {
	return v.Id
}

// GetName returns GetDatabaseTablesDefinitionsDatabaseTablesConnectionNodesDatabaseTableDatabaseWebDataConnector.Name, and is useful for accessing the field via an interface.
func (v *GetDatabaseTablesDefinitionsDatabaseTablesConnectionNodesDatabaseTableDatabaseWebDataConnector) GetName() string {
	return v.Name
}

// GetConnectionType returns GetDatabaseTablesDefinitionsDatabaseTablesConnectionNodesDatabaseTableDatabaseWebDataConnector.ConnectionType, and is useful for accessing the field via an interface.
func (v *GetDatabaseTablesDefinitionsDatabaseTablesConnectionNodesDatabaseTableDatabaseWebDataConnector) GetConnectionType() string {
	return v.ConnectionType
}

// GetDescription returns GetDatabaseTablesDefinitionsDatabaseTablesConnectionNodesDatabaseTableDatabaseWebDataConnector.Description, and is useful for accessing the field via an interface.
func (v *GetDatabaseTablesDefinitionsDatabaseTablesConnectionNodesDatabaseTableDatabaseWebDataConnector) GetDescription() string {
	return v.Description
}

// GetDatabaseTablesDefinitionsDatabaseTablesConnectionPageInfo includes the requested fields of the GraphQL type PageInfo.
// The GraphQL type's documentation follows.
//
// Information about pagination in a connection
type GetDatabaseTablesDefinitionsDatabaseTablesConnectionPageInfo struct {
	// Indicates if there are more objects to fetch
	HasNextPage bool `json:"hasNextPage"`
	// Cursor to use in subsequent query to fetch next page of objects
	EndCursor string `json:"endCursor"`
}

// GetHasNextPage returns GetDatabaseTablesDefinitionsDatabaseTablesConnectionPageInfo.HasNextPage, and is useful for accessing the field via an interface.
func (v *GetDatabaseTablesDefinitionsDatabaseTablesConnectionPageInfo) GetHasNextPage() bool {
	return v.HasNextPage
}

// GetEndCursor returns GetDatabaseTablesDefinitionsDatabaseTablesConnectionPageInfo.EndCursor, and is useful for accessing the field via an interface.
func (v *GetDatabaseTablesDefinitionsDatabaseTablesConnectionPageInfo) GetEndCursor() string {
	return v.EndCursor
}

// GetDatabaseTablesDefinitionsResponse is returned by GetDatabaseTablesDefinitions on success.
type GetDatabaseTablesDefinitionsResponse struct {
	// Fetch DatabaseTables with support for pagination
	DatabaseTablesConnection GetDatabaseTablesDefinitionsDatabaseTablesConnection `json:"databaseTablesConnection"`
}

// GetDatabaseTablesConnection returns GetDatabaseTablesDefinitionsResponse.DatabaseTablesConnection, and is useful for accessing the field via an interface.
func (v *GetDatabaseTablesDefinitionsResponse) GetDatabaseTablesConnection() GetDatabaseTablesDefinitionsDatabaseTablesConnection {
	return v.DatabaseTablesConnection
}

// __GetCustomSQLTablesDefinitionsInput is used internally by genqlient
type __GetCustomSQLTablesDefinitionsInput struct {
	First  int `json:"first"`
	Offset int `json:"offset"`
}

// GetFirst returns __GetCustomSQLTablesDefinitionsInput.First, and is useful for accessing the field via an interface.
func (v *__GetCustomSQLTablesDefinitionsInput) GetFirst() int { return v.First }

// GetOffset returns __GetCustomSQLTablesDefinitionsInput.Offset, and is useful for accessing the field via an interface.
func (v *__GetCustomSQLTablesDefinitionsInput) GetOffset() int { return v.Offset }

// __GetDatabaseTablesDefinitionsInput is used internally by genqlient
type __GetDatabaseTablesDefinitionsInput struct {
	First  int `json:"first"`
	Offset int `json:"offset"`
}

// GetFirst returns __GetDatabaseTablesDefinitionsInput.First, and is useful for accessing the field via an interface.
func (v *__GetDatabaseTablesDefinitionsInput) GetFirst() int { return v.First }

// GetOffset returns __GetDatabaseTablesDefinitionsInput.Offset, and is useful for accessing the field via an interface.
func (v *__GetDatabaseTablesDefinitionsInput) GetOffset() int { return v.Offset }

func GetCustomSQLTablesDefinitions(
	ctx context.Context,
	client graphql.Client,
	first int,
	offset int,
) (*GetCustomSQLTablesDefinitionsResponse, error) {
	req := &graphql.Request{
		OpName: "GetCustomSQLTablesDefinitions",
		Query: `
query GetCustomSQLTablesDefinitions ($first: Int!, $offset: Int!) {
	customSQLTablesConnection(first: $first, offset: $offset) {
		nodes {
			__typename
			id
			name
			isEmbedded
			database {
				__typename
				id
				connectionType
				name
				description
			}
			connectionType
			description
		}
		pageInfo {
			hasNextPage
			endCursor
		}
		totalCount
	}
}
`,
		Variables: &__GetCustomSQLTablesDefinitionsInput{
			First:  first,
			Offset: offset,
		},
	}
	var err error

	var data GetCustomSQLTablesDefinitionsResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func GetDatabaseTablesDefinitions(
	ctx context.Context,
	client graphql.Client,
	first int,
	offset int,
) (*GetDatabaseTablesDefinitionsResponse, error) {
	req := &graphql.Request{
		OpName: "GetDatabaseTablesDefinitions",
		Query: `
query GetDatabaseTablesDefinitions ($first: Int!, $offset: Int!) {
	databaseTablesConnection(first: $first, offset: $offset) {
		nodes {
			__typename
			id
			name
			isEmbedded
			database {
				__typename
				id
				name
				connectionType
				description
			}
			schema
			fullName
			connectionType
			description
		}
		pageInfo {
			hasNextPage
			endCursor
		}
		totalCount
	}
}
`,
		Variables: &__GetDatabaseTablesDefinitionsInput{
			First:  first,
			Offset: offset,
		},
	}
	var err error

	var data GetDatabaseTablesDefinitionsResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}
